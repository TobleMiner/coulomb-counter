
LiPoProtect.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001810  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00001810  000018a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a9  0080007a  0080007a  000018be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001124  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000502  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c96  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000628  00000000  00000000  00003d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000710  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001158  00000000  00000000  00004a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	0d c9       	rjmp	.-3558   	; 0xfffff220 <__eeprom_end+0xff7ef220>
       6:	2a c9       	rjmp	.-3500   	; 0xfffff25c <__eeprom_end+0xff7ef25c>
       8:	d7 c8       	rjmp	.-3666   	; 0xfffff1b8 <__eeprom_end+0xff7ef1b8>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	a1 c8       	rjmp	.-3774   	; 0xfffff150 <__eeprom_end+0xff7ef150>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	2e c8       	rjmp	.-4004   	; 0xfffff078 <__eeprom_end+0xff7ef078>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	94 c9       	rjmp	.-3288   	; 0xfffff348 <__eeprom_end+0xff7ef348>
      20:	d2 c9       	rjmp	.-3164   	; 0xfffff3c6 <__eeprom_end+0xff7ef3c6>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	10 e0       	ldi	r17, 0x00	; 0
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	e0 e1       	ldi	r30, 0x10	; 16
      36:	f8 e1       	ldi	r31, 0x18	; 24
      38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0
      3e:	aa 37       	cpi	r26, 0x7A	; 122
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
      44:	21 e0       	ldi	r18, 0x01	; 1
      46:	aa e7       	ldi	r26, 0x7A	; 122
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	a3 32       	cpi	r26, 0x23	; 35
      50:	b2 07       	cpc	r27, r18
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	c7 d6       	rcall	.+3470   	; 0xde4 <main>
      56:	da cb       	rjmp	.-2124   	; 0xfffff80c <__eeprom_end+0xff7ef80c>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <output_on>:

uint64_t timedelta_ns(struct timeval_t* pre, struct timeval_t* post) {
	struct timeval_t delta;
	timedelta(pre, post, &delta);
	return SEC_NSECS * delta.secs + delta.nsecs;
}
      5a:	e7 e7       	ldi	r30, 0x77	; 119
      5c:	f0 e0       	ldi	r31, 0x00	; 0
      5e:	82 81       	ldd	r24, Z+2	; 0x02
      60:	81 60       	ori	r24, 0x01	; 1
      62:	82 83       	std	Z+2, r24	; 0x02
      64:	ed ea       	ldi	r30, 0xAD	; 173
      66:	f0 e0       	ldi	r31, 0x00	; 0
      68:	80 81       	ld	r24, Z
      6a:	80 61       	ori	r24, 0x10	; 16
      6c:	80 83       	st	Z, r24
      6e:	df 9a       	sbi	0x1b, 7	; 27
      70:	08 95       	ret

00000072 <output_off>:
      72:	e7 e7       	ldi	r30, 0x77	; 119
      74:	f0 e0       	ldi	r31, 0x00	; 0
      76:	82 81       	ldd	r24, Z+2	; 0x02
      78:	8e 7f       	andi	r24, 0xFE	; 254
      7a:	82 83       	std	Z+2, r24	; 0x02
      7c:	ed ea       	ldi	r30, 0xAD	; 173
      7e:	f0 e0       	ldi	r31, 0x00	; 0
      80:	80 81       	ld	r24, Z
      82:	8f 7e       	andi	r24, 0xEF	; 239
      84:	80 83       	st	Z, r24
      86:	df 98       	cbi	0x1b, 7	; 27
      88:	08 95       	ret

0000008a <set_output_state>:
      8a:	88 23       	and	r24, r24
      8c:	11 f0       	breq	.+4      	; 0x92 <set_output_state+0x8>
      8e:	e5 df       	rcall	.-54     	; 0x5a <output_on>
      90:	08 95       	ret
      92:	ef df       	rcall	.-34     	; 0x72 <output_off>
      94:	08 95       	ret

00000096 <timeval_add_nsec>:
      96:	4f 92       	push	r4
      98:	5f 92       	push	r5
      9a:	6f 92       	push	r6
      9c:	7f 92       	push	r7
      9e:	8f 92       	push	r8
      a0:	9f 92       	push	r9
      a2:	af 92       	push	r10
      a4:	bf 92       	push	r11
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	ec 01       	movw	r28, r24
      b8:	b2 2f       	mov	r27, r18
      ba:	a3 2f       	mov	r26, r19
      bc:	f4 2f       	mov	r31, r20
      be:	e5 2f       	mov	r30, r21
      c0:	86 2f       	mov	r24, r22
      c2:	97 2f       	mov	r25, r23
      c4:	20 2f       	mov	r18, r16
      c6:	31 2f       	mov	r19, r17
      c8:	4b 2f       	mov	r20, r27
      ca:	5a 2f       	mov	r21, r26
      cc:	6f 2f       	mov	r22, r31
      ce:	7e 2f       	mov	r23, r30
      d0:	a8 84       	ldd	r10, Y+8	; 0x08
      d2:	b9 84       	ldd	r11, Y+9	; 0x09
      d4:	ca 84       	ldd	r12, Y+10	; 0x0a
      d6:	db 84       	ldd	r13, Y+11	; 0x0b
      d8:	ec 84       	ldd	r14, Y+12	; 0x0c
      da:	fd 84       	ldd	r15, Y+13	; 0x0d
      dc:	0e 85       	ldd	r16, Y+14	; 0x0e
      de:	1f 85       	ldd	r17, Y+15	; 0x0f
      e0:	6e db       	rcall	.-2340   	; 0xfffff7be <__eeprom_end+0xff7ef7be>
      e2:	92 2e       	mov	r9, r18
      e4:	a3 2e       	mov	r10, r19
      e6:	b4 2e       	mov	r11, r20
      e8:	c5 2e       	mov	r12, r21
      ea:	d6 2e       	mov	r13, r22
      ec:	e7 2e       	mov	r14, r23
      ee:	f8 2e       	mov	r15, r24
      f0:	09 2f       	mov	r16, r25
      f2:	28 87       	std	Y+8, r18	; 0x08
      f4:	39 87       	std	Y+9, r19	; 0x09
      f6:	4a 87       	std	Y+10, r20	; 0x0a
      f8:	5b 87       	std	Y+11, r21	; 0x0b
      fa:	6c 87       	std	Y+12, r22	; 0x0c
      fc:	7d 87       	std	Y+13, r23	; 0x0d
      fe:	8e 87       	std	Y+14, r24	; 0x0e
     100:	9f 87       	std	Y+15, r25	; 0x0f
     102:	2f 3f       	cpi	r18, 0xFF	; 255
     104:	39 4c       	sbci	r19, 0xC9	; 201
     106:	4a 49       	sbci	r20, 0x9A	; 154
     108:	5b 43       	sbci	r21, 0x3B	; 59
     10a:	61 05       	cpc	r22, r1
     10c:	71 05       	cpc	r23, r1
     10e:	81 05       	cpc	r24, r1
     110:	91 05       	cpc	r25, r1
     112:	09 f0       	breq	.+2      	; 0x116 <timeval_add_nsec+0x80>
     114:	08 f4       	brcc	.+2      	; 0x118 <timeval_add_nsec+0x82>
     116:	4e c0       	rjmp	.+156    	; 0x1b4 <timeval_add_nsec+0x11e>
     118:	a8 81       	ld	r26, Y
     11a:	f9 81       	ldd	r31, Y+1	; 0x01
     11c:	ea 81       	ldd	r30, Y+2	; 0x02
     11e:	6b 80       	ldd	r6, Y+3	; 0x03
     120:	5c 80       	ldd	r5, Y+4	; 0x04
     122:	4d 80       	ldd	r4, Y+5	; 0x05
     124:	7e 80       	ldd	r7, Y+6	; 0x06
     126:	8f 80       	ldd	r8, Y+7	; 0x07
     128:	2a 2f       	mov	r18, r26
     12a:	3f 2f       	mov	r19, r31
     12c:	4e 2f       	mov	r20, r30
     12e:	56 2d       	mov	r21, r6
     130:	65 2d       	mov	r22, r5
     132:	74 2d       	mov	r23, r4
     134:	87 2d       	mov	r24, r7
     136:	98 2d       	mov	r25, r8
     138:	a1 e0       	ldi	r26, 0x01	; 1
     13a:	4a db       	rcall	.-2412   	; 0xfffff7d0 <__eeprom_end+0xff7ef7d0>
     13c:	a2 2f       	mov	r26, r18
     13e:	f3 2f       	mov	r31, r19
     140:	e4 2f       	mov	r30, r20
     142:	65 2e       	mov	r6, r21
     144:	56 2e       	mov	r5, r22
     146:	47 2e       	mov	r4, r23
     148:	78 2e       	mov	r7, r24
     14a:	89 2e       	mov	r8, r25
     14c:	29 2d       	mov	r18, r9
     14e:	3a 2d       	mov	r19, r10
     150:	4b 2d       	mov	r20, r11
     152:	5c 2d       	mov	r21, r12
     154:	6d 2d       	mov	r22, r13
     156:	7e 2d       	mov	r23, r14
     158:	8f 2d       	mov	r24, r15
     15a:	90 2f       	mov	r25, r16
     15c:	3a 5c       	subi	r19, 0xCA	; 202
     15e:	4a 49       	sbci	r20, 0x9A	; 154
     160:	5b 43       	sbci	r21, 0x3B	; 59
     162:	61 09       	sbc	r22, r1
     164:	71 09       	sbc	r23, r1
     166:	81 09       	sbc	r24, r1
     168:	91 09       	sbc	r25, r1
     16a:	92 2e       	mov	r9, r18
     16c:	a3 2e       	mov	r10, r19
     16e:	b4 2e       	mov	r11, r20
     170:	c5 2e       	mov	r12, r21
     172:	d6 2e       	mov	r13, r22
     174:	e7 2e       	mov	r14, r23
     176:	f8 2e       	mov	r15, r24
     178:	09 2f       	mov	r16, r25
     17a:	2f 3f       	cpi	r18, 0xFF	; 255
     17c:	b9 ec       	ldi	r27, 0xC9	; 201
     17e:	3b 07       	cpc	r19, r27
     180:	ba e9       	ldi	r27, 0x9A	; 154
     182:	4b 07       	cpc	r20, r27
     184:	bb e3       	ldi	r27, 0x3B	; 59
     186:	5b 07       	cpc	r21, r27
     188:	61 05       	cpc	r22, r1
     18a:	71 05       	cpc	r23, r1
     18c:	81 05       	cpc	r24, r1
     18e:	91 05       	cpc	r25, r1
     190:	09 f0       	breq	.+2      	; 0x194 <timeval_add_nsec+0xfe>
     192:	50 f6       	brcc	.-108    	; 0x128 <timeval_add_nsec+0x92>
     194:	a8 83       	st	Y, r26
     196:	f9 83       	std	Y+1, r31	; 0x01
     198:	ea 83       	std	Y+2, r30	; 0x02
     19a:	6b 82       	std	Y+3, r6	; 0x03
     19c:	5c 82       	std	Y+4, r5	; 0x04
     19e:	4d 82       	std	Y+5, r4	; 0x05
     1a0:	7e 82       	std	Y+6, r7	; 0x06
     1a2:	8f 82       	std	Y+7, r8	; 0x07
     1a4:	28 87       	std	Y+8, r18	; 0x08
     1a6:	39 87       	std	Y+9, r19	; 0x09
     1a8:	4a 87       	std	Y+10, r20	; 0x0a
     1aa:	5b 87       	std	Y+11, r21	; 0x0b
     1ac:	6c 87       	std	Y+12, r22	; 0x0c
     1ae:	7d 87       	std	Y+13, r23	; 0x0d
     1b0:	8e 87       	std	Y+14, r24	; 0x0e
     1b2:	9f 87       	std	Y+15, r25	; 0x0f
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	9f 90       	pop	r9
     1ca:	8f 90       	pop	r8
     1cc:	7f 90       	pop	r7
     1ce:	6f 90       	pop	r6
     1d0:	5f 90       	pop	r5
     1d2:	4f 90       	pop	r4
     1d4:	08 95       	ret

000001d6 <now_fast>:
     1d6:	dc 01       	movw	r26, r24
     1d8:	90 e1       	ldi	r25, 0x10	; 16
     1da:	ed ed       	ldi	r30, 0xDD	; 221
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	01 90       	ld	r0, Z+
     1e0:	0d 92       	st	X+, r0
     1e2:	9a 95       	dec	r25
     1e4:	e1 f7       	brne	.-8      	; 0x1de <now_fast+0x8>
     1e6:	08 95       	ret

000001e8 <now>:
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	9c 01       	movw	r18, r24
     1fe:	90 e1       	ldi	r25, 0x10	; 16
     200:	ed ed       	ldi	r30, 0xDD	; 221
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	d9 01       	movw	r26, r18
     206:	01 90       	ld	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	9a 95       	dec	r25
     20c:	e1 f7       	brne	.-8      	; 0x206 <now+0x1e>
     20e:	90 91 ad 00 	lds	r25, 0x00AD
     212:	9c 70       	andi	r25, 0x0C	; 12
     214:	94 30       	cpi	r25, 0x04	; 4
     216:	f9 f4       	brne	.+62     	; 0x256 <now+0x6e>
     218:	e9 01       	movw	r28, r18
     21a:	2c b5       	in	r18, 0x2c	; 44
     21c:	a1 2c       	mov	r10, r1
     21e:	0f 2e       	mov	r0, r31
     220:	fd e7       	ldi	r31, 0x7D	; 125
     222:	bf 2e       	mov	r11, r31
     224:	f0 2d       	mov	r31, r0
     226:	c1 2c       	mov	r12, r1
     228:	d1 2c       	mov	r13, r1
     22a:	e1 2c       	mov	r14, r1
     22c:	f1 2c       	mov	r15, r1
     22e:	00 e0       	ldi	r16, 0x00	; 0
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e0       	ldi	r20, 0x00	; 0
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	9b d9       	rcall	.-3274   	; 0xfffff578 <__eeprom_end+0xff7ef578>
     242:	02 2f       	mov	r16, r18
     244:	13 2f       	mov	r17, r19
     246:	24 2f       	mov	r18, r20
     248:	35 2f       	mov	r19, r21
     24a:	46 2f       	mov	r20, r22
     24c:	57 2f       	mov	r21, r23
     24e:	68 2f       	mov	r22, r24
     250:	79 2f       	mov	r23, r25
     252:	ce 01       	movw	r24, r28
     254:	20 df       	rcall	.-448    	; 0x96 <timeval_add_nsec>
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	df 90       	pop	r13
     264:	cf 90       	pop	r12
     266:	bf 90       	pop	r11
     268:	af 90       	pop	r10
     26a:	08 95       	ret

0000026c <timecmp>:
     26c:	2f 92       	push	r2
     26e:	3f 92       	push	r3
     270:	4f 92       	push	r4
     272:	5f 92       	push	r5
     274:	6f 92       	push	r6
     276:	7f 92       	push	r7
     278:	8f 92       	push	r8
     27a:	9f 92       	push	r9
     27c:	af 92       	push	r10
     27e:	bf 92       	push	r11
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	2a 97       	sbiw	r28, 0x0a	; 10
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	cd bf       	out	0x3d, r28	; 61
     2a0:	dc 01       	movw	r26, r24
     2a2:	78 87       	std	Y+8, r23	; 0x08
     2a4:	6f 83       	std	Y+7, r22	; 0x07
     2a6:	2c 90       	ld	r2, X
     2a8:	11 96       	adiw	r26, 0x01	; 1
     2aa:	3c 90       	ld	r3, X
     2ac:	11 97       	sbiw	r26, 0x01	; 1
     2ae:	12 96       	adiw	r26, 0x02	; 2
     2b0:	4c 90       	ld	r4, X
     2b2:	12 97       	sbiw	r26, 0x02	; 2
     2b4:	13 96       	adiw	r26, 0x03	; 3
     2b6:	5c 90       	ld	r5, X
     2b8:	13 97       	sbiw	r26, 0x03	; 3
     2ba:	14 96       	adiw	r26, 0x04	; 4
     2bc:	6c 90       	ld	r6, X
     2be:	14 97       	sbiw	r26, 0x04	; 4
     2c0:	15 96       	adiw	r26, 0x05	; 5
     2c2:	7c 90       	ld	r7, X
     2c4:	15 97       	sbiw	r26, 0x05	; 5
     2c6:	16 96       	adiw	r26, 0x06	; 6
     2c8:	8c 90       	ld	r8, X
     2ca:	16 97       	sbiw	r26, 0x06	; 6
     2cc:	17 96       	adiw	r26, 0x07	; 7
     2ce:	9c 90       	ld	r9, X
     2d0:	17 97       	sbiw	r26, 0x07	; 7
     2d2:	fb 01       	movw	r30, r22
     2d4:	f0 81       	ld	r31, Z
     2d6:	fa 87       	std	Y+10, r31	; 0x0a
     2d8:	fb 01       	movw	r30, r22
     2da:	f1 81       	ldd	r31, Z+1	; 0x01
     2dc:	f9 87       	std	Y+9, r31	; 0x09
     2de:	fb 01       	movw	r30, r22
     2e0:	f2 81       	ldd	r31, Z+2	; 0x02
     2e2:	f9 83       	std	Y+1, r31	; 0x01
     2e4:	fb 01       	movw	r30, r22
     2e6:	f3 81       	ldd	r31, Z+3	; 0x03
     2e8:	fa 83       	std	Y+2, r31	; 0x02
     2ea:	fb 01       	movw	r30, r22
     2ec:	f4 81       	ldd	r31, Z+4	; 0x04
     2ee:	fb 83       	std	Y+3, r31	; 0x03
     2f0:	fb 01       	movw	r30, r22
     2f2:	f5 81       	ldd	r31, Z+5	; 0x05
     2f4:	fc 83       	std	Y+4, r31	; 0x04
     2f6:	fb 01       	movw	r30, r22
     2f8:	f6 81       	ldd	r31, Z+6	; 0x06
     2fa:	fd 83       	std	Y+5, r31	; 0x05
     2fc:	fb 01       	movw	r30, r22
     2fe:	f7 81       	ldd	r31, Z+7	; 0x07
     300:	fe 83       	std	Y+6, r31	; 0x06
     302:	22 2d       	mov	r18, r2
     304:	33 2d       	mov	r19, r3
     306:	44 2d       	mov	r20, r4
     308:	55 2d       	mov	r21, r5
     30a:	66 2d       	mov	r22, r6
     30c:	77 2d       	mov	r23, r7
     30e:	88 2d       	mov	r24, r8
     310:	99 2d       	mov	r25, r9
     312:	aa 84       	ldd	r10, Y+10	; 0x0a
     314:	b9 84       	ldd	r11, Y+9	; 0x09
     316:	c9 80       	ldd	r12, Y+1	; 0x01
     318:	da 80       	ldd	r13, Y+2	; 0x02
     31a:	eb 80       	ldd	r14, Y+3	; 0x03
     31c:	fc 80       	ldd	r15, Y+4	; 0x04
     31e:	0d 81       	ldd	r16, Y+5	; 0x05
     320:	1f 2f       	mov	r17, r31
     322:	6b da       	rcall	.-2858   	; 0xfffff7fa <__eeprom_end+0xff7ef7fa>
     324:	11 f0       	breq	.+4      	; 0x32a <timecmp+0xbe>
     326:	08 f0       	brcs	.+2      	; 0x32a <timecmp+0xbe>
     328:	4e c0       	rjmp	.+156    	; 0x3c6 <timecmp+0x15a>
     32a:	67 da       	rcall	.-2866   	; 0xfffff7fa <__eeprom_end+0xff7ef7fa>
     32c:	08 f4       	brcc	.+2      	; 0x330 <timecmp+0xc4>
     32e:	4d c0       	rjmp	.+154    	; 0x3ca <timecmp+0x15e>
     330:	18 96       	adiw	r26, 0x08	; 8
     332:	4c 90       	ld	r4, X
     334:	18 97       	sbiw	r26, 0x08	; 8
     336:	19 96       	adiw	r26, 0x09	; 9
     338:	5c 90       	ld	r5, X
     33a:	19 97       	sbiw	r26, 0x09	; 9
     33c:	1a 96       	adiw	r26, 0x0a	; 10
     33e:	6c 90       	ld	r6, X
     340:	1a 97       	sbiw	r26, 0x0a	; 10
     342:	1b 96       	adiw	r26, 0x0b	; 11
     344:	7c 90       	ld	r7, X
     346:	1b 97       	sbiw	r26, 0x0b	; 11
     348:	1c 96       	adiw	r26, 0x0c	; 12
     34a:	8c 90       	ld	r8, X
     34c:	1c 97       	sbiw	r26, 0x0c	; 12
     34e:	1d 96       	adiw	r26, 0x0d	; 13
     350:	9c 90       	ld	r9, X
     352:	1d 97       	sbiw	r26, 0x0d	; 13
     354:	1e 96       	adiw	r26, 0x0e	; 14
     356:	ec 91       	ld	r30, X
     358:	1e 97       	sbiw	r26, 0x0e	; 14
     35a:	ee 83       	std	Y+6, r30	; 0x06
     35c:	1f 96       	adiw	r26, 0x0f	; 15
     35e:	2c 90       	ld	r2, X
     360:	af 81       	ldd	r26, Y+7	; 0x07
     362:	b8 85       	ldd	r27, Y+8	; 0x08
     364:	18 96       	adiw	r26, 0x08	; 8
     366:	3c 90       	ld	r3, X
     368:	18 97       	sbiw	r26, 0x08	; 8
     36a:	19 96       	adiw	r26, 0x09	; 9
     36c:	bc 91       	ld	r27, X
     36e:	bc 83       	std	Y+4, r27	; 0x04
     370:	ef 81       	ldd	r30, Y+7	; 0x07
     372:	f8 85       	ldd	r31, Y+8	; 0x08
     374:	b2 85       	ldd	r27, Z+10	; 0x0a
     376:	a3 85       	ldd	r26, Z+11	; 0x0b
     378:	f4 85       	ldd	r31, Z+12	; 0x0c
     37a:	f9 83       	std	Y+1, r31	; 0x01
     37c:	ef 81       	ldd	r30, Y+7	; 0x07
     37e:	f8 85       	ldd	r31, Y+8	; 0x08
     380:	f5 85       	ldd	r31, Z+13	; 0x0d
     382:	fa 83       	std	Y+2, r31	; 0x02
     384:	ef 81       	ldd	r30, Y+7	; 0x07
     386:	f8 85       	ldd	r31, Y+8	; 0x08
     388:	f6 85       	ldd	r31, Z+14	; 0x0e
     38a:	fb 83       	std	Y+3, r31	; 0x03
     38c:	ef 81       	ldd	r30, Y+7	; 0x07
     38e:	f8 85       	ldd	r31, Y+8	; 0x08
     390:	f7 85       	ldd	r31, Z+15	; 0x0f
     392:	24 2d       	mov	r18, r4
     394:	35 2d       	mov	r19, r5
     396:	46 2d       	mov	r20, r6
     398:	57 2d       	mov	r21, r7
     39a:	68 2d       	mov	r22, r8
     39c:	79 2d       	mov	r23, r9
     39e:	8e 81       	ldd	r24, Y+6	; 0x06
     3a0:	92 2d       	mov	r25, r2
     3a2:	a3 2c       	mov	r10, r3
     3a4:	bc 80       	ldd	r11, Y+4	; 0x04
     3a6:	cb 2e       	mov	r12, r27
     3a8:	da 2e       	mov	r13, r26
     3aa:	e9 80       	ldd	r14, Y+1	; 0x01
     3ac:	fa 80       	ldd	r15, Y+2	; 0x02
     3ae:	0b 81       	ldd	r16, Y+3	; 0x03
     3b0:	1f 2f       	mov	r17, r31
     3b2:	23 da       	rcall	.-3002   	; 0xfffff7fa <__eeprom_end+0xff7ef7fa>
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <timecmp+0x14c>
     3b6:	58 f4       	brcc	.+22     	; 0x3ce <timecmp+0x162>
     3b8:	e1 e0       	ldi	r30, 0x01	; 1
     3ba:	1f da       	rcall	.-3010   	; 0xfffff7fa <__eeprom_end+0xff7ef7fa>
     3bc:	08 f0       	brcs	.+2      	; 0x3c0 <timecmp+0x154>
     3be:	e0 e0       	ldi	r30, 0x00	; 0
     3c0:	8e 2f       	mov	r24, r30
     3c2:	81 95       	neg	r24
     3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <timecmp+0x164>
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <timecmp+0x164>
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <timecmp+0x164>
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	2a 96       	adiw	r28, 0x0a	; 10
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	bf 90       	pop	r11
     3ee:	af 90       	pop	r10
     3f0:	9f 90       	pop	r9
     3f2:	8f 90       	pop	r8
     3f4:	7f 90       	pop	r7
     3f6:	6f 90       	pop	r6
     3f8:	5f 90       	pop	r5
     3fa:	4f 90       	pop	r4
     3fc:	3f 90       	pop	r3
     3fe:	2f 90       	pop	r2
     400:	08 95       	ret

00000402 <timedelta>:
     402:	2f 92       	push	r2
     404:	3f 92       	push	r3
     406:	4f 92       	push	r4
     408:	5f 92       	push	r5
     40a:	6f 92       	push	r6
     40c:	7f 92       	push	r7
     40e:	8f 92       	push	r8
     410:	9f 92       	push	r9
     412:	af 92       	push	r10
     414:	bf 92       	push	r11
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	64 97       	sbiw	r28, 0x14	; 20
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	9a 8b       	std	Y+18, r25	; 0x12
     438:	89 8b       	std	Y+17, r24	; 0x11
     43a:	4b 01       	movw	r8, r22
     43c:	fa 01       	movw	r30, r20
     43e:	db 01       	movw	r26, r22
     440:	2c 91       	ld	r18, X
     442:	11 96       	adiw	r26, 0x01	; 1
     444:	3c 91       	ld	r19, X
     446:	11 97       	sbiw	r26, 0x01	; 1
     448:	12 96       	adiw	r26, 0x02	; 2
     44a:	4c 91       	ld	r20, X
     44c:	12 97       	sbiw	r26, 0x02	; 2
     44e:	13 96       	adiw	r26, 0x03	; 3
     450:	5c 91       	ld	r21, X
     452:	13 97       	sbiw	r26, 0x03	; 3
     454:	14 96       	adiw	r26, 0x04	; 4
     456:	6c 91       	ld	r22, X
     458:	14 97       	sbiw	r26, 0x04	; 4
     45a:	15 96       	adiw	r26, 0x05	; 5
     45c:	7c 91       	ld	r23, X
     45e:	15 97       	sbiw	r26, 0x05	; 5
     460:	16 96       	adiw	r26, 0x06	; 6
     462:	8c 91       	ld	r24, X
     464:	16 97       	sbiw	r26, 0x06	; 6
     466:	17 96       	adiw	r26, 0x07	; 7
     468:	9c 91       	ld	r25, X
     46a:	a9 89       	ldd	r26, Y+17	; 0x11
     46c:	ba 89       	ldd	r27, Y+18	; 0x12
     46e:	ac 90       	ld	r10, X
     470:	11 96       	adiw	r26, 0x01	; 1
     472:	bc 90       	ld	r11, X
     474:	11 97       	sbiw	r26, 0x01	; 1
     476:	12 96       	adiw	r26, 0x02	; 2
     478:	cc 90       	ld	r12, X
     47a:	12 97       	sbiw	r26, 0x02	; 2
     47c:	13 96       	adiw	r26, 0x03	; 3
     47e:	dc 90       	ld	r13, X
     480:	13 97       	sbiw	r26, 0x03	; 3
     482:	14 96       	adiw	r26, 0x04	; 4
     484:	ec 90       	ld	r14, X
     486:	14 97       	sbiw	r26, 0x04	; 4
     488:	15 96       	adiw	r26, 0x05	; 5
     48a:	fc 90       	ld	r15, X
     48c:	15 97       	sbiw	r26, 0x05	; 5
     48e:	16 96       	adiw	r26, 0x06	; 6
     490:	0c 91       	ld	r16, X
     492:	16 97       	sbiw	r26, 0x06	; 6
     494:	17 96       	adiw	r26, 0x07	; 7
     496:	1c 91       	ld	r17, X
     498:	a7 d9       	rcall	.-3250   	; 0xfffff7e8 <__eeprom_end+0xff7ef7e8>
     49a:	29 87       	std	Y+9, r18	; 0x09
     49c:	3a 87       	std	Y+10, r19	; 0x0a
     49e:	4b 87       	std	Y+11, r20	; 0x0b
     4a0:	5c 87       	std	Y+12, r21	; 0x0c
     4a2:	6d 87       	std	Y+13, r22	; 0x0d
     4a4:	7e 87       	std	Y+14, r23	; 0x0e
     4a6:	8f 87       	std	Y+15, r24	; 0x0f
     4a8:	98 8b       	std	Y+16, r25	; 0x10
     4aa:	20 83       	st	Z, r18
     4ac:	31 83       	std	Z+1, r19	; 0x01
     4ae:	42 83       	std	Z+2, r20	; 0x02
     4b0:	53 83       	std	Z+3, r21	; 0x03
     4b2:	64 83       	std	Z+4, r22	; 0x04
     4b4:	75 83       	std	Z+5, r23	; 0x05
     4b6:	86 83       	std	Z+6, r24	; 0x06
     4b8:	97 83       	std	Z+7, r25	; 0x07
     4ba:	a9 89       	ldd	r26, Y+17	; 0x11
     4bc:	ba 89       	ldd	r27, Y+18	; 0x12
     4be:	18 96       	adiw	r26, 0x08	; 8
     4c0:	2c 90       	ld	r2, X
     4c2:	18 97       	sbiw	r26, 0x08	; 8
     4c4:	19 96       	adiw	r26, 0x09	; 9
     4c6:	3c 90       	ld	r3, X
     4c8:	19 97       	sbiw	r26, 0x09	; 9
     4ca:	1a 96       	adiw	r26, 0x0a	; 10
     4cc:	4c 90       	ld	r4, X
     4ce:	1a 97       	sbiw	r26, 0x0a	; 10
     4d0:	1b 96       	adiw	r26, 0x0b	; 11
     4d2:	5c 90       	ld	r5, X
     4d4:	1b 97       	sbiw	r26, 0x0b	; 11
     4d6:	1c 96       	adiw	r26, 0x0c	; 12
     4d8:	6c 90       	ld	r6, X
     4da:	1c 97       	sbiw	r26, 0x0c	; 12
     4dc:	1d 96       	adiw	r26, 0x0d	; 13
     4de:	7c 90       	ld	r7, X
     4e0:	1d 97       	sbiw	r26, 0x0d	; 13
     4e2:	1e 96       	adiw	r26, 0x0e	; 14
     4e4:	bc 91       	ld	r27, X
     4e6:	bb 8b       	std	Y+19, r27	; 0x13
     4e8:	a9 89       	ldd	r26, Y+17	; 0x11
     4ea:	ba 89       	ldd	r27, Y+18	; 0x12
     4ec:	1f 96       	adiw	r26, 0x0f	; 15
     4ee:	bc 91       	ld	r27, X
     4f0:	bc 8b       	std	Y+20, r27	; 0x14
     4f2:	d4 01       	movw	r26, r8
     4f4:	18 96       	adiw	r26, 0x08	; 8
     4f6:	bc 91       	ld	r27, X
     4f8:	b9 83       	std	Y+1, r27	; 0x01
     4fa:	d4 01       	movw	r26, r8
     4fc:	19 96       	adiw	r26, 0x09	; 9
     4fe:	bc 91       	ld	r27, X
     500:	ba 83       	std	Y+2, r27	; 0x02
     502:	d4 01       	movw	r26, r8
     504:	1a 96       	adiw	r26, 0x0a	; 10
     506:	bc 91       	ld	r27, X
     508:	bb 83       	std	Y+3, r27	; 0x03
     50a:	d4 01       	movw	r26, r8
     50c:	1b 96       	adiw	r26, 0x0b	; 11
     50e:	bc 91       	ld	r27, X
     510:	bc 83       	std	Y+4, r27	; 0x04
     512:	d4 01       	movw	r26, r8
     514:	1c 96       	adiw	r26, 0x0c	; 12
     516:	bc 91       	ld	r27, X
     518:	bd 83       	std	Y+5, r27	; 0x05
     51a:	d4 01       	movw	r26, r8
     51c:	1d 96       	adiw	r26, 0x0d	; 13
     51e:	bc 91       	ld	r27, X
     520:	be 83       	std	Y+6, r27	; 0x06
     522:	d4 01       	movw	r26, r8
     524:	1e 96       	adiw	r26, 0x0e	; 14
     526:	bc 91       	ld	r27, X
     528:	bf 83       	std	Y+7, r27	; 0x07
     52a:	d4 01       	movw	r26, r8
     52c:	1f 96       	adiw	r26, 0x0f	; 15
     52e:	bc 91       	ld	r27, X
     530:	b8 87       	std	Y+8, r27	; 0x08
     532:	22 2d       	mov	r18, r2
     534:	33 2d       	mov	r19, r3
     536:	44 2d       	mov	r20, r4
     538:	55 2d       	mov	r21, r5
     53a:	66 2d       	mov	r22, r6
     53c:	77 2d       	mov	r23, r7
     53e:	8b 89       	ldd	r24, Y+19	; 0x13
     540:	9c 89       	ldd	r25, Y+20	; 0x14
     542:	a9 80       	ldd	r10, Y+1	; 0x01
     544:	ba 80       	ldd	r11, Y+2	; 0x02
     546:	cb 80       	ldd	r12, Y+3	; 0x03
     548:	dc 80       	ldd	r13, Y+4	; 0x04
     54a:	ed 80       	ldd	r14, Y+5	; 0x05
     54c:	fe 80       	ldd	r15, Y+6	; 0x06
     54e:	0f 81       	ldd	r16, Y+7	; 0x07
     550:	1b 2f       	mov	r17, r27
     552:	53 d9       	rcall	.-3418   	; 0xfffff7fa <__eeprom_end+0xff7ef7fa>
     554:	09 f0       	breq	.+2      	; 0x558 <timedelta+0x156>
     556:	08 f4       	brcc	.+2      	; 0x55a <timedelta+0x158>
     558:	54 c0       	rjmp	.+168    	; 0x602 <timedelta+0x200>
     55a:	29 85       	ldd	r18, Y+9	; 0x09
     55c:	3a 85       	ldd	r19, Y+10	; 0x0a
     55e:	4b 85       	ldd	r20, Y+11	; 0x0b
     560:	5c 85       	ldd	r21, Y+12	; 0x0c
     562:	6d 85       	ldd	r22, Y+13	; 0x0d
     564:	7e 85       	ldd	r23, Y+14	; 0x0e
     566:	8f 85       	ldd	r24, Y+15	; 0x0f
     568:	98 89       	ldd	r25, Y+16	; 0x10
     56a:	af ef       	ldi	r26, 0xFF	; 255
     56c:	31 d9       	rcall	.-3486   	; 0xfffff7d0 <__eeprom_end+0xff7ef7d0>
     56e:	20 83       	st	Z, r18
     570:	31 83       	std	Z+1, r19	; 0x01
     572:	42 83       	std	Z+2, r20	; 0x02
     574:	53 83       	std	Z+3, r21	; 0x03
     576:	64 83       	std	Z+4, r22	; 0x04
     578:	75 83       	std	Z+5, r23	; 0x05
     57a:	86 83       	std	Z+6, r24	; 0x06
     57c:	97 83       	std	Z+7, r25	; 0x07
     57e:	d4 01       	movw	r26, r8
     580:	18 96       	adiw	r26, 0x08	; 8
     582:	2c 91       	ld	r18, X
     584:	18 97       	sbiw	r26, 0x08	; 8
     586:	19 96       	adiw	r26, 0x09	; 9
     588:	3c 91       	ld	r19, X
     58a:	19 97       	sbiw	r26, 0x09	; 9
     58c:	1a 96       	adiw	r26, 0x0a	; 10
     58e:	4c 91       	ld	r20, X
     590:	1a 97       	sbiw	r26, 0x0a	; 10
     592:	1b 96       	adiw	r26, 0x0b	; 11
     594:	5c 91       	ld	r21, X
     596:	1b 97       	sbiw	r26, 0x0b	; 11
     598:	1c 96       	adiw	r26, 0x0c	; 12
     59a:	6c 91       	ld	r22, X
     59c:	1c 97       	sbiw	r26, 0x0c	; 12
     59e:	1d 96       	adiw	r26, 0x0d	; 13
     5a0:	7c 91       	ld	r23, X
     5a2:	1d 97       	sbiw	r26, 0x0d	; 13
     5a4:	1e 96       	adiw	r26, 0x0e	; 14
     5a6:	8c 91       	ld	r24, X
     5a8:	1e 97       	sbiw	r26, 0x0e	; 14
     5aa:	1f 96       	adiw	r26, 0x0f	; 15
     5ac:	9c 91       	ld	r25, X
     5ae:	36 53       	subi	r19, 0x36	; 54
     5b0:	45 46       	sbci	r20, 0x65	; 101
     5b2:	54 4c       	sbci	r21, 0xC4	; 196
     5b4:	6f 4f       	sbci	r22, 0xFF	; 255
     5b6:	7f 4f       	sbci	r23, 0xFF	; 255
     5b8:	8f 4f       	sbci	r24, 0xFF	; 255
     5ba:	9f 4f       	sbci	r25, 0xFF	; 255
     5bc:	a9 89       	ldd	r26, Y+17	; 0x11
     5be:	ba 89       	ldd	r27, Y+18	; 0x12
     5c0:	18 96       	adiw	r26, 0x08	; 8
     5c2:	ac 90       	ld	r10, X
     5c4:	18 97       	sbiw	r26, 0x08	; 8
     5c6:	19 96       	adiw	r26, 0x09	; 9
     5c8:	bc 90       	ld	r11, X
     5ca:	19 97       	sbiw	r26, 0x09	; 9
     5cc:	1a 96       	adiw	r26, 0x0a	; 10
     5ce:	cc 90       	ld	r12, X
     5d0:	1a 97       	sbiw	r26, 0x0a	; 10
     5d2:	1b 96       	adiw	r26, 0x0b	; 11
     5d4:	dc 90       	ld	r13, X
     5d6:	1b 97       	sbiw	r26, 0x0b	; 11
     5d8:	1c 96       	adiw	r26, 0x0c	; 12
     5da:	ec 90       	ld	r14, X
     5dc:	1c 97       	sbiw	r26, 0x0c	; 12
     5de:	1d 96       	adiw	r26, 0x0d	; 13
     5e0:	fc 90       	ld	r15, X
     5e2:	1d 97       	sbiw	r26, 0x0d	; 13
     5e4:	1e 96       	adiw	r26, 0x0e	; 14
     5e6:	0c 91       	ld	r16, X
     5e8:	1e 97       	sbiw	r26, 0x0e	; 14
     5ea:	1f 96       	adiw	r26, 0x0f	; 15
     5ec:	1c 91       	ld	r17, X
     5ee:	fc d8       	rcall	.-3592   	; 0xfffff7e8 <__eeprom_end+0xff7ef7e8>
     5f0:	20 87       	std	Z+8, r18	; 0x08
     5f2:	31 87       	std	Z+9, r19	; 0x09
     5f4:	42 87       	std	Z+10, r20	; 0x0a
     5f6:	53 87       	std	Z+11, r21	; 0x0b
     5f8:	64 87       	std	Z+12, r22	; 0x0c
     5fa:	75 87       	std	Z+13, r23	; 0x0d
     5fc:	86 87       	std	Z+14, r24	; 0x0e
     5fe:	97 87       	std	Z+15, r25	; 0x0f
     600:	19 c0       	rjmp	.+50     	; 0x634 <timedelta+0x232>
     602:	29 81       	ldd	r18, Y+1	; 0x01
     604:	3a 81       	ldd	r19, Y+2	; 0x02
     606:	4b 81       	ldd	r20, Y+3	; 0x03
     608:	5c 81       	ldd	r21, Y+4	; 0x04
     60a:	6d 81       	ldd	r22, Y+5	; 0x05
     60c:	7e 81       	ldd	r23, Y+6	; 0x06
     60e:	8f 81       	ldd	r24, Y+7	; 0x07
     610:	98 85       	ldd	r25, Y+8	; 0x08
     612:	a2 2c       	mov	r10, r2
     614:	b3 2c       	mov	r11, r3
     616:	c4 2c       	mov	r12, r4
     618:	d5 2c       	mov	r13, r5
     61a:	e6 2c       	mov	r14, r6
     61c:	f7 2c       	mov	r15, r7
     61e:	0b 89       	ldd	r16, Y+19	; 0x13
     620:	1c 89       	ldd	r17, Y+20	; 0x14
     622:	e2 d8       	rcall	.-3644   	; 0xfffff7e8 <__eeprom_end+0xff7ef7e8>
     624:	20 87       	std	Z+8, r18	; 0x08
     626:	31 87       	std	Z+9, r19	; 0x09
     628:	42 87       	std	Z+10, r20	; 0x0a
     62a:	53 87       	std	Z+11, r21	; 0x0b
     62c:	64 87       	std	Z+12, r22	; 0x0c
     62e:	75 87       	std	Z+13, r23	; 0x0d
     630:	86 87       	std	Z+14, r24	; 0x0e
     632:	97 87       	std	Z+15, r25	; 0x0f
     634:	64 96       	adiw	r28, 0x14	; 20
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	af 90       	pop	r10
     654:	9f 90       	pop	r9
     656:	8f 90       	pop	r8
     658:	7f 90       	pop	r7
     65a:	6f 90       	pop	r6
     65c:	5f 90       	pop	r5
     65e:	4f 90       	pop	r4
     660:	3f 90       	pop	r3
     662:	2f 90       	pop	r2
     664:	08 95       	ret

00000666 <setup_timer1>:

void setup_timer1()  {
	PRR &= ~BIT(PRTIM1);
     666:	03 98       	cbi	0x00, 3	; 0
	// Set up timer (CLKDIV /16, compare match)
	TIMSK1 = BIT(OCIE1A);
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	8c b9       	out	0x0c, r24	; 12
	// One compare match interrupt each 8 ms
	OCR1AL = TIMER1_LIMIT;
     66c:	84 e6       	ldi	r24, 0x64	; 100
     66e:	8a bd       	out	0x2a, r24	; 42
	OCR1AH = 0;
     670:	1b bc       	out	0x2b, r1	; 43
	TCNT1L = 0;
     672:	1c bc       	out	0x2c, r1	; 44
	TCNT1H = 0;
     674:	1d bc       	out	0x2d, r1	; 45
	TCCR1B = BIT(WGM12) | BIT(CS12);
     676:	8c e0       	ldi	r24, 0x0C	; 12
     678:	8e bd       	out	0x2e, r24	; 46
     67a:	08 95       	ret

0000067c <shutdown_timer1>:
}

void shutdown_timer1() {
	TCCR1B = 0;
     67c:	1e bc       	out	0x2e, r1	; 46
	PRR |= BIT(PRTIM1);
     67e:	03 9a       	sbi	0x00, 3	; 0
     680:	08 95       	ret

00000682 <setup_wdt>:
#define POWER_ACTIVE (state.output_on)

void setup_wdt() {
	// Set up watchdog timer, ~1 interrupt per second
	uint8_t	prescaler_bits = BIT(WDIE);
	MCUSR &= ~BIT(WDRF);
     682:	84 b7       	in	r24, 0x34	; 52
     684:	87 7f       	andi	r24, 0xF7	; 247
     686:	84 bf       	out	0x34, r24	; 52
	WDTCSR = BIT(WDCE) | BIT(WDE);
     688:	88 e1       	ldi	r24, 0x18	; 24
     68a:	81 bd       	out	0x21, r24	; 33
	WDTCSR = prescaler_bits;
     68c:	80 e4       	ldi	r24, 0x40	; 64
     68e:	81 bd       	out	0x21, r24	; 33
     690:	08 95       	ret

00000692 <shutdown_wdt>:
}

void shutdown_wdt() {
	MCUSR &= ~BIT(WDRF);
     692:	84 b7       	in	r24, 0x34	; 52
     694:	87 7f       	andi	r24, 0xF7	; 247
     696:	84 bf       	out	0x34, r24	; 52
	WDTCSR = BIT(WDCE) | BIT(WDE);
     698:	88 e1       	ldi	r24, 0x18	; 24
     69a:	81 bd       	out	0x21, r24	; 33
	WDTCSR = 0;
     69c:	11 bc       	out	0x21, r1	; 33
     69e:	08 95       	ret

000006a0 <set_time_source>:
}

void set_time_source(uint8_t source) {
     6a0:	cf 93       	push	r28
	if(source == state.timesource) {
     6a2:	90 91 ad 00 	lds	r25, 0x00AD
     6a6:	96 95       	lsr	r25
     6a8:	96 95       	lsr	r25
     6aa:	93 70       	andi	r25, 0x03	; 3
     6ac:	98 17       	cp	r25, r24
     6ae:	f1 f0       	breq	.+60     	; 0x6ec <set_time_source+0x4c>
     6b0:	c8 2f       	mov	r28, r24
		return;
	}
	ATOMIC_BEGIN
     6b2:	f8 94       	cli
	switch(source) {
     6b4:	81 30       	cpi	r24, 0x01	; 1
     6b6:	21 f0       	breq	.+8      	; 0x6c0 <set_time_source+0x20>
     6b8:	60 f0       	brcs	.+24     	; 0x6d2 <set_time_source+0x32>
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <set_time_source+0x26>
     6be:	0b c0       	rjmp	.+22     	; 0x6d6 <set_time_source+0x36>
		case CLOCK_TIMER:
			shutdown_wdt();
     6c0:	e8 df       	rcall	.-48     	; 0x692 <shutdown_wdt>
			// No recovery of partial WDT counter overflow possible, accuracy issue?
			setup_timer1();
     6c2:	d1 df       	rcall	.-94     	; 0x666 <setup_timer1>
			break;
     6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <set_time_source+0x36>
		case CLOCK_WDT:
			shutdown_timer1();
     6c6:	da df       	rcall	.-76     	; 0x67c <shutdown_timer1>
			now(&past);
     6c8:	8d ed       	ldi	r24, 0xDD	; 221
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	8d dd       	rcall	.-1254   	; 0x1e8 <now>
			setup_wdt();
     6ce:	d9 df       	rcall	.-78     	; 0x682 <setup_wdt>
			break;
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <set_time_source+0x36>
		case CLOCK_NONE:
			shutdown_timer1();
     6d2:	d4 df       	rcall	.-88     	; 0x67c <shutdown_timer1>
			shutdown_wdt();
     6d4:	de df       	rcall	.-68     	; 0x692 <shutdown_wdt>
	}
	ATOMIC_END
     6d6:	78 94       	sei
	state.timesource = source;
     6d8:	ed ea       	ldi	r30, 0xAD	; 173
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	c3 70       	andi	r28, 0x03	; 3
     6de:	8c 2f       	mov	r24, r28
     6e0:	88 0f       	add	r24, r24
     6e2:	88 0f       	add	r24, r24
     6e4:	c0 81       	ld	r28, Z
     6e6:	c3 7f       	andi	r28, 0xF3	; 243
     6e8:	c8 2b       	or	r28, r24
     6ea:	c0 83       	st	Z, r28
}
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <setup_adc>:

void setup_adc() {
	PRR &= ~BIT(PRADC);
     6f0:	00 98       	cbi	0x00, 0	; 0
	ADCSRA |= BIT(ADEN);
     6f2:	37 9a       	sbi	0x06, 7	; 6
     6f4:	08 95       	ret

000006f6 <shutdown_adc>:
}

void shutdown_adc() {
	state.adc = ADC_STATE_IDLE;
     6f6:	ed ea       	ldi	r30, 0xAD	; 173
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8c 7f       	andi	r24, 0xFC	; 252
     6fe:	80 83       	st	Z, r24
	ADCSRA &= ~BIT(ADEN);
     700:	37 98       	cbi	0x06, 7	; 6
	PRR |= BIT(PRADC);
     702:	00 9a       	sbi	0x00, 0	; 0
     704:	08 95       	ret

00000706 <adc_start_measure>:
}

void adc_start_measure() {
	setup_adc();
     706:	f4 df       	rcall	.-24     	; 0x6f0 <setup_adc>
	state.adc = ADC_STATE_I;
     708:	ed ea       	ldi	r30, 0xAD	; 173
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	8c 7f       	andi	r24, 0xFC	; 252
     710:	81 60       	ori	r24, 0x01	; 1
     712:	80 83       	st	Z, r24
	adcs = 0;
     714:	10 92 9c 00 	sts	0x009C, r1
     718:	10 92 9b 00 	sts	0x009B, r1
	adc = 0;
     71c:	10 92 c2 00 	sts	0x00C2, r1
     720:	10 92 c1 00 	sts	0x00C1, r1
	// Setup ADC for differential measurement
	ADMUX = BIT(REFS1) | BIT(MUX3) | BIT(MUX0);
     724:	89 e8       	ldi	r24, 0x89	; 137
     726:	87 b9       	out	0x07, r24	; 7
	ADCSRA = BIT(ADEN) | BIT(ADIE);
     728:	88 e8       	ldi	r24, 0x88	; 136
     72a:	86 b9       	out	0x06, r24	; 6
	ADCSRB = BIT(BIN);
     72c:	80 e8       	ldi	r24, 0x80	; 128
     72e:	83 b9       	out	0x03, r24	; 3
     730:	08 95       	ret

00000732 <adc_process>:
	PROCESS_FLAG(flag, val, limit, hysteresis, 0)

#define PROCESS_FLAG_LOWER(flag, val, limit, hysteresis)\
	PROCESS_FLAG(flag, val, limit, hysteresis, 1)
	
uint8_t adc_process() {
     732:	2f 92       	push	r2
     734:	3f 92       	push	r3
     736:	4f 92       	push	r4
     738:	5f 92       	push	r5
     73a:	6f 92       	push	r6
     73c:	7f 92       	push	r7
     73e:	8f 92       	push	r8
     740:	9f 92       	push	r9
     742:	af 92       	push	r10
     744:	bf 92       	push	r11
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	2e 97       	sbiw	r28, 0x0e	; 14
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
	int64_t tmp;
	if(flags.adc_I) {
     766:	80 91 f0 00 	lds	r24, 0x00F0
     76a:	80 ff       	sbrs	r24, 0
     76c:	bd c1       	rjmp	.+890    	; 0xae8 <adc_process+0x3b6>
		flags.adc_I = 0;
     76e:	80 91 f0 00 	lds	r24, 0x00F0
     772:	8e 7f       	andi	r24, 0xFE	; 254
     774:	80 93 f0 00 	sts	0x00F0, r24
		if(flags.do_calibrate) {
     778:	80 91 f0 00 	lds	r24, 0x00F0
     77c:	83 ff       	sbrs	r24, 3
     77e:	17 c0       	rjmp	.+46     	; 0x7ae <adc_process+0x7c>
			adc_shunt_cal = adcs;
     780:	80 91 9b 00 	lds	r24, 0x009B
     784:	90 91 9c 00 	lds	r25, 0x009C
     788:	90 93 b0 00 	sts	0x00B0, r25
     78c:	80 93 af 00 	sts	0x00AF, r24
			REG16_WRITE(reg_cal, adcs);
     790:	80 91 9b 00 	lds	r24, 0x009B
     794:	90 91 9c 00 	lds	r25, 0x009C
     798:	80 93 88 00 	sts	0x0088, r24
     79c:	80 91 9b 00 	lds	r24, 0x009B
     7a0:	90 91 9c 00 	lds	r25, 0x009C
     7a4:	90 93 8b 00 	sts	0x008B, r25
			shutdown_adc();
     7a8:	a6 df       	rcall	.-180    	; 0x6f6 <shutdown_adc>
			return 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	58 c2       	rjmp	.+1200   	; 0xc5e <adc_process+0x52c>
		} else {
			tmp = adcs - adc_shunt_cal;
     7ae:	40 91 9b 00 	lds	r20, 0x009B
     7b2:	50 91 9c 00 	lds	r21, 0x009C
     7b6:	80 91 af 00 	lds	r24, 0x00AF
     7ba:	90 91 b0 00 	lds	r25, 0x00B0
     7be:	48 1b       	sub	r20, r24
     7c0:	59 0b       	sbc	r21, r25
     7c2:	95 2f       	mov	r25, r21
     7c4:	99 0f       	add	r25, r25
     7c6:	99 0b       	sbc	r25, r25
			tmp = (tmp * (int64_t)REF_VOLTAGE * 1000000LL) / current_div;
     7c8:	a1 2c       	mov	r10, r1
     7ca:	0f 2e       	mov	r0, r31
     7cc:	fb ea       	ldi	r31, 0xAB	; 171
     7ce:	bf 2e       	mov	r11, r31
     7d0:	f0 2d       	mov	r31, r0
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f0 e9       	ldi	r31, 0x90	; 144
     7d6:	cf 2e       	mov	r12, r31
     7d8:	f0 2d       	mov	r31, r0
     7da:	0f 2e       	mov	r0, r31
     7dc:	f1 e4       	ldi	r31, 0x41	; 65
     7de:	df 2e       	mov	r13, r31
     7e0:	f0 2d       	mov	r31, r0
     7e2:	e1 2c       	mov	r14, r1
     7e4:	f1 2c       	mov	r15, r1
     7e6:	00 e0       	ldi	r16, 0x00	; 0
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	24 2f       	mov	r18, r20
     7ec:	35 2f       	mov	r19, r21
     7ee:	49 2f       	mov	r20, r25
     7f0:	59 2f       	mov	r21, r25
     7f2:	69 2f       	mov	r22, r25
     7f4:	79 2f       	mov	r23, r25
     7f6:	89 2f       	mov	r24, r25
     7f8:	bf d6       	rcall	.+3454   	; 0x1578 <__muldi3>
     7fa:	b1 2c       	mov	r11, r1
     7fc:	0f 2e       	mov	r0, r31
     7fe:	f2 ee       	ldi	r31, 0xE2	; 226
     800:	cf 2e       	mov	r12, r31
     802:	f0 2d       	mov	r31, r0
     804:	68 94       	set
     806:	dd 24       	eor	r13, r13
     808:	d2 f8       	bld	r13, 2
     80a:	e6 d6       	rcall	.+3532   	; 0x15d8 <__divdi3>
     80c:	52 2e       	mov	r5, r18
     80e:	63 2e       	mov	r6, r19
     810:	74 2e       	mov	r7, r20
     812:	85 2e       	mov	r8, r21
     814:	96 2e       	mov	r9, r22
     816:	7e 87       	std	Y+14, r23	; 0x0e
     818:	8b 87       	std	Y+11, r24	; 0x0b
     81a:	49 2e       	mov	r4, r25
			current_uA = tmp;
     81c:	20 93 d5 00 	sts	0x00D5, r18
     820:	30 93 d6 00 	sts	0x00D6, r19
     824:	40 93 d7 00 	sts	0x00D7, r20
     828:	50 93 d8 00 	sts	0x00D8, r21
     82c:	60 93 d9 00 	sts	0x00D9, r22
     830:	70 93 da 00 	sts	0x00DA, r23
     834:	9b 85       	ldd	r25, Y+11	; 0x0b
     836:	90 93 db 00 	sts	0x00DB, r25
     83a:	40 92 dc 00 	sts	0x00DC, r4
			adcs = tmp / 10LL;
     83e:	0f 2e       	mov	r0, r31
     840:	fa e0       	ldi	r31, 0x0A	; 10
     842:	af 2e       	mov	r10, r31
     844:	f0 2d       	mov	r31, r0
     846:	c1 2c       	mov	r12, r1
     848:	d1 2c       	mov	r13, r1
     84a:	25 2d       	mov	r18, r5
     84c:	36 2d       	mov	r19, r6
     84e:	47 2d       	mov	r20, r7
     850:	58 2d       	mov	r21, r8
     852:	69 2d       	mov	r22, r9
     854:	89 2f       	mov	r24, r25
     856:	94 2d       	mov	r25, r4
     858:	bf d6       	rcall	.+3454   	; 0x15d8 <__divdi3>
     85a:	82 2f       	mov	r24, r18
     85c:	93 2f       	mov	r25, r19
     85e:	90 93 9c 00 	sts	0x009C, r25
     862:	80 93 9b 00 	sts	0x009B, r24
			REG16_WRITE(reg_I, adcs);
     866:	80 91 9b 00 	lds	r24, 0x009B
     86a:	90 91 9c 00 	lds	r25, 0x009C
     86e:	80 93 94 00 	sts	0x0094, r24
     872:	80 91 9b 00 	lds	r24, 0x009B
     876:	90 91 9c 00 	lds	r25, 0x009C
     87a:	90 93 97 00 	sts	0x0097, r25
			current_uA_avg = ((current_uA_avg * 900LL) + (current_uA * 100LL)) / 1000LL;
     87e:	a0 90 f1 00 	lds	r10, 0x00F1
     882:	b0 90 f2 00 	lds	r11, 0x00F2
     886:	c0 90 f3 00 	lds	r12, 0x00F3
     88a:	d0 90 f4 00 	lds	r13, 0x00F4
     88e:	e0 90 f5 00 	lds	r14, 0x00F5
     892:	f0 90 f6 00 	lds	r15, 0x00F6
     896:	e0 91 f7 00 	lds	r30, 0x00F7
     89a:	10 91 f8 00 	lds	r17, 0x00F8
     89e:	2a 2d       	mov	r18, r10
     8a0:	3b 2d       	mov	r19, r11
     8a2:	4c 2d       	mov	r20, r12
     8a4:	5d 2d       	mov	r21, r13
     8a6:	6e 2d       	mov	r22, r14
     8a8:	7f 2d       	mov	r23, r15
     8aa:	8e 2f       	mov	r24, r30
     8ac:	91 2f       	mov	r25, r17
     8ae:	04 e0       	ldi	r16, 0x04	; 4
     8b0:	4f d7       	rcall	.+3742   	; 0x1750 <__ashldi3>
     8b2:	0e 2f       	mov	r16, r30
     8b4:	99 d7       	rcall	.+3890   	; 0x17e8 <__subdi3>
     8b6:	a2 2e       	mov	r10, r18
     8b8:	b3 2e       	mov	r11, r19
     8ba:	c4 2e       	mov	r12, r20
     8bc:	d5 2e       	mov	r13, r21
     8be:	e6 2e       	mov	r14, r22
     8c0:	f7 2e       	mov	r15, r23
     8c2:	e8 2f       	mov	r30, r24
     8c4:	19 2f       	mov	r17, r25
     8c6:	04 e0       	ldi	r16, 0x04	; 4
     8c8:	43 d7       	rcall	.+3718   	; 0x1750 <__ashldi3>
     8ca:	0e 2f       	mov	r16, r30
     8cc:	8d d7       	rcall	.+3866   	; 0x17e8 <__subdi3>
     8ce:	02 e0       	ldi	r16, 0x02	; 2
     8d0:	3f d7       	rcall	.+3710   	; 0x1750 <__ashldi3>
     8d2:	2b 83       	std	Y+3, r18	; 0x03
     8d4:	3c 83       	std	Y+4, r19	; 0x04
     8d6:	4d 83       	std	Y+5, r20	; 0x05
     8d8:	5e 83       	std	Y+6, r21	; 0x06
     8da:	6f 83       	std	Y+7, r22	; 0x07
     8dc:	78 87       	std	Y+8, r23	; 0x08
     8de:	89 87       	std	Y+9, r24	; 0x09
     8e0:	9a 87       	std	Y+10, r25	; 0x0a
     8e2:	25 2d       	mov	r18, r5
     8e4:	36 2d       	mov	r19, r6
     8e6:	47 2d       	mov	r20, r7
     8e8:	58 2d       	mov	r21, r8
     8ea:	69 2d       	mov	r22, r9
     8ec:	7e 85       	ldd	r23, Y+14	; 0x0e
     8ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     8f0:	94 2d       	mov	r25, r4
     8f2:	2e d7       	rcall	.+3676   	; 0x1750 <__ashldi3>
     8f4:	a5 2c       	mov	r10, r5
     8f6:	b6 2c       	mov	r11, r6
     8f8:	c7 2c       	mov	r12, r7
     8fa:	d8 2c       	mov	r13, r8
     8fc:	e9 2c       	mov	r14, r9
     8fe:	fe 84       	ldd	r15, Y+14	; 0x0e
     900:	0b 85       	ldd	r16, Y+11	; 0x0b
     902:	14 2d       	mov	r17, r4
     904:	71 d7       	rcall	.+3810   	; 0x17e8 <__subdi3>
     906:	e2 2f       	mov	r30, r18
     908:	23 2e       	mov	r2, r19
     90a:	34 2e       	mov	r3, r20
     90c:	f5 2f       	mov	r31, r21
     90e:	b6 2f       	mov	r27, r22
     910:	a7 2f       	mov	r26, r23
     912:	8c 87       	std	Y+12, r24	; 0x0c
     914:	9d 87       	std	Y+13, r25	; 0x0d
     916:	05 e0       	ldi	r16, 0x05	; 5
     918:	1b d7       	rcall	.+3638   	; 0x1750 <__ashldi3>
     91a:	a2 2e       	mov	r10, r18
     91c:	b3 2e       	mov	r11, r19
     91e:	c4 2e       	mov	r12, r20
     920:	d5 2e       	mov	r13, r21
     922:	e6 2e       	mov	r14, r22
     924:	f7 2e       	mov	r15, r23
     926:	08 2f       	mov	r16, r24
     928:	19 2f       	mov	r17, r25
     92a:	2e 2f       	mov	r18, r30
     92c:	32 2d       	mov	r19, r2
     92e:	43 2d       	mov	r20, r3
     930:	5f 2f       	mov	r21, r31
     932:	6b 2f       	mov	r22, r27
     934:	7a 2f       	mov	r23, r26
     936:	8c 85       	ldd	r24, Y+12	; 0x0c
     938:	9d 85       	ldd	r25, Y+13	; 0x0d
     93a:	41 d7       	rcall	.+3714   	; 0x17be <__adddi3>
     93c:	a5 2c       	mov	r10, r5
     93e:	b6 2c       	mov	r11, r6
     940:	c7 2c       	mov	r12, r7
     942:	d8 2c       	mov	r13, r8
     944:	e9 2c       	mov	r14, r9
     946:	fe 84       	ldd	r15, Y+14	; 0x0e
     948:	0b 85       	ldd	r16, Y+11	; 0x0b
     94a:	14 2d       	mov	r17, r4
     94c:	38 d7       	rcall	.+3696   	; 0x17be <__adddi3>
     94e:	a2 2e       	mov	r10, r18
     950:	b3 2e       	mov	r11, r19
     952:	c4 2e       	mov	r12, r20
     954:	d5 2e       	mov	r13, r21
     956:	e6 2e       	mov	r14, r22
     958:	f7 2e       	mov	r15, r23
     95a:	08 2f       	mov	r16, r24
     95c:	19 2f       	mov	r17, r25
     95e:	2b 81       	ldd	r18, Y+3	; 0x03
     960:	3c 81       	ldd	r19, Y+4	; 0x04
     962:	4d 81       	ldd	r20, Y+5	; 0x05
     964:	5e 81       	ldd	r21, Y+6	; 0x06
     966:	6f 81       	ldd	r22, Y+7	; 0x07
     968:	78 85       	ldd	r23, Y+8	; 0x08
     96a:	89 85       	ldd	r24, Y+9	; 0x09
     96c:	9a 85       	ldd	r25, Y+10	; 0x0a
     96e:	27 d7       	rcall	.+3662   	; 0x17be <__adddi3>
     970:	0f 2e       	mov	r0, r31
     972:	f8 ee       	ldi	r31, 0xE8	; 232
     974:	af 2e       	mov	r10, r31
     976:	f0 2d       	mov	r31, r0
     978:	0f 2e       	mov	r0, r31
     97a:	f3 e0       	ldi	r31, 0x03	; 3
     97c:	bf 2e       	mov	r11, r31
     97e:	f0 2d       	mov	r31, r0
     980:	c1 2c       	mov	r12, r1
     982:	d1 2c       	mov	r13, r1
     984:	e1 2c       	mov	r14, r1
     986:	f1 2c       	mov	r15, r1
     988:	00 e0       	ldi	r16, 0x00	; 0
     98a:	10 e0       	ldi	r17, 0x00	; 0
     98c:	25 d6       	rcall	.+3146   	; 0x15d8 <__divdi3>
     98e:	20 93 f1 00 	sts	0x00F1, r18
     992:	30 93 f2 00 	sts	0x00F2, r19
     996:	40 93 f3 00 	sts	0x00F3, r20
     99a:	50 93 f4 00 	sts	0x00F4, r21
     99e:	60 93 f5 00 	sts	0x00F5, r22
     9a2:	70 93 f6 00 	sts	0x00F6, r23
     9a6:	80 93 f7 00 	sts	0x00F7, r24
     9aa:	90 93 f8 00 	sts	0x00F8, r25
			adcs = current_uA_avg / 10LL;
     9ae:	0f 2e       	mov	r0, r31
     9b0:	fa e0       	ldi	r31, 0x0A	; 10
     9b2:	af 2e       	mov	r10, r31
     9b4:	f0 2d       	mov	r31, r0
     9b6:	b1 2c       	mov	r11, r1
     9b8:	0f d6       	rcall	.+3102   	; 0x15d8 <__divdi3>
     9ba:	82 2f       	mov	r24, r18
     9bc:	93 2f       	mov	r25, r19
     9be:	90 93 9c 00 	sts	0x009C, r25
     9c2:	80 93 9b 00 	sts	0x009B, r24
			REG16_WRITE(reg_I_avg, adcs);
     9c6:	80 91 9b 00 	lds	r24, 0x009B
     9ca:	90 91 9c 00 	lds	r25, 0x009C
     9ce:	80 93 82 00 	sts	0x0082, r24
     9d2:	80 91 9b 00 	lds	r24, 0x009B
     9d6:	90 91 9c 00 	lds	r25, 0x009C
     9da:	90 93 85 00 	sts	0x0085, r25
			
			// Process current flags
			PROCESS_FLAG_UPPER(battery.charging, current_uA, EPSILON_CHARGE_UA, HYSTERESIS_CHARGE_UA);
     9de:	25 2d       	mov	r18, r5
     9e0:	36 2d       	mov	r19, r6
     9e2:	47 2d       	mov	r20, r7
     9e4:	58 2d       	mov	r21, r8
     9e6:	69 2d       	mov	r22, r9
     9e8:	7e 85       	ldd	r23, Y+14	; 0x0e
     9ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ec:	94 2d       	mov	r25, r4
     9ee:	24 31       	cpi	r18, 0x14	; 20
     9f0:	35 40       	sbci	r19, 0x05	; 5
     9f2:	41 05       	cpc	r20, r1
     9f4:	51 05       	cpc	r21, r1
     9f6:	61 05       	cpc	r22, r1
     9f8:	71 05       	cpc	r23, r1
     9fa:	81 05       	cpc	r24, r1
     9fc:	91 05       	cpc	r25, r1
     9fe:	39 f1       	breq	.+78     	; 0xa4e <adc_process+0x31c>
     a00:	34 f1       	brlt	.+76     	; 0xa4e <adc_process+0x31c>
     a02:	e0 91 ef 00 	lds	r30, 0x00EF
     a06:	e0 fd       	sbrc	r30, 0
     a08:	09 c1       	rjmp	.+530    	; 0xc1c <adc_process+0x4ea>
     a0a:	e2 ff       	sbrs	r30, 2
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <adc_process+0x2e6>
     a0e:	ef ee       	ldi	r30, 0xEF	; 239
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	83 70       	andi	r24, 0x03	; 3
     a16:	80 83       	st	Z, r24
     a18:	ef ee       	ldi	r30, 0xEF	; 239
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	82 60       	ori	r24, 0x02	; 2
     a20:	80 83       	st	Z, r24
     a22:	86 95       	lsr	r24
     a24:	86 95       	lsr	r24
     a26:	86 95       	lsr	r24
     a28:	28 2f       	mov	r18, r24
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	28 30       	cpi	r18, 0x08	; 8
     a2e:	31 05       	cpc	r19, r1
     a30:	24 f0       	brlt	.+8      	; 0xa3a <adc_process+0x308>
     a32:	80 81       	ld	r24, Z
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	80 83       	st	Z, r24
     a38:	0a c0       	rjmp	.+20     	; 0xa4e <adc_process+0x31c>
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	ef ee       	ldi	r30, 0xEF	; 239
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	88 0f       	add	r24, r24
     a42:	88 0f       	add	r24, r24
     a44:	88 0f       	add	r24, r24
     a46:	90 81       	ld	r25, Z
     a48:	97 70       	andi	r25, 0x07	; 7
     a4a:	89 2b       	or	r24, r25
     a4c:	80 83       	st	Z, r24
     a4e:	25 2d       	mov	r18, r5
     a50:	36 2d       	mov	r19, r6
     a52:	47 2d       	mov	r20, r7
     a54:	58 2d       	mov	r21, r8
     a56:	69 2d       	mov	r22, r9
     a58:	7e 85       	ldd	r23, Y+14	; 0x0e
     a5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a5c:	94 2d       	mov	r25, r4
     a5e:	24 5d       	subi	r18, 0xD4	; 212
     a60:	3e 4f       	sbci	r19, 0xFE	; 254
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	6f 4f       	sbci	r22, 0xFF	; 255
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	8f 4f       	sbci	r24, 0xFF	; 255
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
     a6e:	27 3e       	cpi	r18, 0xE7	; 231
     a70:	33 40       	sbci	r19, 0x03	; 3
     a72:	41 05       	cpc	r20, r1
     a74:	51 05       	cpc	r21, r1
     a76:	61 05       	cpc	r22, r1
     a78:	71 05       	cpc	r23, r1
     a7a:	81 05       	cpc	r24, r1
     a7c:	91 05       	cpc	r25, r1
     a7e:	09 f0       	breq	.+2      	; 0xa82 <adc_process+0x350>
     a80:	34 f5       	brge	.+76     	; 0xace <adc_process+0x39c>
     a82:	e0 91 ef 00 	lds	r30, 0x00EF
     a86:	e0 ff       	sbrs	r30, 0
     a88:	22 c0       	rjmp	.+68     	; 0xace <adc_process+0x39c>
     a8a:	e1 ff       	sbrs	r30, 1
     a8c:	05 c0       	rjmp	.+10     	; 0xa98 <adc_process+0x366>
     a8e:	ef ee       	ldi	r30, 0xEF	; 239
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	85 70       	andi	r24, 0x05	; 5
     a96:	80 83       	st	Z, r24
     a98:	ef ee       	ldi	r30, 0xEF	; 239
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	84 60       	ori	r24, 0x04	; 4
     aa0:	80 83       	st	Z, r24
     aa2:	86 95       	lsr	r24
     aa4:	86 95       	lsr	r24
     aa6:	86 95       	lsr	r24
     aa8:	28 2f       	mov	r18, r24
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	28 30       	cpi	r18, 0x08	; 8
     aae:	31 05       	cpc	r19, r1
     ab0:	24 f0       	brlt	.+8      	; 0xaba <adc_process+0x388>
     ab2:	80 81       	ld	r24, Z
     ab4:	8e 7f       	andi	r24, 0xFE	; 254
     ab6:	80 83       	st	Z, r24
     ab8:	0a c0       	rjmp	.+20     	; 0xace <adc_process+0x39c>
     aba:	8f 5f       	subi	r24, 0xFF	; 255
     abc:	ef ee       	ldi	r30, 0xEF	; 239
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	88 0f       	add	r24, r24
     ac2:	88 0f       	add	r24, r24
     ac4:	88 0f       	add	r24, r24
     ac6:	90 81       	ld	r25, Z
     ac8:	97 70       	andi	r25, 0x07	; 7
     aca:	89 2b       	or	r24, r25
     acc:	80 83       	st	Z, r24
		}
		adcs = 0;
     ace:	10 92 9c 00 	sts	0x009C, r1
     ad2:	10 92 9b 00 	sts	0x009B, r1
		state.adc = ADC_STATE_U;
     ad6:	ed ea       	ldi	r30, 0xAD	; 173
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	8c 7f       	andi	r24, 0xFC	; 252
     ade:	82 60       	ori	r24, 0x02	; 2
     ae0:	80 83       	st	Z, r24
		ADMUX  = BIT(MUX5) | BIT(MUX0);
     ae2:	81 e2       	ldi	r24, 0x21	; 33
     ae4:	87 b9       	out	0x07, r24	; 7
		ADCSRB = 0;
     ae6:	13 b8       	out	0x03, r1	; 3
	}
	if(flags.adc_U) {
     ae8:	80 91 f0 00 	lds	r24, 0x00F0
     aec:	81 ff       	sbrs	r24, 1
     aee:	94 c0       	rjmp	.+296    	; 0xc18 <adc_process+0x4e6>
		flags.adc_U = 0;
     af0:	80 91 f0 00 	lds	r24, 0x00F0
     af4:	8d 7f       	andi	r24, 0xFD	; 253
     af6:	80 93 f0 00 	sts	0x00F0, r24
		// Calculate voltage
		tmp = adc;
     afa:	80 91 c1 00 	lds	r24, 0x00C1
     afe:	90 91 c2 00 	lds	r25, 0x00C2
		tmp = REF_VOLTAGE * 1024UL * ADC_SAMPLES / tmp;
     b02:	8c 01       	movw	r16, r24
     b04:	a8 2e       	mov	r10, r24
     b06:	b1 2e       	mov	r11, r17
     b08:	c1 2c       	mov	r12, r1
     b0a:	d1 2c       	mov	r13, r1
     b0c:	e1 2c       	mov	r14, r1
     b0e:	f1 2c       	mov	r15, r1
     b10:	00 e0       	ldi	r16, 0x00	; 0
     b12:	10 e0       	ldi	r17, 0x00	; 0
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	46 e2       	ldi	r20, 0x26	; 38
     b1a:	52 e0       	ldi	r21, 0x02	; 2
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	84 d5       	rcall	.+2824   	; 0x162e <__udivdi3>
     b26:	02 2f       	mov	r16, r18
     b28:	13 2f       	mov	r17, r19
		voltage_mV = tmp;
     b2a:	10 93 9a 00 	sts	0x009A, r17
     b2e:	00 93 99 00 	sts	0x0099, r16
		adc = tmp;
     b32:	10 93 c2 00 	sts	0x00C2, r17
     b36:	00 93 c1 00 	sts	0x00C1, r16
		reg_U_h.data = (adc >> 8) & 0xFF;
     b3a:	80 91 c1 00 	lds	r24, 0x00C1
     b3e:	90 91 c2 00 	lds	r25, 0x00C2
     b42:	90 93 91 00 	sts	0x0091, r25
		reg_U_l.data = adc & 0xFF;
     b46:	80 91 c1 00 	lds	r24, 0x00C1
     b4a:	90 91 c2 00 	lds	r25, 0x00C2
     b4e:	80 93 8e 00 	sts	0x008E, r24
		adc = 0;
     b52:	10 92 c2 00 	sts	0x00C2, r1
     b56:	10 92 c1 00 	sts	0x00C1, r1

		// Process voltage flags
		PROCESS_FLAG_LOWER(battery.undervoltage, voltage_mV, BATTERY_MIN_VOLTAG_MV, HYSTERESIS_CHARGE_MV);
     b5a:	c8 01       	movw	r24, r16
     b5c:	01 2e       	mov	r0, r17
     b5e:	00 0c       	add	r0, r0
     b60:	aa 0b       	sbc	r26, r26
     b62:	bb 0b       	sbc	r27, r27
     b64:	c2 96       	adiw	r24, 0x32	; 50
     b66:	a1 1d       	adc	r26, r1
     b68:	b1 1d       	adc	r27, r1
     b6a:	84 35       	cpi	r24, 0x54	; 84
     b6c:	9b 40       	sbci	r25, 0x0B	; 11
     b6e:	a1 05       	cpc	r26, r1
     b70:	b1 05       	cpc	r27, r1
     b72:	30 f5       	brcc	.+76     	; 0xbc0 <adc_process+0x48e>
     b74:	80 91 ee 00 	lds	r24, 0x00EE
     b78:	80 fd       	sbrc	r24, 0
     b7a:	6c c0       	rjmp	.+216    	; 0xc54 <adc_process+0x522>
     b7c:	82 ff       	sbrs	r24, 2
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <adc_process+0x456>
     b80:	ee ee       	ldi	r30, 0xEE	; 238
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	83 70       	andi	r24, 0x03	; 3
     b86:	80 83       	st	Z, r24
     b88:	ee ee       	ldi	r30, 0xEE	; 238
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	80 83       	st	Z, r24
     b92:	86 95       	lsr	r24
     b94:	86 95       	lsr	r24
     b96:	86 95       	lsr	r24
     b98:	e8 2f       	mov	r30, r24
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	38 97       	sbiw	r30, 0x08	; 8
     b9e:	34 f0       	brlt	.+12     	; 0xbac <adc_process+0x47a>
     ba0:	ee ee       	ldi	r30, 0xEE	; 238
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	80 83       	st	Z, r24
     baa:	0a c0       	rjmp	.+20     	; 0xbc0 <adc_process+0x48e>
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	ee ee       	ldi	r30, 0xEE	; 238
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	88 0f       	add	r24, r24
     bb4:	88 0f       	add	r24, r24
     bb6:	88 0f       	add	r24, r24
     bb8:	90 81       	ld	r25, Z
     bba:	97 70       	andi	r25, 0x07	; 7
     bbc:	89 2b       	or	r24, r25
     bbe:	80 83       	st	Z, r24
     bc0:	07 38       	cpi	r16, 0x87	; 135
     bc2:	1b 40       	sbci	r17, 0x0B	; 11
     bc4:	30 f1       	brcs	.+76     	; 0xc12 <adc_process+0x4e0>
     bc6:	80 91 ee 00 	lds	r24, 0x00EE
     bca:	80 ff       	sbrs	r24, 0
     bcc:	22 c0       	rjmp	.+68     	; 0xc12 <adc_process+0x4e0>
     bce:	81 ff       	sbrs	r24, 1
     bd0:	05 c0       	rjmp	.+10     	; 0xbdc <adc_process+0x4aa>
     bd2:	ee ee       	ldi	r30, 0xEE	; 238
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	85 70       	andi	r24, 0x05	; 5
     bda:	80 83       	st	Z, r24
     bdc:	ee ee       	ldi	r30, 0xEE	; 238
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	84 60       	ori	r24, 0x04	; 4
     be4:	80 83       	st	Z, r24
     be6:	86 95       	lsr	r24
     be8:	86 95       	lsr	r24
     bea:	86 95       	lsr	r24
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	28 30       	cpi	r18, 0x08	; 8
     bf2:	31 05       	cpc	r19, r1
     bf4:	24 f0       	brlt	.+8      	; 0xbfe <adc_process+0x4cc>
     bf6:	80 81       	ld	r24, Z
     bf8:	8e 7f       	andi	r24, 0xFE	; 254
     bfa:	80 83       	st	Z, r24
     bfc:	0a c0       	rjmp	.+20     	; 0xc12 <adc_process+0x4e0>
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	ee ee       	ldi	r30, 0xEE	; 238
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	88 0f       	add	r24, r24
     c06:	88 0f       	add	r24, r24
     c08:	88 0f       	add	r24, r24
     c0a:	90 81       	ld	r25, Z
     c0c:	97 70       	andi	r25, 0x07	; 7
     c0e:	89 2b       	or	r24, r25
     c10:	80 83       	st	Z, r24

		shutdown_adc();
     c12:	71 dd       	rcall	.-1310   	; 0x6f6 <shutdown_adc>
	}
	return 0;
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	23 c0       	rjmp	.+70     	; 0xc5e <adc_process+0x52c>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	21 c0       	rjmp	.+66     	; 0xc5e <adc_process+0x52c>
			current_uA_avg = ((current_uA_avg * 900LL) + (current_uA * 100LL)) / 1000LL;
			adcs = current_uA_avg / 10LL;
			REG16_WRITE(reg_I_avg, adcs);
			
			// Process current flags
			PROCESS_FLAG_UPPER(battery.charging, current_uA, EPSILON_CHARGE_UA, HYSTERESIS_CHARGE_UA);
     c1c:	25 2d       	mov	r18, r5
     c1e:	36 2d       	mov	r19, r6
     c20:	47 2d       	mov	r20, r7
     c22:	58 2d       	mov	r21, r8
     c24:	69 2d       	mov	r22, r9
     c26:	7e 85       	ldd	r23, Y+14	; 0x0e
     c28:	8b 85       	ldd	r24, Y+11	; 0x0b
     c2a:	94 2d       	mov	r25, r4
     c2c:	24 5d       	subi	r18, 0xD4	; 212
     c2e:	3e 4f       	sbci	r19, 0xFE	; 254
     c30:	4f 4f       	sbci	r20, 0xFF	; 255
     c32:	5f 4f       	sbci	r21, 0xFF	; 255
     c34:	6f 4f       	sbci	r22, 0xFF	; 255
     c36:	7f 4f       	sbci	r23, 0xFF	; 255
     c38:	8f 4f       	sbci	r24, 0xFF	; 255
     c3a:	9f 4f       	sbci	r25, 0xFF	; 255
     c3c:	27 3e       	cpi	r18, 0xE7	; 231
     c3e:	33 40       	sbci	r19, 0x03	; 3
     c40:	41 05       	cpc	r20, r1
     c42:	51 05       	cpc	r21, r1
     c44:	61 05       	cpc	r22, r1
     c46:	71 05       	cpc	r23, r1
     c48:	81 05       	cpc	r24, r1
     c4a:	91 05       	cpc	r25, r1
     c4c:	09 f0       	breq	.+2      	; 0xc50 <adc_process+0x51e>
     c4e:	0c f4       	brge	.+2      	; 0xc52 <adc_process+0x520>
     c50:	1c cf       	rjmp	.-456    	; 0xa8a <adc_process+0x358>
     c52:	3d cf       	rjmp	.-390    	; 0xace <adc_process+0x39c>
		reg_U_h.data = (adc >> 8) & 0xFF;
		reg_U_l.data = adc & 0xFF;
		adc = 0;

		// Process voltage flags
		PROCESS_FLAG_LOWER(battery.undervoltage, voltage_mV, BATTERY_MIN_VOLTAG_MV, HYSTERESIS_CHARGE_MV);
     c54:	07 38       	cpi	r16, 0x87	; 135
     c56:	1b 40       	sbci	r17, 0x0B	; 11
     c58:	08 f0       	brcs	.+2      	; 0xc5c <adc_process+0x52a>
     c5a:	b9 cf       	rjmp	.-142    	; 0xbce <adc_process+0x49c>
     c5c:	da cf       	rjmp	.-76     	; 0xc12 <adc_process+0x4e0>

		shutdown_adc();
	}
	return 0;
}
     c5e:	2e 96       	adiw	r28, 0x0e	; 14
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	cf 90       	pop	r12
     c7a:	bf 90       	pop	r11
     c7c:	af 90       	pop	r10
     c7e:	9f 90       	pop	r9
     c80:	8f 90       	pop	r8
     c82:	7f 90       	pop	r7
     c84:	6f 90       	pop	r6
     c86:	5f 90       	pop	r5
     c88:	4f 90       	pop	r4
     c8a:	3f 90       	pop	r3
     c8c:	2f 90       	pop	r2
     c8e:	08 95       	ret

00000c90 <digital_io_process>:
#define POWER_REQUEST_PENDING (state.power_request_state == POWER_REQUEST_MEASURE)
#define CHARGER_DETECTED (state.charger_detect)

struct timeval_t power_request_timeout;

void digital_io_process(struct timeval_t* time) {
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ec 01       	movw	r28, r24
	state.charger_detect = !!(CHARGE_SENSE_PINR & BIT(CHARGE_SENSE_PIN));
     c9a:	96 b3       	in	r25, 0x16	; 22
     c9c:	92 fb       	bst	r25, 2
     c9e:	99 27       	eor	r25, r25
     ca0:	90 f9       	bld	r25, 0
     ca2:	ed ea       	ldi	r30, 0xAD	; 173
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	90 fb       	bst	r25, 0
     caa:	86 f9       	bld	r24, 6
     cac:	80 83       	st	Z, r24
	state.power_requested = ((~POWER_REQUEST_PINR) & BIT(POWER_REQUEST_PIN)) >> POWER_REQUEST_PIN;
     cae:	29 b3       	in	r18, 0x19	; 25
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	20 95       	com	r18
     cb4:	30 95       	com	r19
     cb6:	23 fb       	bst	r18, 3
     cb8:	22 27       	eor	r18, r18
     cba:	20 f9       	bld	r18, 0
     cbc:	ee ea       	ldi	r30, 0xAE	; 174
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	20 fb       	bst	r18, 0
     cc4:	80 f9       	bld	r24, 0
     cc6:	80 83       	st	Z, r24
		
	ATOMIC_BEGIN
     cc8:	f8 94       	cli
	if(flags.power_request) {
     cca:	80 91 f0 00 	lds	r24, 0x00F0
     cce:	82 ff       	sbrs	r24, 2
     cd0:	2e c0       	rjmp	.+92     	; 0xd2e <digital_io_process+0x9e>
		if(!POWER_REQUEST_PENDING) {
     cd2:	80 91 ad 00 	lds	r24, 0x00AD
     cd6:	88 23       	and	r24, r24
     cd8:	bc f0       	brlt	.+46     	; 0xd08 <digital_io_process+0x78>
			state.power_request_state = POWER_REQUEST_MEASURE;
     cda:	ed ea       	ldi	r30, 0xAD	; 173
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 68       	ori	r24, 0x80	; 128
     ce0:	80 83       	st	Z, r24
			power_request_timeout = *time;
     ce2:	80 e1       	ldi	r24, 0x10	; 16
     ce4:	fe 01       	movw	r30, r28
     ce6:	a1 eb       	ldi	r26, 0xB1	; 177
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	01 90       	ld	r0, Z+
     cec:	0d 92       	st	X+, r0
     cee:	8a 95       	dec	r24
     cf0:	e1 f7       	brne	.-8      	; 0xcea <digital_io_process+0x5a>
			timeval_add_nsec(&power_request_timeout, POWER_REQUEST_TIMEOUT_NS);
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	10 e1       	ldi	r17, 0x10	; 16
     cf6:	2e e5       	ldi	r18, 0x5E	; 94
     cf8:	3f e5       	ldi	r19, 0x5F	; 95
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	81 eb       	ldi	r24, 0xB1	; 177
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	c7 d9       	rcall	.-3186   	; 0x96 <timeval_add_nsec>
		}
		power_request_debounce = *time;
     d08:	80 e1       	ldi	r24, 0x10	; 16
     d0a:	fe 01       	movw	r30, r28
     d0c:	ad e9       	ldi	r26, 0x9D	; 157
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	01 90       	ld	r0, Z+
     d12:	0d 92       	st	X+, r0
     d14:	8a 95       	dec	r24
     d16:	e1 f7       	brne	.-8      	; 0xd10 <digital_io_process+0x80>
		timeval_add_nsec(&power_request_debounce, DEBOUNCE_NS);
     d18:	00 e8       	ldi	r16, 0x80	; 128
     d1a:	16 e9       	ldi	r17, 0x96	; 150
     d1c:	28 e9       	ldi	r18, 0x98	; 152
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	8d e9       	ldi	r24, 0x9D	; 157
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	b4 d9       	rcall	.-3224   	; 0x96 <timeval_add_nsec>
	}
	flags.power_request = 0;
     d2e:	80 91 f0 00 	lds	r24, 0x00F0
     d32:	8b 7f       	andi	r24, 0xFB	; 251
     d34:	80 93 f0 00 	sts	0x00F0, r24
	ATOMIC_END
     d38:	78 94       	sei

	if(!state.power_requested) {
     d3a:	80 91 ae 00 	lds	r24, 0x00AE
     d3e:	80 fd       	sbrc	r24, 0
     d40:	0c c0       	rjmp	.+24     	; 0xd5a <digital_io_process+0xca>
		if(timecmp(time, &power_request_debounce) != LT) {
     d42:	6d e9       	ldi	r22, 0x9D	; 157
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	ce 01       	movw	r24, r28
     d48:	91 da       	rcall	.-2782   	; 0x26c <timecmp>
     d4a:	8f 3f       	cpi	r24, 0xFF	; 255
     d4c:	31 f0       	breq	.+12     	; 0xd5a <digital_io_process+0xca>
			state.power_request_state = POWER_REQUEST_IDLE;
     d4e:	ed ea       	ldi	r30, 0xAD	; 173
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 77       	andi	r24, 0x7F	; 127
     d56:	80 83       	st	Z, r24
			output_off();
     d58:	8c d9       	rcall	.-3304   	; 0x72 <output_off>
		}
	}
	
	if(CHARGER_DETECTED) {
     d5a:	80 91 ad 00 	lds	r24, 0x00AD
     d5e:	86 fd       	sbrc	r24, 6
		POWER_REQUEST_PORT |= BIT(POWER_REQUEST_PIN);		
     d60:	db 9a       	sbi	0x1b, 3	; 27
	}
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <battery_process>:
	uint8_t undervoltage:2;
} last_bat_state = {
	.undervoltage = 3,
};

void battery_process() {
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
	if(GET_FLAG(battery.undervoltage) && !CHARGER_DETECTED) {
     d70:	80 91 ee 00 	lds	r24, 0x00EE
     d74:	80 ff       	sbrs	r24, 0
     d76:	26 c0       	rjmp	.+76     	; 0xdc4 <battery_process+0x58>
     d78:	80 91 ad 00 	lds	r24, 0x00AD
     d7c:	86 fd       	sbrc	r24, 6
     d7e:	17 c0       	rjmp	.+46     	; 0xdae <battery_process+0x42>
		POWER_REQUEST_PORT &= ~BIT(POWER_REQUEST_PIN);
     d80:	db 98       	cbi	0x1b, 3	; 27
		output_off();
     d82:	77 d9       	rcall	.-3346   	; 0x72 <output_off>
	}
	
	if(GET_FLAG(battery.undervoltage) != last_bat_state.undervoltage) {
     d84:	80 91 ee 00 	lds	r24, 0x00EE
     d88:	81 70       	andi	r24, 0x01	; 1
     d8a:	c8 2f       	mov	r28, r24
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	d8 2f       	mov	r29, r24
     d90:	80 91 60 00 	lds	r24, 0x0060
     d94:	83 70       	andi	r24, 0x03	; 3
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	c8 17       	cp	r28, r24
     d9a:	d9 07       	cpc	r29, r25
     d9c:	41 f0       	breq	.+16     	; 0xdae <battery_process+0x42>
		if(!GET_FLAG(battery.undervoltage) && state.power_requested) {
     d9e:	80 91 ee 00 	lds	r24, 0x00EE
     da2:	80 fd       	sbrc	r24, 0
     da4:	04 c0       	rjmp	.+8      	; 0xdae <battery_process+0x42>
     da6:	80 91 ae 00 	lds	r24, 0x00AE
     daa:	80 fd       	sbrc	r24, 0
			output_on();
     dac:	56 d9       	rcall	.-3412   	; 0x5a <output_on>
		}
	}
	last_bat_state.undervoltage = GET_FLAG(battery.undervoltage);
     dae:	80 91 ee 00 	lds	r24, 0x00EE
     db2:	98 2f       	mov	r25, r24
     db4:	91 70       	andi	r25, 0x01	; 1
     db6:	80 91 60 00 	lds	r24, 0x0060
     dba:	8c 7f       	andi	r24, 0xFC	; 252
     dbc:	89 2b       	or	r24, r25
     dbe:	80 93 60 00 	sts	0x0060, r24
     dc2:	0d c0       	rjmp	.+26     	; 0xdde <battery_process+0x72>
	if(GET_FLAG(battery.undervoltage) && !CHARGER_DETECTED) {
		POWER_REQUEST_PORT &= ~BIT(POWER_REQUEST_PIN);
		output_off();
	}
	
	if(GET_FLAG(battery.undervoltage) != last_bat_state.undervoltage) {
     dc4:	80 91 ee 00 	lds	r24, 0x00EE
     dc8:	28 2f       	mov	r18, r24
     dca:	21 70       	andi	r18, 0x01	; 1
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	80 91 60 00 	lds	r24, 0x0060
     dd2:	83 70       	andi	r24, 0x03	; 3
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	28 17       	cp	r18, r24
     dd8:	39 07       	cpc	r19, r25
     dda:	29 f7       	brne	.-54     	; 0xda6 <battery_process+0x3a>
     ddc:	e8 cf       	rjmp	.-48     	; 0xdae <battery_process+0x42>
		if(!GET_FLAG(battery.undervoltage) && state.power_requested) {
			output_on();
		}
	}
	last_bat_state.undervoltage = GET_FLAG(battery.undervoltage);
}
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <main>:
#define REG_OUTPUT_ON (reg_flags.data & 1)

struct timeval_t power_request_timeout;

int main(void)
{
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	a0 97       	sbiw	r28, 0x20	; 32
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	
	struct timeval_t next_measure;
	next_measure.nsecs = 0;
     df8:	19 86       	std	Y+9, r1	; 0x09
     dfa:	1a 86       	std	Y+10, r1	; 0x0a
     dfc:	1b 86       	std	Y+11, r1	; 0x0b
     dfe:	1c 86       	std	Y+12, r1	; 0x0c
     e00:	1d 86       	std	Y+13, r1	; 0x0d
     e02:	1e 86       	std	Y+14, r1	; 0x0e
     e04:	1f 86       	std	Y+15, r1	; 0x0f
     e06:	18 8a       	std	Y+16, r1	; 0x10
	next_measure.secs = 0;
     e08:	19 82       	std	Y+1, r1	; 0x01
     e0a:	1a 82       	std	Y+2, r1	; 0x02
     e0c:	1b 82       	std	Y+3, r1	; 0x03
     e0e:	1c 82       	std	Y+4, r1	; 0x04
     e10:	1d 82       	std	Y+5, r1	; 0x05
     e12:	1e 82       	std	Y+6, r1	; 0x06
     e14:	1f 82       	std	Y+7, r1	; 0x07
     e16:	18 86       	std	Y+8, r1	; 0x08

	past.nsecs = 0;
     e18:	ed ed       	ldi	r30, 0xDD	; 221
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	10 86       	std	Z+8, r1	; 0x08
     e1e:	11 86       	std	Z+9, r1	; 0x09
     e20:	12 86       	std	Z+10, r1	; 0x0a
     e22:	13 86       	std	Z+11, r1	; 0x0b
     e24:	14 86       	std	Z+12, r1	; 0x0c
     e26:	15 86       	std	Z+13, r1	; 0x0d
     e28:	16 86       	std	Z+14, r1	; 0x0e
     e2a:	17 86       	std	Z+15, r1	; 0x0f
	past.secs = 0;
     e2c:	10 82       	st	Z, r1
     e2e:	11 82       	std	Z+1, r1	; 0x01
     e30:	12 82       	std	Z+2, r1	; 0x02
     e32:	13 82       	std	Z+3, r1	; 0x03
     e34:	14 82       	std	Z+4, r1	; 0x04
     e36:	15 82       	std	Z+5, r1	; 0x05
     e38:	16 82       	std	Z+6, r1	; 0x06
     e3a:	17 82       	std	Z+7, r1	; 0x07
	
	memset((void*)&flags, 0, sizeof(flags));
     e3c:	10 92 f0 00 	sts	0x00F0, r1

	memset(&battery, 0, sizeof(battery));
     e40:	10 92 ed 00 	sts	0x00ED, r1
     e44:	10 92 ee 00 	sts	0x00EE, r1
     e48:	10 92 ef 00 	sts	0x00EF, r1

	memset(&state, 0, sizeof(state));
     e4c:	10 92 ae 00 	sts	0x00AE, r1
     e50:	10 92 ad 00 	sts	0x00AD, r1
		
	// Disable input buffer on ADC pins
	DIDR0 = BIT(ADC2D) | BIT(ADC1D);
     e54:	86 e0       	ldi	r24, 0x06	; 6
     e56:	81 b9       	out	0x01, r24	; 1
	
	// Enable power switch IO
	OUTPUT_DDR |= BIT(OUTPUT_PIN);
     e58:	d7 9a       	sbi	0x1a, 7	; 26
	
	// Enable pullup on power request input
	POWER_REQUEST_PORT |= BIT(POWER_REQUEST_PIN);
     e5a:	db 9a       	sbi	0x1b, 3	; 27
	
	// Enable pin change interrupt on charger sense pin
	CHARGE_SENSE_PCREG |= BIT(CHARGE_SENSE_PCBIT);
     e5c:	93 9a       	sbi	0x12, 3	; 18
	GIMSK |= BIT(CHARGE_SENSE_PCIE);
     e5e:	8b b7       	in	r24, 0x3b	; 59
     e60:	80 61       	ori	r24, 0x10	; 16
     e62:	8b bf       	out	0x3b, r24	; 59

	// Enable pin change interrupt on power request pin
	POWER_REQUEST_PCREG |= BIT(POWER_REQUEST_PCBIT);
     e64:	80 b5       	in	r24, 0x20	; 32
     e66:	84 60       	ori	r24, 0x04	; 4
     e68:	80 bd       	out	0x20, r24	; 32
	GIMSK |= BIT(POWER_REQUEST_PCIE);
     e6a:	8b b7       	in	r24, 0x3b	; 59
     e6c:	80 62       	ori	r24, 0x20	; 32
     e6e:	8b bf       	out	0x3b, r24	; 59

	// Disable Timer 0 via PRR
	PRR = BIT(PRTIM0);
     e70:	84 e0       	ldi	r24, 0x04	; 4
     e72:	80 b9       	out	0x00, r24	; 0
     e74:	e1 e6       	ldi	r30, 0x61	; 97
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	87 e7       	ldi	r24, 0x77	; 119
     e7a:	90 e0       	ldi	r25, 0x00	; 0

	for(i = 0; i < sizeof(regs) / sizeof(*regs); i++) {
		memset(regs[i], 0, sizeof(struct USI_I2C_Reg));
     e7c:	a1 91       	ld	r26, Z+
     e7e:	b1 91       	ld	r27, Z+
     e80:	1d 92       	st	X+, r1
     e82:	1d 92       	st	X+, r1
     e84:	1c 92       	st	X, r1
	GIMSK |= BIT(POWER_REQUEST_PCIE);

	// Disable Timer 0 via PRR
	PRR = BIT(PRTIM0);

	for(i = 0; i < sizeof(regs) / sizeof(*regs); i++) {
     e86:	e8 17       	cp	r30, r24
     e88:	f9 07       	cpc	r31, r25
     e8a:	c1 f7       	brne	.-16     	; 0xe7c <main+0x98>
		memset(regs[i], 0, sizeof(struct USI_I2C_Reg));
	}
	USI_I2C_Init(0x42, regs, sizeof(regs) / sizeof(*regs));
     e8c:	4b e0       	ldi	r20, 0x0B	; 11
     e8e:	61 e6       	ldi	r22, 0x61	; 97
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	82 e4       	ldi	r24, 0x42	; 66
     e94:	f0 d1       	rcall	.+992    	; 0x1276 <USI_I2C_Init>

	sei();
     e96:	78 94       	sei
	
	// Debugging
	DEBUG_INIT(PB0);
     e98:	b8 9a       	sbi	0x17, 0	; 23
	DEBUG_INIT(PB1);
     e9a:	b9 9a       	sbi	0x17, 1	; 23
	
	// Run calibration
	flags.do_calibrate = 1;
     e9c:	80 91 f0 00 	lds	r24, 0x00F0
     ea0:	88 60       	ori	r24, 0x08	; 8
     ea2:	80 93 f0 00 	sts	0x00F0, r24
	output_off();
     ea6:	e5 d8       	rcall	.-3638   	; 0x72 <output_off>
	set_time_source(CLOCK_WDT);
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	fa db       	rcall	.-2060   	; 0x6a0 <set_time_source>
	adc_start_measure();
     eac:	2c dc       	rcall	.-1960   	; 0x706 <adc_start_measure>
	while (flags.do_calibrate) {
     eae:	80 91 f0 00 	lds	r24, 0x00F0
     eb2:	83 ff       	sbrs	r24, 3
     eb4:	18 c0       	rjmp	.+48     	; 0xee6 <main+0x102>
		set_sleep_mode(SLEEP_MODE_ADC);
		sleep_enable();
		sleep_cpu();
		flags.do_calibrate = !adc_process();
     eb6:	11 e0       	ldi	r17, 0x01	; 1
     eb8:	f1 2c       	mov	r15, r1
	flags.do_calibrate = 1;
	output_off();
	set_time_source(CLOCK_WDT);
	adc_start_measure();
	while (flags.do_calibrate) {
		set_sleep_mode(SLEEP_MODE_ADC);
     eba:	85 b7       	in	r24, 0x35	; 53
     ebc:	87 7e       	andi	r24, 0xE7	; 231
     ebe:	88 60       	ori	r24, 0x08	; 8
     ec0:	85 bf       	out	0x35, r24	; 53
		sleep_enable();
     ec2:	85 b7       	in	r24, 0x35	; 53
     ec4:	80 62       	ori	r24, 0x20	; 32
     ec6:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
     ec8:	88 95       	sleep
		flags.do_calibrate = !adc_process();
     eca:	33 dc       	rcall	.-1946   	; 0x732 <adc_process>
     ecc:	91 2f       	mov	r25, r17
     ece:	81 11       	cpse	r24, r1
     ed0:	9f 2d       	mov	r25, r15
     ed2:	80 91 f0 00 	lds	r24, 0x00F0
     ed6:	90 fb       	bst	r25, 0
     ed8:	83 f9       	bld	r24, 3
     eda:	80 93 f0 00 	sts	0x00F0, r24
	// Run calibration
	flags.do_calibrate = 1;
	output_off();
	set_time_source(CLOCK_WDT);
	adc_start_measure();
	while (flags.do_calibrate) {
     ede:	80 91 f0 00 	lds	r24, 0x00F0
     ee2:	83 fd       	sbrc	r24, 3
     ee4:	ea cf       	rjmp	.-44     	; 0xeba <main+0xd6>
		sleep_cpu();
		flags.do_calibrate = !adc_process();
	}

	// Process digital inputs
	digital_io_process(&past);
     ee6:	8d ed       	ldi	r24, 0xDD	; 221
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	d2 de       	rcall	.-604    	; 0xc90 <digital_io_process>

	// Battery status processing
	battery_process();
     eec:	3f df       	rcall	.-386    	; 0xd6c <battery_process>
		struct timeval_t time;
		// Actions
		now(&time);
		
		// Update uptime
		REG16_WRITE(reg_uptime, time.secs);
     eee:	0f 2e       	mov	r0, r31
     ef0:	fa e7       	ldi	r31, 0x7A	; 122
     ef2:	6f 2e       	mov	r6, r31
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	7f 2e       	mov	r7, r31
     ef8:	f0 2d       	mov	r31, r0
     efa:	0f 2e       	mov	r0, r31
     efc:	fd e7       	ldi	r31, 0x7D	; 125
     efe:	8f 2e       	mov	r8, r31
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	9f 2e       	mov	r9, r31
     f04:	f0 2d       	mov	r31, r0
		
		// Check if measurement is due
		if(timecmp(&time, &next_measure) != LT && ADC_IDLE) {
     f06:	0f 2e       	mov	r0, r31
     f08:	fd ea       	ldi	r31, 0xAD	; 173
     f0a:	ef 2e       	mov	r14, r31
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	ff 2e       	mov	r15, r31
     f10:	f0 2d       	mov	r31, r0
			adc_start_measure();
			next_measure = time;
     f12:	68 94       	set
     f14:	33 24       	eor	r3, r3
     f16:	34 f8       	bld	r3, 4

		if(POWER_REQUEST_PENDING) {
			// Check if power request timeout elapsed
			if(timecmp(&time, &power_request_timeout) != LT) {
				state.power_request_state = POWER_REQUEST_IDLE;
				if(!GET_FLAG(battery.undervoltage)) {
     f18:	0f 2e       	mov	r0, r31
     f1a:	fe ee       	ldi	r31, 0xEE	; 238
     f1c:	4f 2e       	mov	r4, r31
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	5f 2e       	mov	r5, r31
     f22:	f0 2d       	mov	r31, r0

		// Process digital inputs
		digital_io_process(&time);
	
		// Process power-up/power-down requests
		if(REG_OUTPUT_ON != OUTPUT_ON) {
     f24:	0f 2e       	mov	r0, r31
     f26:	f7 e7       	ldi	r31, 0x77	; 119
     f28:	af 2e       	mov	r10, r31
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	bf 2e       	mov	r11, r31
     f2e:	f0 2d       	mov	r31, r0

	while (1) {
		uint8_t sleep_mode;
		struct timeval_t time;
		// Actions
		now(&time);
     f30:	ce 01       	movw	r24, r28
     f32:	41 96       	adiw	r24, 0x11	; 17
     f34:	59 d9       	rcall	.-3406   	; 0x1e8 <now>
		
		// Update uptime
		REG16_WRITE(reg_uptime, time.secs);
     f36:	29 89       	ldd	r18, Y+17	; 0x11
     f38:	3a 89       	ldd	r19, Y+18	; 0x12
     f3a:	4b 89       	ldd	r20, Y+19	; 0x13
     f3c:	5c 89       	ldd	r21, Y+20	; 0x14
     f3e:	6d 89       	ldd	r22, Y+21	; 0x15
     f40:	7e 89       	ldd	r23, Y+22	; 0x16
     f42:	8f 89       	ldd	r24, Y+23	; 0x17
     f44:	98 8d       	ldd	r25, Y+24	; 0x18
     f46:	f3 01       	movw	r30, r6
     f48:	22 83       	std	Z+2, r18	; 0x02
     f4a:	08 e0       	ldi	r16, 0x08	; 8
     f4c:	1c d4       	rcall	.+2104   	; 0x1786 <__lshrdi3>
     f4e:	f4 01       	movw	r30, r8
     f50:	22 83       	std	Z+2, r18	; 0x02
		
		// Check if measurement is due
		if(timecmp(&time, &next_measure) != LT && ADC_IDLE) {
     f52:	be 01       	movw	r22, r28
     f54:	6f 5f       	subi	r22, 0xFF	; 255
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	ce 01       	movw	r24, r28
     f5a:	41 96       	adiw	r24, 0x11	; 17
     f5c:	87 d9       	rcall	.-3314   	; 0x26c <timecmp>
     f5e:	8f 3f       	cpi	r24, 0xFF	; 255
     f60:	c9 f0       	breq	.+50     	; 0xf94 <main+0x1b0>
     f62:	f7 01       	movw	r30, r14
     f64:	80 81       	ld	r24, Z
     f66:	83 70       	andi	r24, 0x03	; 3
     f68:	a9 f4       	brne	.+42     	; 0xf94 <main+0x1b0>
			adc_start_measure();
     f6a:	cd db       	rcall	.-2150   	; 0x706 <adc_start_measure>
			next_measure = time;
     f6c:	fe 01       	movw	r30, r28
     f6e:	71 96       	adiw	r30, 0x11	; 17
     f70:	de 01       	movw	r26, r28
     f72:	11 96       	adiw	r26, 0x01	; 1
     f74:	83 2d       	mov	r24, r3
     f76:	01 90       	ld	r0, Z+
     f78:	0d 92       	st	X+, r0
     f7a:	8a 95       	dec	r24
     f7c:	e1 f7       	brne	.-8      	; 0xf76 <main+0x192>
			timeval_add_nsec(&next_measure, MEASURE_INTERVAL_NS);
     f7e:	00 e0       	ldi	r16, 0x00	; 0
     f80:	11 ee       	ldi	r17, 0xE1	; 225
     f82:	25 ef       	ldi	r18, 0xF5	; 245
     f84:	35 e0       	ldi	r19, 0x05	; 5
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	ce 01       	movw	r24, r28
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	81 d8       	rcall	.-3838   	; 0x96 <timeval_add_nsec>
		}

		if(POWER_REQUEST_PENDING) {
     f94:	f7 01       	movw	r30, r14
     f96:	80 81       	ld	r24, Z
     f98:	88 23       	and	r24, r24
     f9a:	7c f4       	brge	.+30     	; 0xfba <main+0x1d6>
			// Check if power request timeout elapsed
			if(timecmp(&time, &power_request_timeout) != LT) {
     f9c:	61 eb       	ldi	r22, 0xB1	; 177
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	ce 01       	movw	r24, r28
     fa2:	41 96       	adiw	r24, 0x11	; 17
     fa4:	63 d9       	rcall	.-3386   	; 0x26c <timecmp>
     fa6:	8f 3f       	cpi	r24, 0xFF	; 255
     fa8:	41 f0       	breq	.+16     	; 0xfba <main+0x1d6>
				state.power_request_state = POWER_REQUEST_IDLE;
     faa:	f7 01       	movw	r30, r14
     fac:	80 81       	ld	r24, Z
     fae:	8f 77       	andi	r24, 0x7F	; 127
     fb0:	80 83       	st	Z, r24
				if(!GET_FLAG(battery.undervoltage)) {
     fb2:	f2 01       	movw	r30, r4
     fb4:	80 81       	ld	r24, Z
     fb6:	80 ff       	sbrs	r24, 0
					output_on();
     fb8:	50 d8       	rcall	.-3936   	; 0x5a <output_on>
			}
		}
		
		// Sleep
		// TWI data wakes the controller up from IDLE only
		if(USI_I2C_Busy()) {
     fba:	92 d1       	rcall	.+804    	; 0x12e0 <USI_I2C_Busy>
     fbc:	88 23       	and	r24, r24
     fbe:	21 f0       	breq	.+8      	; 0xfc8 <main+0x1e4>
			set_time_source(CLOCK_TIMER);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	6e db       	rcall	.-2340   	; 0x6a0 <set_time_source>
			sleep_mode = SLEEP_MODE_IDLE;
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	11 c0       	rjmp	.+34     	; 0xfea <main+0x206>
		} else {
			if(OUTPUT_ON || POWER_REQUEST_PENDING || CHARGER_DETECTED) {
     fc8:	f7 01       	movw	r30, r14
     fca:	80 81       	ld	r24, Z
     fcc:	80 7d       	andi	r24, 0xD0	; 208
     fce:	19 f0       	breq	.+6      	; 0xfd6 <main+0x1f2>
				set_time_source(CLOCK_WDT);				
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	66 db       	rcall	.-2356   	; 0x6a0 <set_time_source>
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <main+0x1f8>
			} else {
				set_time_source(CLOCK_NONE);
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	63 db       	rcall	.-2362   	; 0x6a0 <set_time_source>
				shutdown_adc();
     fda:	8d db       	rcall	.-2278   	; 0x6f6 <shutdown_adc>
			}
			sleep_mode = SLEEP_MODE_PWR_DOWN;
			if(!ADC_IDLE) {
     fdc:	f7 01       	movw	r30, r14
     fde:	80 81       	ld	r24, Z
     fe0:	83 70       	andi	r24, 0x03	; 3
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <main+0x204>
				sleep_mode = SLEEP_MODE_ADC;
     fe4:	98 e0       	ldi	r25, 0x08	; 8
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <main+0x206>
				set_time_source(CLOCK_WDT);				
			} else {
				set_time_source(CLOCK_NONE);
				shutdown_adc();
			}
			sleep_mode = SLEEP_MODE_PWR_DOWN;
     fe8:	93 2d       	mov	r25, r3
			if(!ADC_IDLE) {
				sleep_mode = SLEEP_MODE_ADC;
			}
		}
		
		set_sleep_mode(sleep_mode);
     fea:	85 b7       	in	r24, 0x35	; 53
     fec:	87 7e       	andi	r24, 0xE7	; 231
     fee:	89 2b       	or	r24, r25
     ff0:	85 bf       	out	0x35, r24	; 53
		sleep_enable();
     ff2:	85 b7       	in	r24, 0x35	; 53
     ff4:	80 62       	ori	r24, 0x20	; 32
     ff6:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
     ff8:	88 95       	sleep

		now(&time);
     ffa:	ce 01       	movw	r24, r28
     ffc:	41 96       	adiw	r24, 0x11	; 17
     ffe:	f4 d8       	rcall	.-3608   	; 0x1e8 <now>

		// Data processing
		adc_process();
    1000:	98 db       	rcall	.-2256   	; 0x732 <adc_process>

		// Process digital inputs
		digital_io_process(&time);
    1002:	ce 01       	movw	r24, r28
    1004:	41 96       	adiw	r24, 0x11	; 17
    1006:	44 de       	rcall	.-888    	; 0xc90 <digital_io_process>
	
		// Process power-up/power-down requests
		if(REG_OUTPUT_ON != OUTPUT_ON) {
    1008:	f5 01       	movw	r30, r10
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	81 70       	andi	r24, 0x01	; 1
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	f7 01       	movw	r30, r14
    1014:	90 81       	ld	r25, Z
    1016:	94 fb       	bst	r25, 4
    1018:	cc 24       	eor	r12, r12
    101a:	c0 f8       	bld	r12, 0
    101c:	d1 2c       	mov	r13, r1
    101e:	2c 15       	cp	r18, r12
    1020:	3d 05       	cpc	r19, r13
    1022:	b1 f0       	breq	.+44     	; 0x1050 <main+0x26c>
			set_output_state(REG_OUTPUT_ON);
    1024:	32 d8       	rcall	.-3996   	; 0x8a <set_output_state>
			// Reset measurement time interval monitor
			if(state.output_on) {
    1026:	f7 01       	movw	r30, r14
    1028:	80 81       	ld	r24, Z
    102a:	84 ff       	sbrs	r24, 4
    102c:	11 c0       	rjmp	.+34     	; 0x1050 <main+0x26c>
				shutdown_adc();
    102e:	63 db       	rcall	.-2362   	; 0x6f6 <shutdown_adc>
				now(&last_measure);
    1030:	85 ec       	ldi	r24, 0xC5	; 197
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	d9 d8       	rcall	.-3662   	; 0x1e8 <now>
				// Force a measurement
				next_measure = last_measure;
    1036:	e5 ec       	ldi	r30, 0xC5	; 197
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	de 01       	movw	r26, r28
    103c:	11 96       	adiw	r26, 0x01	; 1
    103e:	83 2d       	mov	r24, r3
    1040:	01 90       	ld	r0, Z+
    1042:	0d 92       	st	X+, r0
    1044:	8a 95       	dec	r24
    1046:	e1 f7       	brne	.-8      	; 0x1040 <main+0x25c>
				// Clean slate, run full undervoltage detection cycle
				RESET_FLAG_COUNTER(battery.undervoltage);
    1048:	f2 01       	movw	r30, r4
    104a:	80 81       	ld	r24, Z
    104c:	87 70       	andi	r24, 0x07	; 7
    104e:	80 83       	st	Z, r24
			}
		}
				
		// Battery status processing
		battery_process();
    1050:	8d de       	rcall	.-742    	; 0xd6c <battery_process>
	}
    1052:	6e cf       	rjmp	.-292    	; 0xf30 <main+0x14c>

00001054 <adc_val_bipo>:
}

int16_t adc_val_bipo() {
	int16_t raw = ADCL | (ADCH << 8);
    1054:	84 b1       	in	r24, 0x04	; 4
    1056:	25 b1       	in	r18, 0x05	; 5
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	92 2b       	or	r25, r18
	if(raw & BIT(9)) {
    105c:	91 ff       	sbrs	r25, 1
    105e:	06 c0       	rjmp	.+12     	; 0x106c <adc_val_bipo+0x18>
		raw = -((~raw) & 0b111111111);
    1060:	80 95       	com	r24
    1062:	90 95       	com	r25
    1064:	91 70       	andi	r25, 0x01	; 1
    1066:	91 95       	neg	r25
    1068:	81 95       	neg	r24
    106a:	91 09       	sbc	r25, r1
	}
	return raw;
}
    106c:	08 95       	ret

0000106e <adc_val>:

uint16_t adc_val() {
	return ADCL | (ADCH << 8);
    106e:	84 b1       	in	r24, 0x04	; 4
    1070:	25 b1       	in	r18, 0x05	; 5
    1072:	90 e0       	ldi	r25, 0x00	; 0
}
    1074:	92 2b       	or	r25, r18
    1076:	08 95       	ret

00001078 <__vector_13>:

ISR(ADC_vect) {
    1078:	1f 92       	push	r1
    107a:	0f 92       	push	r0
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	0f 92       	push	r0
    1080:	11 24       	eor	r1, r1
    1082:	2f 93       	push	r18
    1084:	3f 93       	push	r19
    1086:	4f 93       	push	r20
    1088:	5f 93       	push	r21
    108a:	6f 93       	push	r22
    108c:	7f 93       	push	r23
    108e:	8f 93       	push	r24
    1090:	9f 93       	push	r25
    1092:	af 93       	push	r26
    1094:	bf 93       	push	r27
    1096:	ef 93       	push	r30
    1098:	ff 93       	push	r31
	if(adc_cnt >= ADC_SKIP_SAMPLES) {
    109a:	80 91 c3 00 	lds	r24, 0x00C3
    109e:	90 91 c4 00 	lds	r25, 0x00C4
    10a2:	02 97       	sbiw	r24, 0x02	; 2
    10a4:	e0 f0       	brcs	.+56     	; 0x10de <__vector_13+0x66>
		if(ADC_CONVERSION_IS_BIPOLAR) {
    10a6:	80 91 ad 00 	lds	r24, 0x00AD
    10aa:	83 70       	andi	r24, 0x03	; 3
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	61 f4       	brne	.+24     	; 0x10c8 <__vector_13+0x50>
			adcs += adc_val_bipo();
    10b0:	d1 df       	rcall	.-94     	; 0x1054 <adc_val_bipo>
    10b2:	20 91 9b 00 	lds	r18, 0x009B
    10b6:	30 91 9c 00 	lds	r19, 0x009C
    10ba:	82 0f       	add	r24, r18
    10bc:	93 1f       	adc	r25, r19
    10be:	90 93 9c 00 	sts	0x009C, r25
    10c2:	80 93 9b 00 	sts	0x009B, r24
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <__vector_13+0x66>
		} else {
			adc += adc_val();
    10c8:	d2 df       	rcall	.-92     	; 0x106e <adc_val>
    10ca:	20 91 c1 00 	lds	r18, 0x00C1
    10ce:	30 91 c2 00 	lds	r19, 0x00C2
    10d2:	82 0f       	add	r24, r18
    10d4:	93 1f       	adc	r25, r19
    10d6:	90 93 c2 00 	sts	0x00C2, r25
    10da:	80 93 c1 00 	sts	0x00C1, r24
		}
	}
	adc_cnt++;
    10de:	80 91 c3 00 	lds	r24, 0x00C3
    10e2:	90 91 c4 00 	lds	r25, 0x00C4
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	90 93 c4 00 	sts	0x00C4, r25
    10ec:	80 93 c3 00 	sts	0x00C3, r24
	if(adc_cnt >= ADC_SKIP_SAMPLES + ADC_SAMPLES) {
    10f0:	80 91 c3 00 	lds	r24, 0x00C3
    10f4:	90 91 c4 00 	lds	r25, 0x00C4
    10f8:	82 97       	sbiw	r24, 0x22	; 34
    10fa:	c8 f0       	brcs	.+50     	; 0x112e <__vector_13+0xb6>
		adc_cnt = 0;
    10fc:	10 92 c4 00 	sts	0x00C4, r1
    1100:	10 92 c3 00 	sts	0x00C3, r1
		switch(state.adc) {
    1104:	80 91 ad 00 	lds	r24, 0x00AD
    1108:	83 70       	andi	r24, 0x03	; 3
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	19 f0       	breq	.+6      	; 0x1118 <__vector_13+0xa0>
    1112:	02 97       	sbiw	r24, 0x02	; 2
    1114:	39 f0       	breq	.+14     	; 0x1124 <__vector_13+0xac>
    1116:	0b c0       	rjmp	.+22     	; 0x112e <__vector_13+0xb6>
			case ADC_STATE_I:
				flags.adc_I = 1;
    1118:	80 91 f0 00 	lds	r24, 0x00F0
    111c:	81 60       	ori	r24, 0x01	; 1
    111e:	80 93 f0 00 	sts	0x00F0, r24
				break;
    1122:	05 c0       	rjmp	.+10     	; 0x112e <__vector_13+0xb6>
			case ADC_STATE_U:
				flags.adc_U = 1;
    1124:	80 91 f0 00 	lds	r24, 0x00F0
    1128:	82 60       	ori	r24, 0x02	; 2
    112a:	80 93 f0 00 	sts	0x00F0, r24
		}
	}
}
    112e:	ff 91       	pop	r31
    1130:	ef 91       	pop	r30
    1132:	bf 91       	pop	r27
    1134:	af 91       	pop	r26
    1136:	9f 91       	pop	r25
    1138:	8f 91       	pop	r24
    113a:	7f 91       	pop	r23
    113c:	6f 91       	pop	r22
    113e:	5f 91       	pop	r21
    1140:	4f 91       	pop	r20
    1142:	3f 91       	pop	r19
    1144:	2f 91       	pop	r18
    1146:	0f 90       	pop	r0
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	0f 90       	pop	r0
    114c:	1f 90       	pop	r1
    114e:	18 95       	reti

00001150 <__vector_6>:

ISR(TIM1_COMPA_vect) {
    1150:	1f 92       	push	r1
    1152:	0f 92       	push	r0
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	0f 92       	push	r0
    1158:	11 24       	eor	r1, r1
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	2f 93       	push	r18
    1160:	3f 93       	push	r19
    1162:	4f 93       	push	r20
    1164:	5f 93       	push	r21
    1166:	6f 93       	push	r22
    1168:	7f 93       	push	r23
    116a:	8f 93       	push	r24
    116c:	9f 93       	push	r25
    116e:	af 93       	push	r26
    1170:	bf 93       	push	r27
    1172:	ef 93       	push	r30
    1174:	ff 93       	push	r31
	DEBUG_BLIP(PB0);
    1176:	c0 9a       	sbi	0x18, 0	; 24
    1178:	00 00       	nop
    117a:	c0 98       	cbi	0x18, 0	; 24
	timeval_add_nsec(&past, TIMER_TICK_NS);
    117c:	00 e0       	ldi	r16, 0x00	; 0
    117e:	14 ed       	ldi	r17, 0xD4	; 212
    1180:	20 e3       	ldi	r18, 0x30	; 48
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	8d ed       	ldi	r24, 0xDD	; 221
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	82 d7       	rcall	.+3844   	; 0x2096 <__TEXT_REGION_LENGTH__+0x96>
}
    1192:	ff 91       	pop	r31
    1194:	ef 91       	pop	r30
    1196:	bf 91       	pop	r27
    1198:	af 91       	pop	r26
    119a:	9f 91       	pop	r25
    119c:	8f 91       	pop	r24
    119e:	7f 91       	pop	r23
    11a0:	6f 91       	pop	r22
    11a2:	5f 91       	pop	r21
    11a4:	4f 91       	pop	r20
    11a6:	3f 91       	pop	r19
    11a8:	2f 91       	pop	r18
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	0f 90       	pop	r0
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	0f 90       	pop	r0
    11b4:	1f 90       	pop	r1
    11b6:	18 95       	reti

000011b8 <__vector_4>:

ISR(WDT_vect) {
    11b8:	1f 92       	push	r1
    11ba:	0f 92       	push	r0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	0f 92       	push	r0
    11c0:	11 24       	eor	r1, r1
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	2f 93       	push	r18
    11c8:	3f 93       	push	r19
    11ca:	4f 93       	push	r20
    11cc:	5f 93       	push	r21
    11ce:	6f 93       	push	r22
    11d0:	7f 93       	push	r23
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	af 93       	push	r26
    11d8:	bf 93       	push	r27
    11da:	ef 93       	push	r30
    11dc:	ff 93       	push	r31
	DEBUG_BLIP(PB0);
    11de:	c0 9a       	sbi	0x18, 0	; 24
    11e0:	00 00       	nop
    11e2:	c0 98       	cbi	0x18, 0	; 24
	timeval_add_nsec(&past, WDT_TICK_NS);
    11e4:	00 e0       	ldi	r16, 0x00	; 0
    11e6:	14 e2       	ldi	r17, 0x24	; 36
    11e8:	24 ef       	ldi	r18, 0xF4	; 244
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	8d ed       	ldi	r24, 0xDD	; 221
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	4e d7       	rcall	.+3740   	; 0x2096 <__TEXT_REGION_LENGTH__+0x96>
}
    11fa:	ff 91       	pop	r31
    11fc:	ef 91       	pop	r30
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	7f 91       	pop	r23
    1208:	6f 91       	pop	r22
    120a:	5f 91       	pop	r21
    120c:	4f 91       	pop	r20
    120e:	3f 91       	pop	r19
    1210:	2f 91       	pop	r18
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <__vector_2>:

ISR(PCINT0_vect) {
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	8f 93       	push	r24
    122c:	9f 93       	push	r25
	DEBUG_BLIP(PB1);
    122e:	c1 9a       	sbi	0x18, 1	; 24
    1230:	00 00       	nop
    1232:	c1 98       	cbi	0x18, 1	; 24
	flags.power_request = ((~POWER_REQUEST_PINR) & BIT(POWER_REQUEST_PIN)) >> POWER_REQUEST_PIN;
    1234:	89 b3       	in	r24, 0x19	; 25
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	80 95       	com	r24
    123a:	90 95       	com	r25
    123c:	83 fb       	bst	r24, 3
    123e:	88 27       	eor	r24, r24
    1240:	80 f9       	bld	r24, 0
    1242:	90 91 f0 00 	lds	r25, 0x00F0
    1246:	80 fb       	bst	r24, 0
    1248:	92 f9       	bld	r25, 2
    124a:	90 93 f0 00 	sts	0x00F0, r25
}
    124e:	9f 91       	pop	r25
    1250:	8f 91       	pop	r24
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	0f 90       	pop	r0
    1258:	1f 90       	pop	r1
    125a:	18 95       	reti

0000125c <__vector_3>:

ISR(PCINT1_vect) {
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
	// NOP, just wake up
	DEBUG_BLIP(PB1);
    1266:	c1 9a       	sbi	0x18, 1	; 24
    1268:	00 00       	nop
    126a:	c1 98       	cbi	0x18, 1	; 24
}
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <USI_I2C_Init>:
#define USI_SET_BOTH_INPUT() 	{ DDR_USI &= ~((1 << PORT_USI_SDA) | (1 << PORT_USI_SCL)); }

////////////////////////////////////////////////////////////////////////////////////////////////////

void USI_I2C_Init(char address, struct USI_I2C_Reg** regs, uint8_t num_regs) {
	usi_i2c_flags.reg_set = 0;
    1276:	90 91 22 01 	lds	r25, 0x0122
    127a:	9e 7f       	andi	r25, 0xFE	; 254
    127c:	90 93 22 01 	sts	0x0122, r25
	
	PORT_USI &= ~(1 << PORT_USI_SCL);
    1280:	dc 98       	cbi	0x1b, 4	; 27
	PORT_USI &= ~(1 << PORT_USI_SDA);
    1282:	de 98       	cbi	0x1b, 6	; 27

	usi_i2c_slave_address = address;
    1284:	80 93 fd 00 	sts	0x00FD, r24
	usi_i2c_regs = regs;
    1288:	70 93 fc 00 	sts	0x00FC, r23
    128c:	60 93 fb 00 	sts	0x00FB, r22
	usi_i2c_num_regs = num_regs;
    1290:	40 93 fe 00 	sts	0x00FE, r20
	
	usi_i2c_timeout.secs = 0;
    1294:	e1 e1       	ldi	r30, 0x11	; 17
    1296:	f1 e0       	ldi	r31, 0x01	; 1
    1298:	10 82       	st	Z, r1
    129a:	11 82       	std	Z+1, r1	; 0x01
    129c:	12 82       	std	Z+2, r1	; 0x02
    129e:	13 82       	std	Z+3, r1	; 0x03
    12a0:	14 82       	std	Z+4, r1	; 0x04
    12a2:	15 82       	std	Z+5, r1	; 0x05
    12a4:	16 82       	std	Z+6, r1	; 0x06
    12a6:	17 82       	std	Z+7, r1	; 0x07
	usi_i2c_timeout.nsecs = USI_I2C_TIMEOUT_NS;
    12a8:	80 e8       	ldi	r24, 0x80	; 128
    12aa:	80 87       	std	Z+8, r24	; 0x08
    12ac:	86 e9       	ldi	r24, 0x96	; 150
    12ae:	81 87       	std	Z+9, r24	; 0x09
    12b0:	88 e9       	ldi	r24, 0x98	; 152
    12b2:	82 87       	std	Z+10, r24	; 0x0a
    12b4:	13 86       	std	Z+11, r1	; 0x0b
    12b6:	14 86       	std	Z+12, r1	; 0x0c
    12b8:	15 86       	std	Z+13, r1	; 0x0d
    12ba:	16 86       	std	Z+14, r1	; 0x0e
    12bc:	17 86       	std	Z+15, r1	; 0x0f
	
	usi_i2c_flags.busy = 0;
    12be:	80 91 22 01 	lds	r24, 0x0122
	usi_i2c_flags.reg_read = 0;
	usi_i2c_flags.reg_set = 0;
    12c2:	89 7f       	andi	r24, 0xF9	; 249
    12c4:	8e 7f       	andi	r24, 0xFE	; 254
    12c6:	80 93 22 01 	sts	0x0122, r24

	now_fast(&usi_i2c_last_xfer);
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	83 d7       	rcall	.+3846   	; 0x21d6 <__TEXT_REGION_LENGTH__+0x1d6>

	USI_SET_BOTH_INPUT();
    12d0:	8a b3       	in	r24, 0x1a	; 26
    12d2:	8f 7a       	andi	r24, 0xAF	; 175
    12d4:	8a bb       	out	0x1a, r24	; 26
	
	USICR = (1 << USISIE) | (0 << USIOIE) | (1 << USIWM1) | (0 << USIWM0) | (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | (0 << USITC);
    12d6:	88 ea       	ldi	r24, 0xA8	; 168
    12d8:	8d b9       	out	0x0d, r24	; 13
	USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC);
    12da:	80 ef       	ldi	r24, 0xF0	; 240
    12dc:	8e b9       	out	0x0e, r24	; 14
    12de:	08 95       	ret

000012e0 <USI_I2C_Busy>:
}

// TODO: Make faster. Currently too slow, causes transactions to fail
uint8_t USI_I2C_Busy() {
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	a0 97       	sbiw	r28, 0x20	; 32
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
	struct timeval_t time;
	struct timeval_t delta;
	if(!usi_i2c_flags.busy) {
    12f4:	90 91 22 01 	lds	r25, 0x0122
    12f8:	89 2f       	mov	r24, r25
    12fa:	84 70       	andi	r24, 0x04	; 4
    12fc:	92 ff       	sbrs	r25, 2
    12fe:	1b c0       	rjmp	.+54     	; 0x1336 <USI_I2C_Busy+0x56>
		return 0;
	}
	now_fast(&time);
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	68 d7       	rcall	.+3792   	; 0x21d6 <__TEXT_REGION_LENGTH__+0x1d6>
	timedelta(&usi_i2c_last_xfer, &time, &delta);
    1306:	ae 01       	movw	r20, r28
    1308:	4f 5e       	subi	r20, 0xEF	; 239
    130a:	5f 4f       	sbci	r21, 0xFF	; 255
    130c:	be 01       	movw	r22, r28
    130e:	6f 5f       	subi	r22, 0xFF	; 255
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	75 d8       	rcall	.-3862   	; 0x402 <timedelta>
	if(timecmp(&delta, &usi_i2c_timeout) != LT) {
    1318:	61 e1       	ldi	r22, 0x11	; 17
    131a:	71 e0       	ldi	r23, 0x01	; 1
    131c:	ce 01       	movw	r24, r28
    131e:	41 96       	adiw	r24, 0x11	; 17
    1320:	a5 d7       	rcall	.+3914   	; 0x226c <__TEXT_REGION_LENGTH__+0x26c>
    1322:	8f 3f       	cpi	r24, 0xFF	; 255
    1324:	39 f0       	breq	.+14     	; 0x1334 <USI_I2C_Busy+0x54>
		usi_i2c_flags.busy = 0;
    1326:	80 91 22 01 	lds	r24, 0x0122
    132a:	8b 7f       	andi	r24, 0xFB	; 251
    132c:	80 93 22 01 	sts	0x0122, r24
		return 0;
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <USI_I2C_Busy+0x56>
	}
	return 1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
}
    1336:	a0 96       	adiw	r28, 0x20	; 32
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <__vector_15>:
//  (enough for the address/rw byte to be transmitted) before overflowing and  //
//  triggering the first state table interrupt.  If a stop condition occurs,   //
//  reset the start condition detector to detect the next start condition.     //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_START_vect) {	
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
	USI_I2C_Slave_State = USI_SLAVE_CHECK_ADDRESS;
    136a:	10 92 10 01 	sts	0x0110, r1

	USI_SET_SDA_INPUT();
    136e:	d6 98       	cbi	0x1a, 6	; 26
	// wait for SCL to go low to ensure the Start Condition has completed (the
	// start detector will hold SCL low ) - if a Stop Condition arises then leave
	// the interrupt to prevent waiting forever - don't use USISR to test for Stop
	// Condition as in Application Note AVR312 because the Stop Condition Flag is
	// going to be set from the last TWI sequence
	while((PIN_USI & (1 << PIN_USI_SCL)) && !((PIN_USI & (1 << PIN_USI_SDA))));
    1370:	cc 9b       	sbis	0x19, 4	; 25
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <__vector_15+0x30>
    1374:	ce 9b       	sbis	0x19, 6	; 25
    1376:	fc cf       	rjmp	.-8      	; 0x1370 <__vector_15+0x28>

	if(!(PIN_USI & (1 << PIN_USI_SDA)))
    1378:	ce 99       	sbic	0x19, 6	; 25
    137a:	08 c0       	rjmp	.+16     	; 0x138c <__vector_15+0x44>
	{
		// a Stop Condition did not occur
		USICR = USI_SLAVE_STOP_NOT_OCCUR_USICR;
    137c:	88 ee       	ldi	r24, 0xE8	; 232
    137e:	8d b9       	out	0x0d, r24	; 13
		usi_i2c_flags.busy = 1;
    1380:	80 91 22 01 	lds	r24, 0x0122
    1384:	84 60       	ori	r24, 0x04	; 4
    1386:	80 93 22 01 	sts	0x0122, r24
    138a:	07 c0       	rjmp	.+14     	; 0x139a <__vector_15+0x52>
	} else {
		// a Stop Condition did occur
    	USICR = USI_SLAVE_STOP_DID_OCCUR_USICR;
    138c:	88 eb       	ldi	r24, 0xB8	; 184
    138e:	8d b9       	out	0x0d, r24	; 13
		usi_i2c_flags.busy = 0;
    1390:	80 91 22 01 	lds	r24, 0x0122
    1394:	8b 7f       	andi	r24, 0xFB	; 251
    1396:	80 93 22 01 	sts	0x0122, r24
	}
	
	USISR = USI_SLAVE_CLEAR_START_USISR;
    139a:	80 ef       	ldi	r24, 0xF0	; 240
    139c:	8e b9       	out	0x0e, r24	; 14
	now_fast(&usi_i2c_last_xfer);
    139e:	8f ef       	ldi	r24, 0xFF	; 255
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	19 d7       	rcall	.+3634   	; 0x21d6 <__TEXT_REGION_LENGTH__+0x1d6>
}
    13a4:	ff 91       	pop	r31
    13a6:	ef 91       	pop	r30
    13a8:	bf 91       	pop	r27
    13aa:	af 91       	pop	r26
    13ac:	9f 91       	pop	r25
    13ae:	8f 91       	pop	r24
    13b0:	7f 91       	pop	r23
    13b2:	6f 91       	pop	r22
    13b4:	5f 91       	pop	r21
    13b6:	4f 91       	pop	r20
    13b8:	3f 91       	pop	r19
    13ba:	2f 91       	pop	r18
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <__vector_16>:
//  set the counter to 1 (actually -1, or 0x0E) it will wait one clock.        //
//  This is used to set up a state table of I2C transmission states that fits  //
//  the I2C protocol for proper transmission.                                  //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_OVF_vect) {
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	2f 93       	push	r18
    13d2:	3f 93       	push	r19
    13d4:	4f 93       	push	r20
    13d6:	5f 93       	push	r21
    13d8:	6f 93       	push	r22
    13da:	7f 93       	push	r23
    13dc:	8f 93       	push	r24
    13de:	9f 93       	push	r25
    13e0:	af 93       	push	r26
    13e2:	bf 93       	push	r27
    13e4:	ef 93       	push	r30
    13e6:	ff 93       	push	r31
	switch (USI_I2C_Slave_State) {
    13e8:	80 91 10 01 	lds	r24, 0x0110
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	a9 f1       	breq	.+106    	; 0x145a <__vector_16+0x94>
    13f0:	30 f4       	brcc	.+12     	; 0x13fe <__vector_16+0x38>
    13f2:	88 23       	and	r24, r24
    13f4:	61 f0       	breq	.+24     	; 0x140e <__vector_16+0x48>
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <__vector_16+0x36>
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <__vector_16+0xb4>
    13fc:	a9 c0       	rjmp	.+338    	; 0x1550 <__vector_16+0x18a>
    13fe:	84 30       	cpi	r24, 0x04	; 4
    1400:	09 f4       	brne	.+2      	; 0x1404 <__vector_16+0x3e>
    1402:	63 c0       	rjmp	.+198    	; 0x14ca <__vector_16+0x104>
    1404:	90 f1       	brcs	.+100    	; 0x146a <__vector_16+0xa4>
    1406:	85 30       	cpi	r24, 0x05	; 5
    1408:	09 f4       	brne	.+2      	; 0x140c <__vector_16+0x46>
    140a:	66 c0       	rjmp	.+204    	; 0x14d8 <__vector_16+0x112>
    140c:	a1 c0       	rjmp	.+322    	; 0x1550 <__vector_16+0x18a>
		//  If the address was not for this device, the USI system is          //
		//  re-initialized for start condition.                                //
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_CHECK_ADDRESS:
			if((USIDR == 0) || ((USIDR >> 1) == usi_i2c_slave_address)) {
    140e:	8f b1       	in	r24, 0x0f	; 15
    1410:	88 23       	and	r24, r24
    1412:	31 f0       	breq	.+12     	; 0x1420 <__vector_16+0x5a>
    1414:	8f b1       	in	r24, 0x0f	; 15
    1416:	86 95       	lsr	r24
    1418:	90 91 fd 00 	lds	r25, 0x00FD
    141c:	89 13       	cpse	r24, r25
    141e:	18 c0       	rjmp	.+48     	; 0x1450 <__vector_16+0x8a>
				usi_i2c_flags.reg_read = 0;
    1420:	80 91 22 01 	lds	r24, 0x0122
    1424:	8d 7f       	andi	r24, 0xFD	; 253
    1426:	80 93 22 01 	sts	0x0122, r24
				if (USIDR & 0x01) {
    142a:	78 9b       	sbis	0x0f, 0	; 15
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <__vector_16+0x70>
					USI_I2C_Slave_State = USI_SLAVE_SEND_DATA;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	80 93 10 01 	sts	0x0110, r24
    1434:	08 c0       	rjmp	.+16     	; 0x1446 <__vector_16+0x80>
				} else {
					usi_i2c_flags.reg_set = 0;
    1436:	80 91 22 01 	lds	r24, 0x0122
    143a:	8e 7f       	andi	r24, 0xFE	; 254
    143c:	80 93 22 01 	sts	0x0122, r24
					USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_WAIT;
    1440:	84 e0       	ldi	r24, 0x04	; 4
    1442:	80 93 10 01 	sts	0x0110, r24
				}

				//Set USI to send ACK
				USIDR = 0;
    1446:	1f b8       	out	0x0f, r1	; 15

				USI_SET_SDA_OUTPUT();
    1448:	d6 9a       	sbi	0x1a, 6	; 26
				USISR = USI_SLAVE_COUNT_ACK_USISR;
    144a:	8e e7       	ldi	r24, 0x7E	; 126
    144c:	8e b9       	out	0x0e, r24	; 14
    144e:	80 c0       	rjmp	.+256    	; 0x1550 <__vector_16+0x18a>
			} else {
				//Set USI to Start Condition Mode
				USICR = USI_SLAVE_SET_START_COND_USICR;
    1450:	88 ea       	ldi	r24, 0xA8	; 168
    1452:	8d b9       	out	0x0d, r24	; 13
				USISR = USI_SLAVE_SET_START_COND_USISR;
    1454:	80 e7       	ldi	r24, 0x70	; 112
    1456:	8e b9       	out	0x0e, r24	; 14
    1458:	7b c0       	rjmp	.+246    	; 0x1550 <__vector_16+0x18a>
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA_ACK_WAIT:
			//After sending, immediately shut off PORT = 1 to prevent driving
			//the line high (I2C should *NEVER* drive high, and could damage
			//connected devices if operating at different voltage levels)
			PORT_USI &= ~(1 << PORT_USI_SDA);
    145a:	de 98       	cbi	0x1b, 6	; 27


			USI_I2C_Slave_State = USI_SLAVE_SEND_DATA_ACK_CHECK;
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	80 93 10 01 	sts	0x0110, r24
			USI_SET_SDA_INPUT();
    1462:	d6 98       	cbi	0x1a, 6	; 26
			USISR = USI_SLAVE_COUNT_ACK_USISR;
    1464:	8e e7       	ldi	r24, 0x7E	; 126
    1466:	8e b9       	out	0x0e, r24	; 14
			break;
    1468:	73 c0       	rjmp	.+230    	; 0x1550 <__vector_16+0x18a>
		//  Check USIDR to see if master sent ACK or NACK.  If NACK, set up    //
		//  a reset to START conditions, if ACK, fall through into SEND_DATA   //
		//  to continue sending data.                                          //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA_ACK_CHECK:
			if(USIDR) {
    146a:	8f b1       	in	r24, 0x0f	; 15
    146c:	88 23       	and	r24, r24
    146e:	29 f0       	breq	.+10     	; 0x147a <__vector_16+0xb4>
				//The master sent a NACK, indicating that it will not accept
				//more data.  Reset into START condition state
				USICR = USI_SLAVE_SET_START_COND_USICR;
    1470:	88 ea       	ldi	r24, 0xA8	; 168
    1472:	8d b9       	out	0x0d, r24	; 13
				USISR = USI_SLAVE_SET_START_COND_USISR;
    1474:	80 e7       	ldi	r24, 0x70	; 112
    1476:	8e b9       	out	0x0e, r24	; 14
				goto out;
    1478:	6b c0       	rjmp	.+214    	; 0x1550 <__vector_16+0x18a>
		//  Set USIDR to the data to be sent, then set up SDA registers to     //
		//  enable data transmission in the next 8 clocks.  Set to wait 8      //
		//  clocks and proceed to wait for ACK.                                //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA:
			if(active_reg < usi_i2c_num_regs && !usi_i2c_flags.reg_read) {
    147a:	80 91 98 00 	lds	r24, 0x0098
    147e:	90 91 fe 00 	lds	r25, 0x00FE
    1482:	89 17       	cp	r24, r25
    1484:	c8 f4       	brcc	.+50     	; 0x14b8 <__vector_16+0xf2>
    1486:	90 91 22 01 	lds	r25, 0x0122
    148a:	91 fd       	sbrc	r25, 1
    148c:	15 c0       	rjmp	.+42     	; 0x14b8 <__vector_16+0xf2>
				USIDR = usi_i2c_regs[active_reg]->data;
    148e:	20 91 fb 00 	lds	r18, 0x00FB
    1492:	90 91 fc 00 	lds	r25, 0x00FC
    1496:	e2 2f       	mov	r30, r18
    1498:	f9 2f       	mov	r31, r25
    149a:	e8 0f       	add	r30, r24
    149c:	f1 1d       	adc	r31, r1
    149e:	e8 0f       	add	r30, r24
    14a0:	f1 1d       	adc	r31, r1
    14a2:	01 90       	ld	r0, Z+
    14a4:	f0 81       	ld	r31, Z
    14a6:	e0 2d       	mov	r30, r0
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	8f b9       	out	0x0f, r24	; 15
				usi_i2c_flags.reg_read = 1;
    14ac:	80 91 22 01 	lds	r24, 0x0122
    14b0:	82 60       	ori	r24, 0x02	; 2
    14b2:	80 93 22 01 	sts	0x0122, r24
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <__vector_16+0xf4>
			} else {
				USIDR = 0x00;
    14b8:	1f b8       	out	0x0f, r1	; 15
			}

			USI_I2C_Slave_State = USI_SLAVE_SEND_DATA_ACK_WAIT;
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	80 93 10 01 	sts	0x0110, r24

			//To send data, DDR for SDA must be 1 (Output) and PORT for SDA
			//must also be 1 (line drives low on USIDR MSB = 0 or PORT = 0)
			USI_SET_SDA_OUTPUT();
    14c0:	d6 9a       	sbi	0x1a, 6	; 26
			PORT_USI |= (1 << PORT_USI_SDA);
    14c2:	de 9a       	sbi	0x1b, 6	; 27

			USISR = USI_SLAVE_COUNT_BYTE_USISR;
    14c4:	80 e7       	ldi	r24, 0x70	; 112
    14c6:	8e b9       	out	0x0e, r24	; 14
			break;
    14c8:	43 c0       	rjmp	.+134    	; 0x1550 <__vector_16+0x18a>
		//                                                                     //
		//  Prepares to wait 8 clocks to receive a data byte from the master.  //
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_RECV_DATA_WAIT:
			USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_ACK_SEND;
    14ca:	85 e0       	ldi	r24, 0x05	; 5
    14cc:	80 93 10 01 	sts	0x0110, r24
			USI_SET_SDA_INPUT();
    14d0:	d6 98       	cbi	0x1a, 6	; 26
			USISR = USI_SLAVE_COUNT_BYTE_USISR;
    14d2:	80 e7       	ldi	r24, 0x70	; 112
    14d4:	8e b9       	out	0x0e, r24	; 14
			break;
    14d6:	3c c0       	rjmp	.+120    	; 0x1550 <__vector_16+0x18a>
		//  USIDR into either the i2c buffer or internal address, then sends   //
		//  an acknowledgement to the master.                                  //
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_RECV_DATA_ACK_SEND:
			USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_WAIT;
    14d8:	84 e0       	ldi	r24, 0x04	; 4
    14da:	80 93 10 01 	sts	0x0110, r24
			if(!usi_i2c_flags.reg_set) {
    14de:	80 91 22 01 	lds	r24, 0x0122
    14e2:	80 fd       	sbrc	r24, 0
    14e4:	09 c0       	rjmp	.+18     	; 0x14f8 <__vector_16+0x132>
				active_reg = USIDR;
    14e6:	8f b1       	in	r24, 0x0f	; 15
    14e8:	80 93 98 00 	sts	0x0098, r24
				usi_i2c_flags.reg_set = 1;
    14ec:	80 91 22 01 	lds	r24, 0x0122
    14f0:	81 60       	ori	r24, 0x01	; 1
    14f2:	80 93 22 01 	sts	0x0122, r24
    14f6:	28 c0       	rjmp	.+80     	; 0x1548 <__vector_16+0x182>
			} else if(active_reg < usi_i2c_num_regs) {
    14f8:	80 91 98 00 	lds	r24, 0x0098
    14fc:	90 91 fe 00 	lds	r25, 0x00FE
    1500:	89 17       	cp	r24, r25
    1502:	10 f5       	brcc	.+68     	; 0x1548 <__vector_16+0x182>
				uint8_t data_pre = usi_i2c_regs[active_reg]->data;
    1504:	20 91 fb 00 	lds	r18, 0x00FB
    1508:	90 91 fc 00 	lds	r25, 0x00FC
    150c:	e2 2f       	mov	r30, r18
    150e:	f9 2f       	mov	r31, r25
    1510:	e8 0f       	add	r30, r24
    1512:	f1 1d       	adc	r31, r1
    1514:	e8 0f       	add	r30, r24
    1516:	f1 1d       	adc	r31, r1
    1518:	a0 81       	ld	r26, Z
    151a:	b1 81       	ldd	r27, Z+1	; 0x01
    151c:	12 96       	adiw	r26, 0x02	; 2
    151e:	2c 91       	ld	r18, X
    1520:	12 97       	sbiw	r26, 0x02	; 2
				usi_i2c_regs[active_reg]->data = USIDR & usi_i2c_regs[active_reg]->write_mask;
    1522:	8f b1       	in	r24, 0x0f	; 15
    1524:	11 96       	adiw	r26, 0x01	; 1
    1526:	9c 91       	ld	r25, X
    1528:	11 97       	sbiw	r26, 0x01	; 1
    152a:	89 23       	and	r24, r25
    152c:	12 96       	adiw	r26, 0x02	; 2
    152e:	8c 93       	st	X, r24
				usi_i2c_regs[active_reg]->attr.changed = data_pre != usi_i2c_regs[active_reg]->data;
    1530:	01 90       	ld	r0, Z+
    1532:	f0 81       	ld	r31, Z
    1534:	e0 2d       	mov	r30, r0
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	82 13       	cpse	r24, r18
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <__vector_16+0x17a>
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	90 fb       	bst	r25, 0
    1544:	80 f9       	bld	r24, 0
    1546:	80 83       	st	Z, r24
			}
			
			USIDR = 0;
    1548:	1f b8       	out	0x0f, r1	; 15
			USI_SET_SDA_OUTPUT();
    154a:	d6 9a       	sbi	0x1a, 6	; 26
			USISR = USI_SLAVE_COUNT_ACK_USISR;
    154c:	8e e7       	ldi	r24, 0x7E	; 126
    154e:	8e b9       	out	0x0e, r24	; 14
			break;
	}

out:
	now_fast(&usi_i2c_last_xfer);
    1550:	8f ef       	ldi	r24, 0xFF	; 255
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	40 d6       	rcall	.+3200   	; 0x21d6 <__TEXT_REGION_LENGTH__+0x1d6>
	return;
    1556:	ff 91       	pop	r31
    1558:	ef 91       	pop	r30
    155a:	bf 91       	pop	r27
    155c:	af 91       	pop	r26
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	7f 91       	pop	r23
    1564:	6f 91       	pop	r22
    1566:	5f 91       	pop	r21
    1568:	4f 91       	pop	r20
    156a:	3f 91       	pop	r19
    156c:	2f 91       	pop	r18
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <__muldi3>:
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	9f 92       	push	r9
    157e:	a0 e4       	ldi	r26, 0x40	; 64
    1580:	9a 2e       	mov	r9, r26
    1582:	00 24       	eor	r0, r0
    1584:	d0 01       	movw	r26, r0
    1586:	e0 01       	movw	r28, r0
    1588:	f0 01       	movw	r30, r0
    158a:	16 95       	lsr	r17
    158c:	07 95       	ror	r16
    158e:	f7 94       	ror	r15
    1590:	e7 94       	ror	r14
    1592:	d7 94       	ror	r13
    1594:	c7 94       	ror	r12
    1596:	b7 94       	ror	r11
    1598:	a7 94       	ror	r10
    159a:	48 f4       	brcc	.+18     	; 0x15ae <__muldi3+0x36>
    159c:	10 68       	ori	r17, 0x80	; 128
    159e:	a2 0f       	add	r26, r18
    15a0:	b3 1f       	adc	r27, r19
    15a2:	c4 1f       	adc	r28, r20
    15a4:	d5 1f       	adc	r29, r21
    15a6:	e6 1f       	adc	r30, r22
    15a8:	f7 1f       	adc	r31, r23
    15aa:	08 1e       	adc	r0, r24
    15ac:	19 1e       	adc	r1, r25
    15ae:	22 0f       	add	r18, r18
    15b0:	33 1f       	adc	r19, r19
    15b2:	44 1f       	adc	r20, r20
    15b4:	55 1f       	adc	r21, r21
    15b6:	66 1f       	adc	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	88 1f       	adc	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	9a 94       	dec	r9
    15c0:	21 f7       	brne	.-56     	; 0x158a <__muldi3+0x12>
    15c2:	9d 01       	movw	r18, r26
    15c4:	ae 01       	movw	r20, r28
    15c6:	bf 01       	movw	r22, r30
    15c8:	c0 01       	movw	r24, r0
    15ca:	11 24       	eor	r1, r1
    15cc:	9f 90       	pop	r9
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <__moddi3>:
    15d4:	68 94       	set
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <__divdi3_moddi3>

000015d8 <__divdi3>:
    15d8:	e8 94       	clt

000015da <__divdi3_moddi3>:
    15da:	f9 2f       	mov	r31, r25
    15dc:	f1 2b       	or	r31, r17
    15de:	0a f0       	brmi	.+2      	; 0x15e2 <__divdi3_moddi3+0x8>
    15e0:	27 c0       	rjmp	.+78     	; 0x1630 <__udivdi3_umoddi3>
    15e2:	a0 e0       	ldi	r26, 0x00	; 0
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e6 ef       	ldi	r30, 0xF6	; 246
    15e8:	fa e0       	ldi	r31, 0x0A	; 10
    15ea:	81 c0       	rjmp	.+258    	; 0x16ee <__prologue_saves__+0xc>
    15ec:	09 2e       	mov	r0, r25
    15ee:	05 94       	asr	r0
    15f0:	1a f4       	brpl	.+6      	; 0x15f8 <__divdi3_moddi3+0x1e>
    15f2:	67 d0       	rcall	.+206    	; 0x16c2 <__negdi2>
    15f4:	11 23       	and	r17, r17
    15f6:	92 f4       	brpl	.+36     	; 0x161c <__divdi3_moddi3+0x42>
    15f8:	f0 e8       	ldi	r31, 0x80	; 128
    15fa:	0f 26       	eor	r0, r31
    15fc:	ff ef       	ldi	r31, 0xFF	; 255
    15fe:	e0 94       	com	r14
    1600:	f0 94       	com	r15
    1602:	00 95       	com	r16
    1604:	10 95       	com	r17
    1606:	b0 94       	com	r11
    1608:	c0 94       	com	r12
    160a:	d0 94       	com	r13
    160c:	a1 94       	neg	r10
    160e:	bf 0a       	sbc	r11, r31
    1610:	cf 0a       	sbc	r12, r31
    1612:	df 0a       	sbc	r13, r31
    1614:	ef 0a       	sbc	r14, r31
    1616:	ff 0a       	sbc	r15, r31
    1618:	0f 0b       	sbc	r16, r31
    161a:	1f 0b       	sbc	r17, r31
    161c:	13 d0       	rcall	.+38     	; 0x1644 <__udivmod64>
    161e:	07 fc       	sbrc	r0, 7
    1620:	50 d0       	rcall	.+160    	; 0x16c2 <__negdi2>
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	ec e0       	ldi	r30, 0x0C	; 12
    1628:	7e c0       	rjmp	.+252    	; 0x1726 <__epilogue_restores__+0xc>

0000162a <__umoddi3>:
    162a:	68 94       	set
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <__udivdi3_umoddi3>

0000162e <__udivdi3>:
    162e:	e8 94       	clt

00001630 <__udivdi3_umoddi3>:
    1630:	8f 92       	push	r8
    1632:	9f 92       	push	r9
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	05 d0       	rcall	.+10     	; 0x1644 <__udivmod64>
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	9f 90       	pop	r9
    1640:	8f 90       	pop	r8
    1642:	08 95       	ret

00001644 <__udivmod64>:
    1644:	88 24       	eor	r8, r8
    1646:	99 24       	eor	r9, r9
    1648:	f4 01       	movw	r30, r8
    164a:	e4 01       	movw	r28, r8
    164c:	b0 e4       	ldi	r27, 0x40	; 64
    164e:	1b 2e       	mov	r1, r27
    1650:	d4 01       	movw	r26, r8
    1652:	9d 15       	cp	r25, r13
    1654:	8e 04       	cpc	r8, r14
    1656:	9f 04       	cpc	r9, r15
    1658:	e0 07       	cpc	r30, r16
    165a:	f1 07       	cpc	r31, r17
    165c:	38 f4       	brcc	.+14     	; 0x166c <__udivmod64+0x28>
    165e:	fc 01       	movw	r30, r24
    1660:	4b 01       	movw	r8, r22
    1662:	ca 01       	movw	r24, r20
    1664:	b9 01       	movw	r22, r18
    1666:	ad 01       	movw	r20, r26
    1668:	9e 01       	movw	r18, r28
    166a:	16 94       	lsr	r1
    166c:	22 0f       	add	r18, r18
    166e:	33 1f       	adc	r19, r19
    1670:	44 1f       	adc	r20, r20
    1672:	55 1f       	adc	r21, r21
    1674:	66 1f       	adc	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	88 1f       	adc	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	88 1c       	adc	r8, r8
    167e:	99 1c       	adc	r9, r9
    1680:	ee 1f       	adc	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	cc 1f       	adc	r28, r28
    1686:	dd 1f       	adc	r29, r29
    1688:	aa 1f       	adc	r26, r26
    168a:	bb 1f       	adc	r27, r27
    168c:	8a 14       	cp	r8, r10
    168e:	9b 04       	cpc	r9, r11
    1690:	ec 05       	cpc	r30, r12
    1692:	fd 05       	cpc	r31, r13
    1694:	ce 05       	cpc	r28, r14
    1696:	df 05       	cpc	r29, r15
    1698:	a0 07       	cpc	r26, r16
    169a:	b1 07       	cpc	r27, r17
    169c:	48 f0       	brcs	.+18     	; 0x16b0 <__udivmod64+0x6c>
    169e:	8a 18       	sub	r8, r10
    16a0:	9b 08       	sbc	r9, r11
    16a2:	ec 09       	sbc	r30, r12
    16a4:	fd 09       	sbc	r31, r13
    16a6:	ce 09       	sbc	r28, r14
    16a8:	df 09       	sbc	r29, r15
    16aa:	a0 0b       	sbc	r26, r16
    16ac:	b1 0b       	sbc	r27, r17
    16ae:	21 60       	ori	r18, 0x01	; 1
    16b0:	1a 94       	dec	r1
    16b2:	e1 f6       	brne	.-72     	; 0x166c <__udivmod64+0x28>
    16b4:	2e f4       	brtc	.+10     	; 0x16c0 <__udivmod64+0x7c>
    16b6:	94 01       	movw	r18, r8
    16b8:	af 01       	movw	r20, r30
    16ba:	be 01       	movw	r22, r28
    16bc:	cd 01       	movw	r24, r26
    16be:	00 0c       	add	r0, r0
    16c0:	08 95       	ret

000016c2 <__negdi2>:
    16c2:	60 95       	com	r22
    16c4:	70 95       	com	r23
    16c6:	80 95       	com	r24
    16c8:	90 95       	com	r25
    16ca:	30 95       	com	r19
    16cc:	40 95       	com	r20
    16ce:	50 95       	com	r21
    16d0:	21 95       	neg	r18
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	4f 4f       	sbci	r20, 0xFF	; 255
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	6f 4f       	sbci	r22, 0xFF	; 255
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	8f 4f       	sbci	r24, 0xFF	; 255
    16de:	9f 4f       	sbci	r25, 0xFF	; 255
    16e0:	08 95       	ret

000016e2 <__prologue_saves__>:
    16e2:	2f 92       	push	r2
    16e4:	3f 92       	push	r3
    16e6:	4f 92       	push	r4
    16e8:	5f 92       	push	r5
    16ea:	6f 92       	push	r6
    16ec:	7f 92       	push	r7
    16ee:	8f 92       	push	r8
    16f0:	9f 92       	push	r9
    16f2:	af 92       	push	r10
    16f4:	bf 92       	push	r11
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	ca 1b       	sub	r28, r26
    170c:	db 0b       	sbc	r29, r27
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	09 94       	ijmp

0000171a <__epilogue_restores__>:
    171a:	2a 88       	ldd	r2, Y+18	; 0x12
    171c:	39 88       	ldd	r3, Y+17	; 0x11
    171e:	48 88       	ldd	r4, Y+16	; 0x10
    1720:	5f 84       	ldd	r5, Y+15	; 0x0f
    1722:	6e 84       	ldd	r6, Y+14	; 0x0e
    1724:	7d 84       	ldd	r7, Y+13	; 0x0d
    1726:	8c 84       	ldd	r8, Y+12	; 0x0c
    1728:	9b 84       	ldd	r9, Y+11	; 0x0b
    172a:	aa 84       	ldd	r10, Y+10	; 0x0a
    172c:	b9 84       	ldd	r11, Y+9	; 0x09
    172e:	c8 84       	ldd	r12, Y+8	; 0x08
    1730:	df 80       	ldd	r13, Y+7	; 0x07
    1732:	ee 80       	ldd	r14, Y+6	; 0x06
    1734:	fd 80       	ldd	r15, Y+5	; 0x05
    1736:	0c 81       	ldd	r16, Y+4	; 0x04
    1738:	1b 81       	ldd	r17, Y+3	; 0x03
    173a:	aa 81       	ldd	r26, Y+2	; 0x02
    173c:	b9 81       	ldd	r27, Y+1	; 0x01
    173e:	ce 0f       	add	r28, r30
    1740:	d1 1d       	adc	r29, r1
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	ed 01       	movw	r28, r26
    174e:	08 95       	ret

00001750 <__ashldi3>:
    1750:	0f 93       	push	r16
    1752:	08 30       	cpi	r16, 0x08	; 8
    1754:	90 f0       	brcs	.+36     	; 0x177a <__ashldi3+0x2a>
    1756:	98 2f       	mov	r25, r24
    1758:	87 2f       	mov	r24, r23
    175a:	76 2f       	mov	r23, r22
    175c:	65 2f       	mov	r22, r21
    175e:	54 2f       	mov	r21, r20
    1760:	43 2f       	mov	r20, r19
    1762:	32 2f       	mov	r19, r18
    1764:	22 27       	eor	r18, r18
    1766:	08 50       	subi	r16, 0x08	; 8
    1768:	f4 cf       	rjmp	.-24     	; 0x1752 <__ashldi3+0x2>
    176a:	22 0f       	add	r18, r18
    176c:	33 1f       	adc	r19, r19
    176e:	44 1f       	adc	r20, r20
    1770:	55 1f       	adc	r21, r21
    1772:	66 1f       	adc	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 95       	dec	r16
    177c:	b2 f7       	brpl	.-20     	; 0x176a <__ashldi3+0x1a>
    177e:	0f 91       	pop	r16
    1780:	08 95       	ret

00001782 <__ashrdi3>:
    1782:	97 fb       	bst	r25, 7
    1784:	10 f8       	bld	r1, 0

00001786 <__lshrdi3>:
    1786:	16 94       	lsr	r1
    1788:	00 08       	sbc	r0, r0
    178a:	0f 93       	push	r16
    178c:	08 30       	cpi	r16, 0x08	; 8
    178e:	98 f0       	brcs	.+38     	; 0x17b6 <__lshrdi3+0x30>
    1790:	08 50       	subi	r16, 0x08	; 8
    1792:	23 2f       	mov	r18, r19
    1794:	34 2f       	mov	r19, r20
    1796:	45 2f       	mov	r20, r21
    1798:	56 2f       	mov	r21, r22
    179a:	67 2f       	mov	r22, r23
    179c:	78 2f       	mov	r23, r24
    179e:	89 2f       	mov	r24, r25
    17a0:	90 2d       	mov	r25, r0
    17a2:	f4 cf       	rjmp	.-24     	; 0x178c <__lshrdi3+0x6>
    17a4:	05 94       	asr	r0
    17a6:	97 95       	ror	r25
    17a8:	87 95       	ror	r24
    17aa:	77 95       	ror	r23
    17ac:	67 95       	ror	r22
    17ae:	57 95       	ror	r21
    17b0:	47 95       	ror	r20
    17b2:	37 95       	ror	r19
    17b4:	27 95       	ror	r18
    17b6:	0a 95       	dec	r16
    17b8:	aa f7       	brpl	.-22     	; 0x17a4 <__lshrdi3+0x1e>
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <__adddi3>:
    17be:	2a 0d       	add	r18, r10
    17c0:	3b 1d       	adc	r19, r11
    17c2:	4c 1d       	adc	r20, r12
    17c4:	5d 1d       	adc	r21, r13
    17c6:	6e 1d       	adc	r22, r14
    17c8:	7f 1d       	adc	r23, r15
    17ca:	80 1f       	adc	r24, r16
    17cc:	91 1f       	adc	r25, r17
    17ce:	08 95       	ret

000017d0 <__adddi3_s8>:
    17d0:	00 24       	eor	r0, r0
    17d2:	a7 fd       	sbrc	r26, 7
    17d4:	00 94       	com	r0
    17d6:	2a 0f       	add	r18, r26
    17d8:	30 1d       	adc	r19, r0
    17da:	40 1d       	adc	r20, r0
    17dc:	50 1d       	adc	r21, r0
    17de:	60 1d       	adc	r22, r0
    17e0:	70 1d       	adc	r23, r0
    17e2:	80 1d       	adc	r24, r0
    17e4:	90 1d       	adc	r25, r0
    17e6:	08 95       	ret

000017e8 <__subdi3>:
    17e8:	2a 19       	sub	r18, r10
    17ea:	3b 09       	sbc	r19, r11
    17ec:	4c 09       	sbc	r20, r12
    17ee:	5d 09       	sbc	r21, r13
    17f0:	6e 09       	sbc	r22, r14
    17f2:	7f 09       	sbc	r23, r15
    17f4:	80 0b       	sbc	r24, r16
    17f6:	91 0b       	sbc	r25, r17
    17f8:	08 95       	ret

000017fa <__cmpdi2>:
    17fa:	2a 15       	cp	r18, r10
    17fc:	3b 05       	cpc	r19, r11
    17fe:	4c 05       	cpc	r20, r12
    1800:	5d 05       	cpc	r21, r13
    1802:	6e 05       	cpc	r22, r14
    1804:	7f 05       	cpc	r23, r15
    1806:	80 07       	cpc	r24, r16
    1808:	91 07       	cpc	r25, r17
    180a:	08 95       	ret

0000180c <_exit>:
    180c:	f8 94       	cli

0000180e <__stop_program>:
    180e:	ff cf       	rjmp	.-2      	; 0x180e <__stop_program>
