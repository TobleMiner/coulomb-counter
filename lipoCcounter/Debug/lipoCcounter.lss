
lipoCcounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000005fe  00000692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800062  00800062  00000694  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000045d  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000255  00000000  00000000  00000bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038d  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000314  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ea  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	77 c0       	rjmp	.+238    	; 0x100 <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	cf c0       	rjmp	.+414    	; 0x1ba <__vector_13>
  1c:	e9 c0       	rjmp	.+466    	; 0x1f0 <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ee ef       	ldi	r30, 0xFE	; 254
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 37       	cpi	r26, 0x76	; 118
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	d3 c2       	rjmp	.+1446   	; 0x5fa <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
};

int main(void)
{
	// Init differential ADC
	ADMUX  = BIT(REFS1) | BIT(MUX2) | BIT(MUX1) | BIT(MUX0);
  56:	87 e8       	ldi	r24, 0x87	; 135
  58:	87 b9       	out	0x07, r24	; 7
	ADCSRA = BIT(ADEN) | BIT(ADSC) | BIT(ADIE) | BIT(ADATE) | BIT(ADPS0) | BIT(ADPS1) | BIT(ADPS2);
  5a:	8f ee       	ldi	r24, 0xEF	; 239
  5c:	86 b9       	out	0x06, r24	; 6
	ADCSRB = BIT(BIN);
  5e:	80 e8       	ldi	r24, 0x80	; 128
  60:	83 b9       	out	0x03, r24	; 3
	DIDR0  = BIT(ADC2D) | BIT(ADC3D);
  62:	88 e1       	ldi	r24, 0x18	; 24
  64:	84 bb       	out	0x14, r24	; 20
/*
	flags.adc = 0;
	adc_cnt = 0;
	adcs = 0;
*/
	USI_I2C_Init(0x42, regs, sizeof(regs) / sizeof(*regs));
  66:	41 e0       	ldi	r20, 0x01	; 1
  68:	60 e6       	ldi	r22, 0x60	; 96
  6a:	70 e0       	ldi	r23, 0x00	; 0
  6c:	82 e4       	ldi	r24, 0x42	; 66
  6e:	8e d0       	rcall	.+284    	; 0x18c <USI_I2C_Init>
	sei();
  70:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		set_sleep_mode(SLEEP_MODE_IDLE);
  72:	85 b7       	in	r24, 0x35	; 53
  74:	87 7e       	andi	r24, 0xE7	; 231
  76:	85 bf       	out	0x35, r24	; 53
		sleep_enable();
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
  7e:	88 95       	sleep
		if(flags.adc) {
  80:	80 91 6d 00 	lds	r24, 0x006D
  84:	80 ff       	sbrs	r24, 0
  86:	f5 cf       	rjmp	.-22     	; 0x72 <main+0x1c>
			flags.adc = 0;
  88:	80 91 6d 00 	lds	r24, 0x006D
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	80 93 6d 00 	sts	0x006D, r24
			dU_millivolt = adcs / 20.0 * 1100.0 / 512.0 / ADC_SAMPLES;
  92:	60 91 63 00 	lds	r22, 0x0063
  96:	70 91 64 00 	lds	r23, 0x0064
  9a:	07 2e       	mov	r0, r23
  9c:	00 0c       	add	r0, r0
  9e:	88 0b       	sbc	r24, r24
  a0:	99 0b       	sbc	r25, r25
  a2:	b4 d1       	rcall	.+872    	; 0x40c <__floatsisf>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	40 ea       	ldi	r20, 0xA0	; 160
  aa:	51 e4       	ldi	r21, 0x41	; 65
  ac:	45 d1       	rcall	.+650    	; 0x338 <__divsf3>
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e8       	ldi	r19, 0x80	; 128
  b2:	49 e8       	ldi	r20, 0x89	; 137
  b4:	54 e4       	ldi	r21, 0x44	; 68
  b6:	36 d2       	rcall	.+1132   	; 0x524 <__mulsf3>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	5b e3       	ldi	r21, 0x3B	; 59
  c0:	31 d2       	rcall	.+1122   	; 0x524 <__mulsf3>
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	5d e3       	ldi	r21, 0x3D	; 61
  ca:	2c d2       	rcall	.+1112   	; 0x524 <__mulsf3>
  cc:	60 93 69 00 	sts	0x0069, r22
  d0:	70 93 6a 00 	sts	0x006A, r23
  d4:	80 93 6b 00 	sts	0x006B, r24
  d8:	90 93 6c 00 	sts	0x006C, r25
			adcs = 0;
  dc:	10 92 64 00 	sts	0x0064, r1
  e0:	10 92 63 00 	sts	0x0063, r1
  e4:	c6 cf       	rjmp	.-116    	; 0x72 <main+0x1c>

000000e6 <adc_val_bipo>:
		}
    }
}

int16_t adc_val_bipo() {
	int16_t raw = ADCL | (ADCH << 8);
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	25 b1       	in	r18, 0x05	; 5
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	92 2b       	or	r25, r18
	if(raw & BIT(9)) {
  ee:	91 ff       	sbrs	r25, 1
  f0:	06 c0       	rjmp	.+12     	; 0xfe <adc_val_bipo+0x18>
		raw = -((~raw) & 0b111111111);
  f2:	80 95       	com	r24
  f4:	90 95       	com	r25
  f6:	91 70       	andi	r25, 0x01	; 1
  f8:	91 95       	neg	r25
  fa:	81 95       	neg	r24
  fc:	91 09       	sbc	r25, r1
	}
	return raw;
}
  fe:	08 95       	ret

00000100 <__vector_8>:

ISR(ADC_vect) {
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	adcs += adc_val_bipo();
 122:	e1 df       	rcall	.-62     	; 0xe6 <adc_val_bipo>
 124:	20 91 63 00 	lds	r18, 0x0063
 128:	30 91 64 00 	lds	r19, 0x0064
 12c:	82 0f       	add	r24, r18
 12e:	93 1f       	adc	r25, r19
 130:	90 93 64 00 	sts	0x0064, r25
 134:	80 93 63 00 	sts	0x0063, r24
	adc_cnt++;
 138:	80 91 65 00 	lds	r24, 0x0065
 13c:	90 91 66 00 	lds	r25, 0x0066
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	90 93 66 00 	sts	0x0066, r25
 146:	80 93 65 00 	sts	0x0065, r24
	if(adc_cnt >= ADC_SAMPLES) {
 14a:	80 91 65 00 	lds	r24, 0x0065
 14e:	90 91 66 00 	lds	r25, 0x0066
 152:	80 97       	sbiw	r24, 0x20	; 32
 154:	50 f0       	brcs	.+20     	; 0x16a <__vector_8+0x6a>
		adc_cnt = 0;
 156:	10 92 66 00 	sts	0x0066, r1
 15a:	10 92 65 00 	sts	0x0065, r1
		flags.adc = 1;	
 15e:	80 91 6d 00 	lds	r24, 0x006D
 162:	81 60       	ori	r24, 0x01	; 1
 164:	80 93 6d 00 	sts	0x006D, r24
		ADCSRA &= ~BIT(ADATE);
 168:	35 98       	cbi	0x06, 5	; 6
	}
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <USI_I2C_Init>:
#define USI_SET_BOTH_INPUT() 	{ DDR_USI &= ~((1 << PORT_USI_SDA) | (1 << PORT_USI_SCL)); }

////////////////////////////////////////////////////////////////////////////////////////////////////

void USI_I2C_Init(char address, struct UCI_ISC_Reg** regs, uint8_t num_regs) {
	usi_i2c_flags.reg_set = 0;
 18c:	90 91 75 00 	lds	r25, 0x0075
 190:	9e 7f       	andi	r25, 0xFE	; 254
 192:	90 93 75 00 	sts	0x0075, r25
	
	PORT_USI &= ~(1 << PORT_USI_SCL);
 196:	c2 98       	cbi	0x18, 2	; 24
	PORT_USI &= ~(1 << PORT_USI_SDA);
 198:	c0 98       	cbi	0x18, 0	; 24

	usi_i2c_slave_address = address;
 19a:	80 93 70 00 	sts	0x0070, r24
	usi_i2c_regs = regs;
 19e:	70 93 6f 00 	sts	0x006F, r23
 1a2:	60 93 6e 00 	sts	0x006E, r22
	usi_i2c_num_regs = num_regs;
 1a6:	40 93 71 00 	sts	0x0071, r20

	USI_SET_BOTH_INPUT();
 1aa:	87 b3       	in	r24, 0x17	; 23
 1ac:	8a 7f       	andi	r24, 0xFA	; 250
 1ae:	87 bb       	out	0x17, r24	; 23
	
	USICR = (1 << USISIE) | (0 << USIOIE) | (1 << USIWM1) | (0 << USIWM0) | (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | (0 << USITC);
 1b0:	88 ea       	ldi	r24, 0xA8	; 168
 1b2:	8d b9       	out	0x0d, r24	; 13
	USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC);
 1b4:	80 ef       	ldi	r24, 0xF0	; 240
 1b6:	8e b9       	out	0x0e, r24	; 14
 1b8:	08 95       	ret

000001ba <__vector_13>:
//  (enough for the address/rw byte to be transmitted) before overflowing and  //
//  triggering the first state table interrupt.  If a stop condition occurs,   //
//  reset the start condition detector to detect the next start condition.     //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_START_vect) {
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
	USI_I2C_Slave_State = USI_SLAVE_CHECK_ADDRESS;
 1c6:	10 92 73 00 	sts	0x0073, r1

	USI_SET_SDA_INPUT();
 1ca:	b8 98       	cbi	0x17, 0	; 23
	// wait for SCL to go low to ensure the Start Condition has completed (the
	// start detector will hold SCL low ) - if a Stop Condition arises then leave
	// the interrupt to prevent waiting forever - don't use USISR to test for Stop
	// Condition as in Application Note AVR312 because the Stop Condition Flag is
	// going to be set from the last TWI sequence
	while((PIN_USI & (1 << PIN_USI_SCL)) && !((PIN_USI & (1 << PIN_USI_SDA))));
 1cc:	b2 9b       	sbis	0x16, 2	; 22
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_13+0x1a>
 1d0:	b0 9b       	sbis	0x16, 0	; 22
 1d2:	fc cf       	rjmp	.-8      	; 0x1cc <__vector_13+0x12>

	if(!(PIN_USI & (1 << PIN_USI_SDA)))
 1d4:	b0 99       	sbic	0x16, 0	; 22
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__vector_13+0x22>
	{
		// a Stop Condition did not occur
		USICR = USI_SLAVE_STOP_NOT_OCCUR_USICR;
 1d8:	88 ee       	ldi	r24, 0xE8	; 232
 1da:	01 c0       	rjmp	.+2      	; 0x1de <__vector_13+0x24>

	} else {
		// a Stop Condition did occur
    	USICR = USI_SLAVE_STOP_DID_OCCUR_USICR;
 1dc:	88 eb       	ldi	r24, 0xB8	; 184
 1de:	8d b9       	out	0x0d, r24	; 13
	}

	USISR = USI_SLAVE_CLEAR_START_USISR;
 1e0:	80 ef       	ldi	r24, 0xF0	; 240
 1e2:	8e b9       	out	0x0e, r24	; 14
}
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_14>:
//  set the counter to 1 (actually -1, or 0x0E) it will wait one clock.        //
//  This is used to set up a state table of I2C transmission states that fits  //
//  the I2C protocol for proper transmission.                                  //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_OVF_vect) {
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	switch (USI_I2C_Slave_State) {
 206:	80 91 73 00 	lds	r24, 0x0073
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	39 f1       	breq	.+78     	; 0x25c <__vector_14+0x6c>
 20e:	28 f4       	brcc	.+10     	; 0x21a <__vector_14+0x2a>
 210:	88 23       	and	r24, r24
 212:	59 f0       	breq	.+22     	; 0x22a <__vector_14+0x3a>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	71 f1       	breq	.+92     	; 0x274 <__stack+0x15>
 218:	84 c0       	rjmp	.+264    	; 0x322 <__stack+0xc3>
 21a:	84 30       	cpi	r24, 0x04	; 4
 21c:	09 f4       	brne	.+2      	; 0x220 <__vector_14+0x30>
 21e:	4f c0       	rjmp	.+158    	; 0x2be <__stack+0x5f>
 220:	18 f1       	brcs	.+70     	; 0x268 <__stack+0x9>
 222:	85 30       	cpi	r24, 0x05	; 5
 224:	09 f4       	brne	.+2      	; 0x228 <__vector_14+0x38>
 226:	51 c0       	rjmp	.+162    	; 0x2ca <__stack+0x6b>
 228:	7c c0       	rjmp	.+248    	; 0x322 <__stack+0xc3>
		//  If the address was not for this device, the USI system is          //
		//  re-initialized for start condition.                                //
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_CHECK_ADDRESS:
			if((USIDR == 0) || ((USIDR >> 1) == usi_i2c_slave_address)) {
 22a:	8f b1       	in	r24, 0x0f	; 15
 22c:	88 23       	and	r24, r24
 22e:	31 f0       	breq	.+12     	; 0x23c <__vector_14+0x4c>
 230:	8f b1       	in	r24, 0x0f	; 15
 232:	86 95       	lsr	r24
 234:	90 91 70 00 	lds	r25, 0x0070
 238:	89 13       	cpse	r24, r25
 23a:	19 c0       	rjmp	.+50     	; 0x26e <__stack+0xf>
				usi_i2c_flags.reg_read = 0;
 23c:	80 91 75 00 	lds	r24, 0x0075
 240:	8d 7f       	andi	r24, 0xFD	; 253
 242:	80 93 75 00 	sts	0x0075, r24
				if (USIDR & 0x01) {
 246:	78 9b       	sbis	0x0f, 0	; 15
 248:	02 c0       	rjmp	.+4      	; 0x24e <__vector_14+0x5e>
					USI_I2C_Slave_State = USI_SLAVE_SEND_DATA;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	04 c0       	rjmp	.+8      	; 0x256 <__vector_14+0x66>
				} else {
					usi_i2c_flags.reg_set = 0;
 24e:	8e 7f       	andi	r24, 0xFE	; 254
 250:	80 93 75 00 	sts	0x0075, r24
					USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_WAIT;
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	80 93 73 00 	sts	0x0073, r24
 25a:	5f c0       	rjmp	.+190    	; 0x31a <__stack+0xbb>
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA_ACK_WAIT:
			//After sending, immediately shut off PORT = 1 to prevent driving
			//the line high (I2C should *NEVER* drive high, and could damage
			//connected devices if operating at different voltage levels)
			PORT_USI &= ~(1 << PORT_USI_SDA);
 25c:	c0 98       	cbi	0x18, 0	; 24


			USI_I2C_Slave_State = USI_SLAVE_SEND_DATA_ACK_CHECK;
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	80 93 73 00 	sts	0x0073, r24
			USI_SET_SDA_INPUT();
 264:	b8 98       	cbi	0x17, 0	; 23
 266:	5b c0       	rjmp	.+182    	; 0x31e <__stack+0xbf>
		//  Check USIDR to see if master sent ACK or NACK.  If NACK, set up    //
		//  a reset to START conditions, if ACK, fall through into SEND_DATA   //
		//  to continue sending data.                                          //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA_ACK_CHECK:
			if(USIDR) {
 268:	8f b1       	in	r24, 0x0f	; 15
 26a:	88 23       	and	r24, r24
 26c:	19 f0       	breq	.+6      	; 0x274 <__stack+0x15>
				//The master sent a NACK, indicating that it will not accept
				//more data.  Reset into START condition state
				USICR = USI_SLAVE_SET_START_COND_USICR;
 26e:	88 ea       	ldi	r24, 0xA8	; 168
 270:	8d b9       	out	0x0d, r24	; 13
 272:	29 c0       	rjmp	.+82     	; 0x2c6 <__stack+0x67>
		//  Set USIDR to the data to be sent, then set up SDA registers to     //
		//  enable data transmission in the next 8 clocks.  Set to wait 8      //
		//  clocks and proceed to wait for ACK.                                //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA:
			if(active_reg < usi_i2c_num_regs && !usi_i2c_flags.reg_read) {
 274:	e0 91 62 00 	lds	r30, 0x0062
 278:	80 91 71 00 	lds	r24, 0x0071
 27c:	e8 17       	cp	r30, r24
 27e:	c0 f4       	brcc	.+48     	; 0x2b0 <__stack+0x51>
 280:	80 91 75 00 	lds	r24, 0x0075
 284:	81 fd       	sbrc	r24, 1
 286:	14 c0       	rjmp	.+40     	; 0x2b0 <__stack+0x51>
				USIDR = usi_i2c_regs[active_reg]->data;
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ee 0f       	add	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	80 91 6e 00 	lds	r24, 0x006E
 292:	90 91 6f 00 	lds	r25, 0x006F
 296:	e8 0f       	add	r30, r24
 298:	f9 1f       	adc	r31, r25
 29a:	01 90       	ld	r0, Z+
 29c:	f0 81       	ld	r31, Z
 29e:	e0 2d       	mov	r30, r0
 2a0:	81 81       	ldd	r24, Z+1	; 0x01
 2a2:	8f b9       	out	0x0f, r24	; 15
				usi_i2c_flags.reg_read = 1;
 2a4:	80 91 75 00 	lds	r24, 0x0075
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	80 93 75 00 	sts	0x0075, r24
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <__stack+0x53>
			} else {
				USIDR = 0x00;
 2b0:	1f b8       	out	0x0f, r1	; 15
			}

			USI_I2C_Slave_State = USI_SLAVE_SEND_DATA_ACK_WAIT;
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	80 93 73 00 	sts	0x0073, r24

			//To send data, DDR for SDA must be 1 (Output) and PORT for SDA
			//must also be 1 (line drives low on USIDR MSB = 0 or PORT = 0)
			USI_SET_SDA_OUTPUT();
 2b8:	b8 9a       	sbi	0x17, 0	; 23
			PORT_USI |= (1 << PORT_USI_SDA);
 2ba:	c0 9a       	sbi	0x18, 0	; 24
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__stack+0x67>
		//                                                                     //
		//  Prepares to wait 8 clocks to receive a data byte from the master.  //
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_RECV_DATA_WAIT:
			USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_ACK_SEND;
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	80 93 73 00 	sts	0x0073, r24
			USI_SET_SDA_INPUT();
 2c4:	b8 98       	cbi	0x17, 0	; 23
			USISR = USI_SLAVE_COUNT_BYTE_USISR;
 2c6:	80 e7       	ldi	r24, 0x70	; 112
 2c8:	2b c0       	rjmp	.+86     	; 0x320 <__stack+0xc1>
		//  USIDR into either the i2c buffer or internal address, then sends   //
		//  an acknowledgement to the master.                                  //
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_RECV_DATA_ACK_SEND:
			USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_WAIT;
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	80 93 73 00 	sts	0x0073, r24
			if(!usi_i2c_flags.reg_set) {
 2d0:	80 91 75 00 	lds	r24, 0x0075
 2d4:	80 fd       	sbrc	r24, 0
 2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <__stack+0x87>
				active_reg = USIDR;
 2d8:	9f b1       	in	r25, 0x0f	; 15
 2da:	90 93 62 00 	sts	0x0062, r25
				usi_i2c_flags.reg_set = 1;
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	80 93 75 00 	sts	0x0075, r24
 2e4:	1a c0       	rjmp	.+52     	; 0x31a <__stack+0xbb>
			} else if(active_reg < usi_i2c_num_regs) {
 2e6:	e0 91 62 00 	lds	r30, 0x0062
 2ea:	80 91 71 00 	lds	r24, 0x0071
 2ee:	e8 17       	cp	r30, r24
 2f0:	a0 f4       	brcc	.+40     	; 0x31a <__stack+0xbb>
				usi_i2c_regs[active_reg]->data = USIDR;
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	80 91 6e 00 	lds	r24, 0x006E
 2fc:	90 91 6f 00 	lds	r25, 0x006F
 300:	e8 0f       	add	r30, r24
 302:	f9 1f       	adc	r31, r25
 304:	a0 81       	ld	r26, Z
 306:	b1 81       	ldd	r27, Z+1	; 0x01
 308:	8f b1       	in	r24, 0x0f	; 15
 30a:	11 96       	adiw	r26, 0x01	; 1
 30c:	8c 93       	st	X, r24
				usi_i2c_regs[active_reg]->attr.changed = 1;
 30e:	01 90       	ld	r0, Z+
 310:	f0 81       	ld	r31, Z
 312:	e0 2d       	mov	r30, r0
 314:	80 81       	ld	r24, Z
 316:	81 60       	ori	r24, 0x01	; 1
 318:	80 83       	st	Z, r24
			}
			
			USIDR = 0;
 31a:	1f b8       	out	0x0f, r1	; 15
			USI_SET_SDA_OUTPUT();
 31c:	b8 9a       	sbi	0x17, 0	; 23
			USISR = USI_SLAVE_COUNT_ACK_USISR;
 31e:	8e e7       	ldi	r24, 0x7E	; 126
 320:	8e b9       	out	0x0e, r24	; 14
			break;
	}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__divsf3>:
 338:	0c d0       	rcall	.+24     	; 0x352 <__divsf3x>
 33a:	ba c0       	rjmp	.+372    	; 0x4b0 <__fp_round>
 33c:	b2 d0       	rcall	.+356    	; 0x4a2 <__fp_pscB>
 33e:	40 f0       	brcs	.+16     	; 0x350 <__divsf3+0x18>
 340:	a9 d0       	rcall	.+338    	; 0x494 <__fp_pscA>
 342:	30 f0       	brcs	.+12     	; 0x350 <__divsf3+0x18>
 344:	21 f4       	brne	.+8      	; 0x34e <__divsf3+0x16>
 346:	5f 3f       	cpi	r21, 0xFF	; 255
 348:	19 f0       	breq	.+6      	; 0x350 <__divsf3+0x18>
 34a:	9b c0       	rjmp	.+310    	; 0x482 <__fp_inf>
 34c:	51 11       	cpse	r21, r1
 34e:	e4 c0       	rjmp	.+456    	; 0x518 <__fp_szero>
 350:	9e c0       	rjmp	.+316    	; 0x48e <__fp_nan>

00000352 <__divsf3x>:
 352:	bf d0       	rcall	.+382    	; 0x4d2 <__fp_split3>
 354:	98 f3       	brcs	.-26     	; 0x33c <__divsf3+0x4>

00000356 <__divsf3_pse>:
 356:	99 23       	and	r25, r25
 358:	c9 f3       	breq	.-14     	; 0x34c <__divsf3+0x14>
 35a:	55 23       	and	r21, r21
 35c:	b1 f3       	breq	.-20     	; 0x34a <__divsf3+0x12>
 35e:	95 1b       	sub	r25, r21
 360:	55 0b       	sbc	r21, r21
 362:	bb 27       	eor	r27, r27
 364:	aa 27       	eor	r26, r26
 366:	62 17       	cp	r22, r18
 368:	73 07       	cpc	r23, r19
 36a:	84 07       	cpc	r24, r20
 36c:	38 f0       	brcs	.+14     	; 0x37c <__divsf3_pse+0x26>
 36e:	9f 5f       	subi	r25, 0xFF	; 255
 370:	5f 4f       	sbci	r21, 0xFF	; 255
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	44 1f       	adc	r20, r20
 378:	aa 1f       	adc	r26, r26
 37a:	a9 f3       	breq	.-22     	; 0x366 <__divsf3_pse+0x10>
 37c:	33 d0       	rcall	.+102    	; 0x3e4 <__divsf3_pse+0x8e>
 37e:	0e 2e       	mov	r0, r30
 380:	3a f0       	brmi	.+14     	; 0x390 <__divsf3_pse+0x3a>
 382:	e0 e8       	ldi	r30, 0x80	; 128
 384:	30 d0       	rcall	.+96     	; 0x3e6 <__divsf3_pse+0x90>
 386:	91 50       	subi	r25, 0x01	; 1
 388:	50 40       	sbci	r21, 0x00	; 0
 38a:	e6 95       	lsr	r30
 38c:	00 1c       	adc	r0, r0
 38e:	ca f7       	brpl	.-14     	; 0x382 <__divsf3_pse+0x2c>
 390:	29 d0       	rcall	.+82     	; 0x3e4 <__divsf3_pse+0x8e>
 392:	fe 2f       	mov	r31, r30
 394:	27 d0       	rcall	.+78     	; 0x3e4 <__divsf3_pse+0x8e>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	88 1f       	adc	r24, r24
 39c:	bb 1f       	adc	r27, r27
 39e:	26 17       	cp	r18, r22
 3a0:	37 07       	cpc	r19, r23
 3a2:	48 07       	cpc	r20, r24
 3a4:	ab 07       	cpc	r26, r27
 3a6:	b0 e8       	ldi	r27, 0x80	; 128
 3a8:	09 f0       	breq	.+2      	; 0x3ac <__divsf3_pse+0x56>
 3aa:	bb 0b       	sbc	r27, r27
 3ac:	80 2d       	mov	r24, r0
 3ae:	bf 01       	movw	r22, r30
 3b0:	ff 27       	eor	r31, r31
 3b2:	93 58       	subi	r25, 0x83	; 131
 3b4:	5f 4f       	sbci	r21, 0xFF	; 255
 3b6:	2a f0       	brmi	.+10     	; 0x3c2 <__divsf3_pse+0x6c>
 3b8:	9e 3f       	cpi	r25, 0xFE	; 254
 3ba:	51 05       	cpc	r21, r1
 3bc:	68 f0       	brcs	.+26     	; 0x3d8 <__divsf3_pse+0x82>
 3be:	61 c0       	rjmp	.+194    	; 0x482 <__fp_inf>
 3c0:	ab c0       	rjmp	.+342    	; 0x518 <__fp_szero>
 3c2:	5f 3f       	cpi	r21, 0xFF	; 255
 3c4:	ec f3       	brlt	.-6      	; 0x3c0 <__divsf3_pse+0x6a>
 3c6:	98 3e       	cpi	r25, 0xE8	; 232
 3c8:	dc f3       	brlt	.-10     	; 0x3c0 <__divsf3_pse+0x6a>
 3ca:	86 95       	lsr	r24
 3cc:	77 95       	ror	r23
 3ce:	67 95       	ror	r22
 3d0:	b7 95       	ror	r27
 3d2:	f7 95       	ror	r31
 3d4:	9f 5f       	subi	r25, 0xFF	; 255
 3d6:	c9 f7       	brne	.-14     	; 0x3ca <__divsf3_pse+0x74>
 3d8:	88 0f       	add	r24, r24
 3da:	91 1d       	adc	r25, r1
 3dc:	96 95       	lsr	r25
 3de:	87 95       	ror	r24
 3e0:	97 f9       	bld	r25, 7
 3e2:	08 95       	ret
 3e4:	e1 e0       	ldi	r30, 0x01	; 1
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	bb 1f       	adc	r27, r27
 3ee:	62 17       	cp	r22, r18
 3f0:	73 07       	cpc	r23, r19
 3f2:	84 07       	cpc	r24, r20
 3f4:	ba 07       	cpc	r27, r26
 3f6:	20 f0       	brcs	.+8      	; 0x400 <__FUSE_REGION_LENGTH__>
 3f8:	62 1b       	sub	r22, r18
 3fa:	73 0b       	sbc	r23, r19
 3fc:	84 0b       	sbc	r24, r20
 3fe:	ba 0b       	sbc	r27, r26
 400:	ee 1f       	adc	r30, r30
 402:	88 f7       	brcc	.-30     	; 0x3e6 <__divsf3_pse+0x90>
 404:	e0 95       	com	r30
 406:	08 95       	ret

00000408 <__floatunsisf>:
 408:	e8 94       	clt
 40a:	09 c0       	rjmp	.+18     	; 0x41e <__floatsisf+0x12>

0000040c <__floatsisf>:
 40c:	97 fb       	bst	r25, 7
 40e:	3e f4       	brtc	.+14     	; 0x41e <__floatsisf+0x12>
 410:	90 95       	com	r25
 412:	80 95       	com	r24
 414:	70 95       	com	r23
 416:	61 95       	neg	r22
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	8f 4f       	sbci	r24, 0xFF	; 255
 41c:	9f 4f       	sbci	r25, 0xFF	; 255
 41e:	99 23       	and	r25, r25
 420:	a9 f0       	breq	.+42     	; 0x44c <__floatsisf+0x40>
 422:	f9 2f       	mov	r31, r25
 424:	96 e9       	ldi	r25, 0x96	; 150
 426:	bb 27       	eor	r27, r27
 428:	93 95       	inc	r25
 42a:	f6 95       	lsr	r31
 42c:	87 95       	ror	r24
 42e:	77 95       	ror	r23
 430:	67 95       	ror	r22
 432:	b7 95       	ror	r27
 434:	f1 11       	cpse	r31, r1
 436:	f8 cf       	rjmp	.-16     	; 0x428 <__floatsisf+0x1c>
 438:	fa f4       	brpl	.+62     	; 0x478 <__floatsisf+0x6c>
 43a:	bb 0f       	add	r27, r27
 43c:	11 f4       	brne	.+4      	; 0x442 <__floatsisf+0x36>
 43e:	60 ff       	sbrs	r22, 0
 440:	1b c0       	rjmp	.+54     	; 0x478 <__floatsisf+0x6c>
 442:	6f 5f       	subi	r22, 0xFF	; 255
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	8f 4f       	sbci	r24, 0xFF	; 255
 448:	9f 4f       	sbci	r25, 0xFF	; 255
 44a:	16 c0       	rjmp	.+44     	; 0x478 <__floatsisf+0x6c>
 44c:	88 23       	and	r24, r24
 44e:	11 f0       	breq	.+4      	; 0x454 <__floatsisf+0x48>
 450:	96 e9       	ldi	r25, 0x96	; 150
 452:	11 c0       	rjmp	.+34     	; 0x476 <__floatsisf+0x6a>
 454:	77 23       	and	r23, r23
 456:	21 f0       	breq	.+8      	; 0x460 <__floatsisf+0x54>
 458:	9e e8       	ldi	r25, 0x8E	; 142
 45a:	87 2f       	mov	r24, r23
 45c:	76 2f       	mov	r23, r22
 45e:	05 c0       	rjmp	.+10     	; 0x46a <__floatsisf+0x5e>
 460:	66 23       	and	r22, r22
 462:	71 f0       	breq	.+28     	; 0x480 <__floatsisf+0x74>
 464:	96 e8       	ldi	r25, 0x86	; 134
 466:	86 2f       	mov	r24, r22
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	2a f0       	brmi	.+10     	; 0x478 <__floatsisf+0x6c>
 46e:	9a 95       	dec	r25
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	da f7       	brpl	.-10     	; 0x46e <__floatsisf+0x62>
 478:	88 0f       	add	r24, r24
 47a:	96 95       	lsr	r25
 47c:	87 95       	ror	r24
 47e:	97 f9       	bld	r25, 7
 480:	08 95       	ret

00000482 <__fp_inf>:
 482:	97 f9       	bld	r25, 7
 484:	9f 67       	ori	r25, 0x7F	; 127
 486:	80 e8       	ldi	r24, 0x80	; 128
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	08 95       	ret

0000048e <__fp_nan>:
 48e:	9f ef       	ldi	r25, 0xFF	; 255
 490:	80 ec       	ldi	r24, 0xC0	; 192
 492:	08 95       	ret

00000494 <__fp_pscA>:
 494:	00 24       	eor	r0, r0
 496:	0a 94       	dec	r0
 498:	16 16       	cp	r1, r22
 49a:	17 06       	cpc	r1, r23
 49c:	18 06       	cpc	r1, r24
 49e:	09 06       	cpc	r0, r25
 4a0:	08 95       	ret

000004a2 <__fp_pscB>:
 4a2:	00 24       	eor	r0, r0
 4a4:	0a 94       	dec	r0
 4a6:	12 16       	cp	r1, r18
 4a8:	13 06       	cpc	r1, r19
 4aa:	14 06       	cpc	r1, r20
 4ac:	05 06       	cpc	r0, r21
 4ae:	08 95       	ret

000004b0 <__fp_round>:
 4b0:	09 2e       	mov	r0, r25
 4b2:	03 94       	inc	r0
 4b4:	00 0c       	add	r0, r0
 4b6:	11 f4       	brne	.+4      	; 0x4bc <__fp_round+0xc>
 4b8:	88 23       	and	r24, r24
 4ba:	52 f0       	brmi	.+20     	; 0x4d0 <__fp_round+0x20>
 4bc:	bb 0f       	add	r27, r27
 4be:	40 f4       	brcc	.+16     	; 0x4d0 <__fp_round+0x20>
 4c0:	bf 2b       	or	r27, r31
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__fp_round+0x18>
 4c4:	60 ff       	sbrs	r22, 0
 4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__fp_round+0x20>
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <__fp_split3>:
 4d2:	57 fd       	sbrc	r21, 7
 4d4:	90 58       	subi	r25, 0x80	; 128
 4d6:	44 0f       	add	r20, r20
 4d8:	55 1f       	adc	r21, r21
 4da:	59 f0       	breq	.+22     	; 0x4f2 <__fp_splitA+0x10>
 4dc:	5f 3f       	cpi	r21, 0xFF	; 255
 4de:	71 f0       	breq	.+28     	; 0x4fc <__fp_splitA+0x1a>
 4e0:	47 95       	ror	r20

000004e2 <__fp_splitA>:
 4e2:	88 0f       	add	r24, r24
 4e4:	97 fb       	bst	r25, 7
 4e6:	99 1f       	adc	r25, r25
 4e8:	61 f0       	breq	.+24     	; 0x502 <__fp_splitA+0x20>
 4ea:	9f 3f       	cpi	r25, 0xFF	; 255
 4ec:	79 f0       	breq	.+30     	; 0x50c <__fp_splitA+0x2a>
 4ee:	87 95       	ror	r24
 4f0:	08 95       	ret
 4f2:	12 16       	cp	r1, r18
 4f4:	13 06       	cpc	r1, r19
 4f6:	14 06       	cpc	r1, r20
 4f8:	55 1f       	adc	r21, r21
 4fa:	f2 cf       	rjmp	.-28     	; 0x4e0 <__fp_split3+0xe>
 4fc:	46 95       	lsr	r20
 4fe:	f1 df       	rcall	.-30     	; 0x4e2 <__fp_splitA>
 500:	08 c0       	rjmp	.+16     	; 0x512 <__fp_splitA+0x30>
 502:	16 16       	cp	r1, r22
 504:	17 06       	cpc	r1, r23
 506:	18 06       	cpc	r1, r24
 508:	99 1f       	adc	r25, r25
 50a:	f1 cf       	rjmp	.-30     	; 0x4ee <__fp_splitA+0xc>
 50c:	86 95       	lsr	r24
 50e:	71 05       	cpc	r23, r1
 510:	61 05       	cpc	r22, r1
 512:	08 94       	sec
 514:	08 95       	ret

00000516 <__fp_zero>:
 516:	e8 94       	clt

00000518 <__fp_szero>:
 518:	bb 27       	eor	r27, r27
 51a:	66 27       	eor	r22, r22
 51c:	77 27       	eor	r23, r23
 51e:	cb 01       	movw	r24, r22
 520:	97 f9       	bld	r25, 7
 522:	08 95       	ret

00000524 <__mulsf3>:
 524:	0a d0       	rcall	.+20     	; 0x53a <__mulsf3x>
 526:	c4 cf       	rjmp	.-120    	; 0x4b0 <__fp_round>
 528:	b5 df       	rcall	.-150    	; 0x494 <__fp_pscA>
 52a:	28 f0       	brcs	.+10     	; 0x536 <__mulsf3+0x12>
 52c:	ba df       	rcall	.-140    	; 0x4a2 <__fp_pscB>
 52e:	18 f0       	brcs	.+6      	; 0x536 <__mulsf3+0x12>
 530:	95 23       	and	r25, r21
 532:	09 f0       	breq	.+2      	; 0x536 <__mulsf3+0x12>
 534:	a6 cf       	rjmp	.-180    	; 0x482 <__fp_inf>
 536:	ab cf       	rjmp	.-170    	; 0x48e <__fp_nan>
 538:	ef cf       	rjmp	.-34     	; 0x518 <__fp_szero>

0000053a <__mulsf3x>:
 53a:	cb df       	rcall	.-106    	; 0x4d2 <__fp_split3>
 53c:	a8 f3       	brcs	.-22     	; 0x528 <__mulsf3+0x4>

0000053e <__mulsf3_pse>:
 53e:	99 23       	and	r25, r25
 540:	d9 f3       	breq	.-10     	; 0x538 <__mulsf3+0x14>
 542:	55 23       	and	r21, r21
 544:	c9 f3       	breq	.-14     	; 0x538 <__mulsf3+0x14>
 546:	95 0f       	add	r25, r21
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	55 1f       	adc	r21, r21
 54c:	aa 27       	eor	r26, r26
 54e:	ee 27       	eor	r30, r30
 550:	ff 27       	eor	r31, r31
 552:	bb 27       	eor	r27, r27
 554:	00 24       	eor	r0, r0
 556:	08 94       	sec
 558:	67 95       	ror	r22
 55a:	20 f4       	brcc	.+8      	; 0x564 <__mulsf3_pse+0x26>
 55c:	e2 0f       	add	r30, r18
 55e:	f3 1f       	adc	r31, r19
 560:	b4 1f       	adc	r27, r20
 562:	0a 1e       	adc	r0, r26
 564:	22 0f       	add	r18, r18
 566:	33 1f       	adc	r19, r19
 568:	44 1f       	adc	r20, r20
 56a:	aa 1f       	adc	r26, r26
 56c:	66 95       	lsr	r22
 56e:	a9 f7       	brne	.-22     	; 0x55a <__mulsf3_pse+0x1c>
 570:	77 95       	ror	r23
 572:	30 f4       	brcc	.+12     	; 0x580 <__mulsf3_pse+0x42>
 574:	f3 0f       	add	r31, r19
 576:	b4 1f       	adc	r27, r20
 578:	0a 1e       	adc	r0, r26
 57a:	12 1e       	adc	r1, r18
 57c:	08 f4       	brcc	.+2      	; 0x580 <__mulsf3_pse+0x42>
 57e:	63 95       	inc	r22
 580:	33 0f       	add	r19, r19
 582:	44 1f       	adc	r20, r20
 584:	aa 1f       	adc	r26, r26
 586:	22 1f       	adc	r18, r18
 588:	76 95       	lsr	r23
 58a:	99 f7       	brne	.-26     	; 0x572 <__mulsf3_pse+0x34>
 58c:	87 95       	ror	r24
 58e:	20 f4       	brcc	.+8      	; 0x598 <__mulsf3_pse+0x5a>
 590:	b4 0f       	add	r27, r20
 592:	0a 1e       	adc	r0, r26
 594:	12 1e       	adc	r1, r18
 596:	63 1f       	adc	r22, r19
 598:	44 0f       	add	r20, r20
 59a:	aa 1f       	adc	r26, r26
 59c:	22 1f       	adc	r18, r18
 59e:	33 1f       	adc	r19, r19
 5a0:	86 95       	lsr	r24
 5a2:	a9 f7       	brne	.-22     	; 0x58e <__mulsf3_pse+0x50>
 5a4:	86 2f       	mov	r24, r22
 5a6:	71 2d       	mov	r23, r1
 5a8:	60 2d       	mov	r22, r0
 5aa:	11 24       	eor	r1, r1
 5ac:	9f 57       	subi	r25, 0x7F	; 127
 5ae:	50 40       	sbci	r21, 0x00	; 0
 5b0:	8a f0       	brmi	.+34     	; 0x5d4 <__mulsf3_pse+0x96>
 5b2:	e1 f0       	breq	.+56     	; 0x5ec <__mulsf3_pse+0xae>
 5b4:	88 23       	and	r24, r24
 5b6:	4a f0       	brmi	.+18     	; 0x5ca <__mulsf3_pse+0x8c>
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	bb 1f       	adc	r27, r27
 5be:	66 1f       	adc	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	88 1f       	adc	r24, r24
 5c4:	91 50       	subi	r25, 0x01	; 1
 5c6:	50 40       	sbci	r21, 0x00	; 0
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <__mulsf3_pse+0x76>
 5ca:	9e 3f       	cpi	r25, 0xFE	; 254
 5cc:	51 05       	cpc	r21, r1
 5ce:	70 f0       	brcs	.+28     	; 0x5ec <__mulsf3_pse+0xae>
 5d0:	58 cf       	rjmp	.-336    	; 0x482 <__fp_inf>
 5d2:	a2 cf       	rjmp	.-188    	; 0x518 <__fp_szero>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	ec f3       	brlt	.-6      	; 0x5d2 <__mulsf3_pse+0x94>
 5d8:	98 3e       	cpi	r25, 0xE8	; 232
 5da:	dc f3       	brlt	.-10     	; 0x5d2 <__mulsf3_pse+0x94>
 5dc:	86 95       	lsr	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b7 95       	ror	r27
 5e4:	f7 95       	ror	r31
 5e6:	e7 95       	ror	r30
 5e8:	9f 5f       	subi	r25, 0xFF	; 255
 5ea:	c1 f7       	brne	.-16     	; 0x5dc <__mulsf3_pse+0x9e>
 5ec:	fe 2b       	or	r31, r30
 5ee:	88 0f       	add	r24, r24
 5f0:	91 1d       	adc	r25, r1
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret

000005fa <_exit>:
 5fa:	f8 94       	cli

000005fc <__stop_program>:
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <__stop_program>
