
lipoCcounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000e60  00000ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  00800074  00800074  00000f08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c5  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000038e  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ec  00000000  00000000  00001b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000074b  00000000  00000000  00002846  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	fc c3       	rjmp	.+2040   	; 0x800 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	88 c3       	rjmp	.+1808   	; 0x722 <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	b0 c4       	rjmp	.+2400   	; 0x97c <__vector_13>
  1c:	ca c4       	rjmp	.+2452   	; 0x9b2 <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 e6       	ldi	r30, 0x60	; 96
  32:	fe e0       	ldi	r31, 0x0E	; 14
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a4 37       	cpi	r26, 0x74	; 116
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a4 e7       	ldi	r26, 0x74	; 116
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 3c       	cpi	r26, 0xC7	; 199
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	4d d2       	rcall	.+1178   	; 0x4ec <main>
  52:	04 c7       	rjmp	.+3592   	; 0xe5c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <now>:
	ADC_STATE_U,
};

uint8_t adc_state = 0;

void now(struct timeval_t* t) {
  56:	8f 92       	push	r8
  58:	9f 92       	push	r9
  5a:	af 92       	push	r10
  5c:	bf 92       	push	r11
  5e:	cf 92       	push	r12
  60:	df 92       	push	r13
  62:	ef 92       	push	r14
  64:	ff 92       	push	r15
  66:	0f 93       	push	r16
  68:	1f 93       	push	r17
  6a:	cf 93       	push	r28
  6c:	df 93       	push	r29
  6e:	ec 01       	movw	r28, r24
	*t = past;
  70:	80 e1       	ldi	r24, 0x10	; 16
  72:	ea ea       	ldi	r30, 0xAA	; 170
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	de 01       	movw	r26, r28
  78:	01 90       	ld	r0, Z+
  7a:	0d 92       	st	X+, r0
  7c:	8a 95       	dec	r24
  7e:	e1 f7       	brne	.-8      	; 0x78 <now+0x22>
	t->nsecs += TIMER_COUNTER_NS * TCNT1;
  80:	6f b5       	in	r22, 0x2f	; 47
  82:	70 e0       	ldi	r23, 0x00	; 0
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	3a ef       	ldi	r19, 0xFA	; 250
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	80 d5       	rcall	.+2816   	; 0xb92 <__umulsidi3>
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	a8 84       	ldd	r10, Y+8	; 0x08
  9c:	b9 84       	ldd	r11, Y+9	; 0x09
  9e:	ca 84       	ldd	r12, Y+10	; 0x0a
  a0:	db 84       	ldd	r13, Y+11	; 0x0b
  a2:	ec 84       	ldd	r14, Y+12	; 0x0c
  a4:	fd 84       	ldd	r15, Y+13	; 0x0d
  a6:	0e 85       	ldd	r16, Y+14	; 0x0e
  a8:	1f 85       	ldd	r17, Y+15	; 0x0f
  aa:	83 d6       	rcall	.+3334   	; 0xdb2 <__adddi3>
  ac:	b2 2e       	mov	r11, r18
  ae:	c3 2e       	mov	r12, r19
  b0:	d4 2e       	mov	r13, r20
  b2:	e5 2e       	mov	r14, r21
  b4:	f6 2e       	mov	r15, r22
  b6:	b7 2f       	mov	r27, r23
  b8:	f8 2f       	mov	r31, r24
  ba:	e9 2f       	mov	r30, r25
  bc:	28 87       	std	Y+8, r18	; 0x08
  be:	39 87       	std	Y+9, r19	; 0x09
  c0:	4a 87       	std	Y+10, r20	; 0x0a
  c2:	5b 87       	std	Y+11, r21	; 0x0b
  c4:	6c 87       	std	Y+12, r22	; 0x0c
  c6:	7d 87       	std	Y+13, r23	; 0x0d
  c8:	8e 87       	std	Y+14, r24	; 0x0e
  ca:	9f 87       	std	Y+15, r25	; 0x0f
	if(t->nsecs >= SEC_NSECS) {
  cc:	2f 3f       	cpi	r18, 0xFF	; 255
  ce:	39 4c       	sbci	r19, 0xC9	; 201
  d0:	4a 49       	sbci	r20, 0x9A	; 154
  d2:	5b 43       	sbci	r21, 0x3B	; 59
  d4:	61 05       	cpc	r22, r1
  d6:	71 05       	cpc	r23, r1
  d8:	81 05       	cpc	r24, r1
  da:	91 05       	cpc	r25, r1
  dc:	51 f1       	breq	.+84     	; 0x132 <now+0xdc>
  de:	48 f1       	brcs	.+82     	; 0x132 <now+0xdc>
		t->secs++;
  e0:	28 81       	ld	r18, Y
  e2:	39 81       	ldd	r19, Y+1	; 0x01
  e4:	4a 81       	ldd	r20, Y+2	; 0x02
  e6:	5b 81       	ldd	r21, Y+3	; 0x03
  e8:	6c 81       	ldd	r22, Y+4	; 0x04
  ea:	7d 81       	ldd	r23, Y+5	; 0x05
  ec:	8e 81       	ldd	r24, Y+6	; 0x06
  ee:	9f 81       	ldd	r25, Y+7	; 0x07
  f0:	a1 e0       	ldi	r26, 0x01	; 1
  f2:	68 d6       	rcall	.+3280   	; 0xdc4 <__adddi3_s8>
  f4:	28 83       	st	Y, r18
  f6:	39 83       	std	Y+1, r19	; 0x01
  f8:	4a 83       	std	Y+2, r20	; 0x02
  fa:	5b 83       	std	Y+3, r21	; 0x03
  fc:	6c 83       	std	Y+4, r22	; 0x04
  fe:	7d 83       	std	Y+5, r23	; 0x05
 100:	8e 83       	std	Y+6, r24	; 0x06
 102:	9f 83       	std	Y+7, r25	; 0x07
		t->nsecs -= SEC_NSECS;
 104:	2b 2d       	mov	r18, r11
 106:	3c 2d       	mov	r19, r12
 108:	4d 2d       	mov	r20, r13
 10a:	5e 2d       	mov	r21, r14
 10c:	6f 2d       	mov	r22, r15
 10e:	7b 2f       	mov	r23, r27
 110:	8f 2f       	mov	r24, r31
 112:	9e 2f       	mov	r25, r30
 114:	3a 5c       	subi	r19, 0xCA	; 202
 116:	4a 49       	sbci	r20, 0x9A	; 154
 118:	5b 43       	sbci	r21, 0x3B	; 59
 11a:	61 09       	sbc	r22, r1
 11c:	71 09       	sbc	r23, r1
 11e:	81 09       	sbc	r24, r1
 120:	91 09       	sbc	r25, r1
 122:	28 87       	std	Y+8, r18	; 0x08
 124:	39 87       	std	Y+9, r19	; 0x09
 126:	4a 87       	std	Y+10, r20	; 0x0a
 128:	5b 87       	std	Y+11, r21	; 0x0b
 12a:	6c 87       	std	Y+12, r22	; 0x0c
 12c:	7d 87       	std	Y+13, r23	; 0x0d
 12e:	8e 87       	std	Y+14, r24	; 0x0e
 130:	9f 87       	std	Y+15, r25	; 0x0f
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	df 90       	pop	r13
 140:	cf 90       	pop	r12
 142:	bf 90       	pop	r11
 144:	af 90       	pop	r10
 146:	9f 90       	pop	r9
 148:	8f 90       	pop	r8
 14a:	08 95       	ret

0000014c <timedelta>:

void timedelta(struct timeval_t* pre, struct timeval_t* post, struct timeval_t* delta) {
 14c:	2f 92       	push	r2
 14e:	3f 92       	push	r3
 150:	4f 92       	push	r4
 152:	5f 92       	push	r5
 154:	6f 92       	push	r6
 156:	7f 92       	push	r7
 158:	8f 92       	push	r8
 15a:	9f 92       	push	r9
 15c:	af 92       	push	r10
 15e:	bf 92       	push	r11
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	61 97       	sbiw	r28, 0x11	; 17
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	4c 01       	movw	r8, r24
 182:	79 8b       	std	Y+17, r23	; 0x11
 184:	68 8b       	std	Y+16, r22	; 0x10
 186:	fa 01       	movw	r30, r20
	delta->secs = post->secs - pre->secs;
 188:	db 01       	movw	r26, r22
 18a:	2c 91       	ld	r18, X
 18c:	11 96       	adiw	r26, 0x01	; 1
 18e:	3c 91       	ld	r19, X
 190:	11 97       	sbiw	r26, 0x01	; 1
 192:	12 96       	adiw	r26, 0x02	; 2
 194:	4c 91       	ld	r20, X
 196:	12 97       	sbiw	r26, 0x02	; 2
 198:	13 96       	adiw	r26, 0x03	; 3
 19a:	5c 91       	ld	r21, X
 19c:	13 97       	sbiw	r26, 0x03	; 3
 19e:	14 96       	adiw	r26, 0x04	; 4
 1a0:	6c 91       	ld	r22, X
 1a2:	14 97       	sbiw	r26, 0x04	; 4
 1a4:	15 96       	adiw	r26, 0x05	; 5
 1a6:	7c 91       	ld	r23, X
 1a8:	15 97       	sbiw	r26, 0x05	; 5
 1aa:	16 96       	adiw	r26, 0x06	; 6
 1ac:	8c 91       	ld	r24, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	17 96       	adiw	r26, 0x07	; 7
 1b2:	9c 91       	ld	r25, X
 1b4:	d4 01       	movw	r26, r8
 1b6:	ac 90       	ld	r10, X
 1b8:	11 96       	adiw	r26, 0x01	; 1
 1ba:	bc 90       	ld	r11, X
 1bc:	11 97       	sbiw	r26, 0x01	; 1
 1be:	12 96       	adiw	r26, 0x02	; 2
 1c0:	cc 90       	ld	r12, X
 1c2:	12 97       	sbiw	r26, 0x02	; 2
 1c4:	13 96       	adiw	r26, 0x03	; 3
 1c6:	dc 90       	ld	r13, X
 1c8:	13 97       	sbiw	r26, 0x03	; 3
 1ca:	14 96       	adiw	r26, 0x04	; 4
 1cc:	ec 90       	ld	r14, X
 1ce:	14 97       	sbiw	r26, 0x04	; 4
 1d0:	15 96       	adiw	r26, 0x05	; 5
 1d2:	fc 90       	ld	r15, X
 1d4:	15 97       	sbiw	r26, 0x05	; 5
 1d6:	16 96       	adiw	r26, 0x06	; 6
 1d8:	0c 91       	ld	r16, X
 1da:	16 97       	sbiw	r26, 0x06	; 6
 1dc:	17 96       	adiw	r26, 0x07	; 7
 1de:	1c 91       	ld	r17, X
 1e0:	fd d5       	rcall	.+3066   	; 0xddc <__subdi3>
 1e2:	28 87       	std	Y+8, r18	; 0x08
 1e4:	39 87       	std	Y+9, r19	; 0x09
 1e6:	4a 87       	std	Y+10, r20	; 0x0a
 1e8:	5b 87       	std	Y+11, r21	; 0x0b
 1ea:	6c 87       	std	Y+12, r22	; 0x0c
 1ec:	7d 87       	std	Y+13, r23	; 0x0d
 1ee:	8e 87       	std	Y+14, r24	; 0x0e
 1f0:	9f 87       	std	Y+15, r25	; 0x0f
 1f2:	20 83       	st	Z, r18
 1f4:	31 83       	std	Z+1, r19	; 0x01
 1f6:	42 83       	std	Z+2, r20	; 0x02
 1f8:	53 83       	std	Z+3, r21	; 0x03
 1fa:	64 83       	std	Z+4, r22	; 0x04
 1fc:	75 83       	std	Z+5, r23	; 0x05
 1fe:	86 83       	std	Z+6, r24	; 0x06
 200:	97 83       	std	Z+7, r25	; 0x07
	if(pre->nsecs > post->nsecs) {
 202:	d4 01       	movw	r26, r8
 204:	18 96       	adiw	r26, 0x08	; 8
 206:	bc 91       	ld	r27, X
 208:	b9 83       	std	Y+1, r27	; 0x01
 20a:	d4 01       	movw	r26, r8
 20c:	19 96       	adiw	r26, 0x09	; 9
 20e:	bc 91       	ld	r27, X
 210:	ba 83       	std	Y+2, r27	; 0x02
 212:	d4 01       	movw	r26, r8
 214:	1a 96       	adiw	r26, 0x0a	; 10
 216:	2c 90       	ld	r2, X
 218:	1a 97       	sbiw	r26, 0x0a	; 10
 21a:	1b 96       	adiw	r26, 0x0b	; 11
 21c:	bc 91       	ld	r27, X
 21e:	bb 83       	std	Y+3, r27	; 0x03
 220:	d4 01       	movw	r26, r8
 222:	1c 96       	adiw	r26, 0x0c	; 12
 224:	bc 91       	ld	r27, X
 226:	bc 83       	std	Y+4, r27	; 0x04
 228:	d4 01       	movw	r26, r8
 22a:	1d 96       	adiw	r26, 0x0d	; 13
 22c:	bc 91       	ld	r27, X
 22e:	bd 83       	std	Y+5, r27	; 0x05
 230:	d4 01       	movw	r26, r8
 232:	1e 96       	adiw	r26, 0x0e	; 14
 234:	bc 91       	ld	r27, X
 236:	be 83       	std	Y+6, r27	; 0x06
 238:	d4 01       	movw	r26, r8
 23a:	1f 96       	adiw	r26, 0x0f	; 15
 23c:	bc 91       	ld	r27, X
 23e:	bf 83       	std	Y+7, r27	; 0x07
 240:	a8 89       	ldd	r26, Y+16	; 0x10
 242:	b9 89       	ldd	r27, Y+17	; 0x11
 244:	18 96       	adiw	r26, 0x08	; 8
 246:	3c 90       	ld	r3, X
 248:	18 97       	sbiw	r26, 0x08	; 8
 24a:	19 96       	adiw	r26, 0x09	; 9
 24c:	4c 90       	ld	r4, X
 24e:	19 97       	sbiw	r26, 0x09	; 9
 250:	1a 96       	adiw	r26, 0x0a	; 10
 252:	5c 90       	ld	r5, X
 254:	1a 97       	sbiw	r26, 0x0a	; 10
 256:	1b 96       	adiw	r26, 0x0b	; 11
 258:	6c 90       	ld	r6, X
 25a:	1b 97       	sbiw	r26, 0x0b	; 11
 25c:	1c 96       	adiw	r26, 0x0c	; 12
 25e:	7c 90       	ld	r7, X
 260:	1c 97       	sbiw	r26, 0x0c	; 12
 262:	1d 96       	adiw	r26, 0x0d	; 13
 264:	8c 90       	ld	r8, X
 266:	1d 97       	sbiw	r26, 0x0d	; 13
 268:	1e 96       	adiw	r26, 0x0e	; 14
 26a:	9c 90       	ld	r9, X
 26c:	1e 97       	sbiw	r26, 0x0e	; 14
 26e:	1f 96       	adiw	r26, 0x0f	; 15
 270:	bc 91       	ld	r27, X
 272:	b8 8b       	std	Y+16, r27	; 0x10
 274:	29 81       	ldd	r18, Y+1	; 0x01
 276:	3a 81       	ldd	r19, Y+2	; 0x02
 278:	42 2d       	mov	r20, r2
 27a:	5b 81       	ldd	r21, Y+3	; 0x03
 27c:	6c 81       	ldd	r22, Y+4	; 0x04
 27e:	7d 81       	ldd	r23, Y+5	; 0x05
 280:	8e 81       	ldd	r24, Y+6	; 0x06
 282:	9f 81       	ldd	r25, Y+7	; 0x07
 284:	a3 2c       	mov	r10, r3
 286:	b4 2c       	mov	r11, r4
 288:	c5 2c       	mov	r12, r5
 28a:	d6 2c       	mov	r13, r6
 28c:	e7 2c       	mov	r14, r7
 28e:	f8 2c       	mov	r15, r8
 290:	09 2d       	mov	r16, r9
 292:	1b 2f       	mov	r17, r27
 294:	ac d5       	rcall	.+2904   	; 0xdee <__cmpdi2>
 296:	19 f1       	breq	.+70     	; 0x2de <__stack+0x7f>
 298:	10 f1       	brcs	.+68     	; 0x2de <__stack+0x7f>
		delta->secs--;
 29a:	28 85       	ldd	r18, Y+8	; 0x08
 29c:	39 85       	ldd	r19, Y+9	; 0x09
 29e:	4a 85       	ldd	r20, Y+10	; 0x0a
 2a0:	5b 85       	ldd	r21, Y+11	; 0x0b
 2a2:	6c 85       	ldd	r22, Y+12	; 0x0c
 2a4:	7d 85       	ldd	r23, Y+13	; 0x0d
 2a6:	8e 85       	ldd	r24, Y+14	; 0x0e
 2a8:	9f 85       	ldd	r25, Y+15	; 0x0f
 2aa:	af ef       	ldi	r26, 0xFF	; 255
 2ac:	8b d5       	rcall	.+2838   	; 0xdc4 <__adddi3_s8>
 2ae:	20 83       	st	Z, r18
 2b0:	31 83       	std	Z+1, r19	; 0x01
 2b2:	42 83       	std	Z+2, r20	; 0x02
 2b4:	53 83       	std	Z+3, r21	; 0x03
 2b6:	64 83       	std	Z+4, r22	; 0x04
 2b8:	75 83       	std	Z+5, r23	; 0x05
 2ba:	86 83       	std	Z+6, r24	; 0x06
 2bc:	97 83       	std	Z+7, r25	; 0x07
 2be:	23 2d       	mov	r18, r3
 2c0:	34 2d       	mov	r19, r4
 2c2:	45 2d       	mov	r20, r5
 2c4:	56 2d       	mov	r21, r6
 2c6:	67 2d       	mov	r22, r7
 2c8:	78 2d       	mov	r23, r8
 2ca:	89 2d       	mov	r24, r9
 2cc:	9b 2f       	mov	r25, r27
 2ce:	36 53       	subi	r19, 0x36	; 54
 2d0:	45 46       	sbci	r20, 0x65	; 101
 2d2:	54 4c       	sbci	r21, 0xC4	; 196
 2d4:	6f 4f       	sbci	r22, 0xFF	; 255
 2d6:	7f 4f       	sbci	r23, 0xFF	; 255
 2d8:	8f 4f       	sbci	r24, 0xFF	; 255
 2da:	9f 4f       	sbci	r25, 0xFF	; 255
 2dc:	08 c0       	rjmp	.+16     	; 0x2ee <__stack+0x8f>
		delta->nsecs = SEC_NSECS - (pre->nsecs - post->nsecs);
	} else {
		delta->nsecs = post->nsecs - pre->nsecs;		
 2de:	23 2d       	mov	r18, r3
 2e0:	34 2d       	mov	r19, r4
 2e2:	45 2d       	mov	r20, r5
 2e4:	56 2d       	mov	r21, r6
 2e6:	67 2d       	mov	r22, r7
 2e8:	78 2d       	mov	r23, r8
 2ea:	89 2d       	mov	r24, r9
 2ec:	98 89       	ldd	r25, Y+16	; 0x10
 2ee:	a9 80       	ldd	r10, Y+1	; 0x01
 2f0:	ba 80       	ldd	r11, Y+2	; 0x02
 2f2:	c2 2c       	mov	r12, r2
 2f4:	db 80       	ldd	r13, Y+3	; 0x03
 2f6:	ec 80       	ldd	r14, Y+4	; 0x04
 2f8:	fd 80       	ldd	r15, Y+5	; 0x05
 2fa:	0e 81       	ldd	r16, Y+6	; 0x06
 2fc:	1f 81       	ldd	r17, Y+7	; 0x07
 2fe:	6e d5       	rcall	.+2780   	; 0xddc <__subdi3>
 300:	20 87       	std	Z+8, r18	; 0x08
 302:	31 87       	std	Z+9, r19	; 0x09
 304:	42 87       	std	Z+10, r20	; 0x0a
 306:	53 87       	std	Z+11, r21	; 0x0b
 308:	64 87       	std	Z+12, r22	; 0x0c
 30a:	75 87       	std	Z+13, r23	; 0x0d
 30c:	86 87       	std	Z+14, r24	; 0x0e
 30e:	97 87       	std	Z+15, r25	; 0x0f
	}
}
 310:	61 96       	adiw	r28, 0x11	; 17
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	df 90       	pop	r13
 32a:	cf 90       	pop	r12
 32c:	bf 90       	pop	r11
 32e:	af 90       	pop	r10
 330:	9f 90       	pop	r9
 332:	8f 90       	pop	r8
 334:	7f 90       	pop	r7
 336:	6f 90       	pop	r6
 338:	5f 90       	pop	r5
 33a:	4f 90       	pop	r4
 33c:	3f 90       	pop	r3
 33e:	2f 90       	pop	r2
 340:	08 95       	ret

00000342 <update_uwh_count>:

void update_uwh_count() {
 342:	4f 92       	push	r4
 344:	5f 92       	push	r5
 346:	6f 92       	push	r6
 348:	7f 92       	push	r7
 34a:	8f 92       	push	r8
 34c:	9f 92       	push	r9
 34e:	af 92       	push	r10
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	a8 97       	sbiw	r28, 0x28	; 40
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
	int32_t power_uW;
	int32_t power_mW;
	struct timeval_t current;
	struct timeval_t delta;
	now(&current);
 372:	ce 01       	movw	r24, r28
 374:	41 96       	adiw	r24, 0x11	; 17
 376:	6f de       	rcall	.-802    	; 0x56 <now>
	timedelta(&last_measure, &current, &delta);
 378:	ae 01       	movw	r20, r28
 37a:	4f 5f       	subi	r20, 0xFF	; 255
 37c:	5f 4f       	sbci	r21, 0xFF	; 255
 37e:	be 01       	movw	r22, r28
 380:	6f 5e       	subi	r22, 0xEF	; 239
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	8e e8       	ldi	r24, 0x8E	; 142
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	e1 de       	rcall	.-574    	; 0x14c <timedelta>
	power_uW = voltage_mV * current_uA / 1000L;
 38a:	30 91 85 00 	lds	r19, 0x0085
 38e:	20 91 84 00 	lds	r18, 0x0084
 392:	93 2f       	mov	r25, r19
 394:	99 0f       	add	r25, r25
 396:	99 0b       	sbc	r25, r25
 398:	a0 90 a0 00 	lds	r10, 0x00A0
 39c:	b0 90 a1 00 	lds	r11, 0x00A1
 3a0:	c0 90 a2 00 	lds	r12, 0x00A2
 3a4:	d0 90 a3 00 	lds	r13, 0x00A3
 3a8:	e0 90 a4 00 	lds	r14, 0x00A4
 3ac:	f0 90 a5 00 	lds	r15, 0x00A5
 3b0:	00 91 a6 00 	lds	r16, 0x00A6
 3b4:	10 91 a7 00 	lds	r17, 0x00A7
 3b8:	49 2f       	mov	r20, r25
 3ba:	59 2f       	mov	r21, r25
 3bc:	69 2f       	mov	r22, r25
 3be:	79 2f       	mov	r23, r25
 3c0:	89 2f       	mov	r24, r25
 3c2:	b7 d3       	rcall	.+1902   	; 0xb32 <__muldi3>
 3c4:	e8 ee       	ldi	r30, 0xE8	; 232
 3c6:	ae 2e       	mov	r10, r30
 3c8:	f3 e0       	ldi	r31, 0x03	; 3
 3ca:	bf 2e       	mov	r11, r31
 3cc:	c1 2c       	mov	r12, r1
 3ce:	d1 2c       	mov	r13, r1
 3d0:	e1 2c       	mov	r14, r1
 3d2:	f1 2c       	mov	r15, r1
 3d4:	00 e0       	ldi	r16, 0x00	; 0
 3d6:	10 e0       	ldi	r17, 0x00	; 0
 3d8:	f9 d3       	rcall	.+2034   	; 0xbcc <__divdi3>
	power_mW = power_uW / (int32_t)1000L;
 3da:	69 01       	movw	r12, r18
 3dc:	7a 01       	movw	r14, r20
 3de:	b9 01       	movw	r22, r18
 3e0:	c7 01       	movw	r24, r14
 3e2:	28 ee       	ldi	r18, 0xE8	; 232
 3e4:	33 e0       	ldi	r19, 0x03	; 3
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	87 d3       	rcall	.+1806   	; 0xafa <__divmodsi4>
 3ec:	29 01       	movw	r4, r18
 3ee:	3a 01       	movw	r6, r20
	reg_mWh.data = (power_mW >> 8) & 0xFF;
 3f0:	50 92 83 00 	sts	0x0083, r5
	reg_mWl.data = power_mW & 0xFF;
 3f4:	20 93 be 00 	sts	0x00BE, r18

	uws_count += ((int64_t)delta.secs) * power_uW;
 3f8:	69 81       	ldd	r22, Y+1	; 0x01
 3fa:	7a 81       	ldd	r23, Y+2	; 0x02
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	9c 81       	ldd	r25, Y+4	; 0x04
 400:	96 01       	movw	r18, r12
 402:	a7 01       	movw	r20, r14
 404:	c6 d3       	rcall	.+1932   	; 0xb92 <__umulsidi3>
 406:	49 01       	movw	r8, r18
 408:	5a 01       	movw	r10, r20
 40a:	80 91 7e 00 	lds	r24, 0x007E
 40e:	90 91 7f 00 	lds	r25, 0x007F
 412:	a0 91 80 00 	lds	r26, 0x0080
 416:	b0 91 81 00 	lds	r27, 0x0081
 41a:	9c 01       	movw	r18, r24
 41c:	ad 01       	movw	r20, r26
 41e:	28 0d       	add	r18, r8
 420:	39 1d       	adc	r19, r9
 422:	4a 1d       	adc	r20, r10
 424:	5b 1d       	adc	r21, r11
 426:	2d a3       	std	Y+37, r18	; 0x25
 428:	3e a3       	std	Y+38, r19	; 0x26
 42a:	4f a3       	std	Y+39, r20	; 0x27
 42c:	58 a7       	std	Y+40, r21	; 0x28
	uws_count += ((int64_t)delta.nsecs) * power_mW / ((int64_t)SEC_USECS);
 42e:	d3 01       	movw	r26, r6
 430:	c2 01       	movw	r24, r4
 432:	bb 0f       	add	r27, r27
 434:	88 0b       	sbc	r24, r24
 436:	98 2f       	mov	r25, r24
 438:	dc 01       	movw	r26, r24
 43a:	89 a3       	std	Y+33, r24	; 0x21
 43c:	9a a3       	std	Y+34, r25	; 0x22
 43e:	ab a3       	std	Y+35, r26	; 0x23
 440:	bc a3       	std	Y+36, r27	; 0x24
 442:	a9 84       	ldd	r10, Y+9	; 0x09
 444:	ba 84       	ldd	r11, Y+10	; 0x0a
 446:	cb 84       	ldd	r12, Y+11	; 0x0b
 448:	dc 84       	ldd	r13, Y+12	; 0x0c
 44a:	ed 84       	ldd	r14, Y+13	; 0x0d
 44c:	fe 84       	ldd	r15, Y+14	; 0x0e
 44e:	0f 85       	ldd	r16, Y+15	; 0x0f
 450:	18 89       	ldd	r17, Y+16	; 0x10
 452:	92 01       	movw	r18, r4
 454:	a3 01       	movw	r20, r6
 456:	69 a1       	ldd	r22, Y+33	; 0x21
 458:	76 2f       	mov	r23, r22
 45a:	86 2f       	mov	r24, r22
 45c:	96 2f       	mov	r25, r22
 45e:	69 d3       	rcall	.+1746   	; 0xb32 <__muldi3>
 460:	00 e4       	ldi	r16, 0x40	; 64
 462:	a0 2e       	mov	r10, r16
 464:	e2 e4       	ldi	r30, 0x42	; 66
 466:	be 2e       	mov	r11, r30
 468:	ff e0       	ldi	r31, 0x0F	; 15
 46a:	cf 2e       	mov	r12, r31
 46c:	d1 2c       	mov	r13, r1
 46e:	e1 2c       	mov	r14, r1
 470:	f1 2c       	mov	r15, r1
 472:	00 e0       	ldi	r16, 0x00	; 0
 474:	10 e0       	ldi	r17, 0x00	; 0
 476:	aa d3       	rcall	.+1876   	; 0xbcc <__divdi3>
 478:	49 01       	movw	r8, r18
 47a:	5a 01       	movw	r10, r20
 47c:	2d a1       	ldd	r18, Y+37	; 0x25
 47e:	3e a1       	ldd	r19, Y+38	; 0x26
 480:	4f a1       	ldd	r20, Y+39	; 0x27
 482:	58 a5       	ldd	r21, Y+40	; 0x28
 484:	82 0e       	add	r8, r18
 486:	93 1e       	adc	r9, r19
 488:	a4 1e       	adc	r10, r20
 48a:	b5 1e       	adc	r11, r21
 48c:	80 92 7e 00 	sts	0x007E, r8
 490:	90 92 7f 00 	sts	0x007F, r9
 494:	a0 92 80 00 	sts	0x0080, r10
 498:	b0 92 81 00 	sts	0x0081, r11
	reg_uWsh.data = (uws_count >> 24) & 0xFF;
 49c:	b0 92 7d 00 	sts	0x007D, r11
	reg_uWsmh.data = (uws_count >> 16) & 0xFF;
 4a0:	a0 92 8d 00 	sts	0x008D, r10
	reg_uWsml.data = (uws_count >> 8) & 0xFF;
 4a4:	90 92 bc 00 	sts	0x00BC, r9
	reg_uWsl.data = (uws_count >> 0) & 0xFF;
 4a8:	80 92 7b 00 	sts	0x007B, r8
	last_measure = current;
 4ac:	80 e1       	ldi	r24, 0x10	; 16
 4ae:	fe 01       	movw	r30, r28
 4b0:	71 96       	adiw	r30, 0x11	; 17
 4b2:	ae e8       	ldi	r26, 0x8E	; 142
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	01 90       	ld	r0, Z+
 4b8:	0d 92       	st	X+, r0
 4ba:	8a 95       	dec	r24
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
}
 4be:	a8 96       	adiw	r28, 0x28	; 40
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	cf 90       	pop	r12
 4da:	bf 90       	pop	r11
 4dc:	af 90       	pop	r10
 4de:	9f 90       	pop	r9
 4e0:	8f 90       	pop	r8
 4e2:	7f 90       	pop	r7
 4e4:	6f 90       	pop	r6
 4e6:	5f 90       	pop	r5
 4e8:	4f 90       	pop	r4
 4ea:	08 95       	ret

000004ec <main>:

int main(void)
{
	// Init differential ADC
	ADMUX  = BIT(REFS1) | BIT(MUX2) | BIT(MUX1) | BIT(MUX0);
 4ec:	87 e8       	ldi	r24, 0x87	; 135
 4ee:	87 b9       	out	0x07, r24	; 7
	ADCSRA = BIT(ADEN) | BIT(ADSC) | BIT(ADIE) | BIT(ADATE) | BIT(ADPS0) | BIT(ADPS1) | BIT(ADPS2);
 4f0:	8f ee       	ldi	r24, 0xEF	; 239
 4f2:	86 b9       	out	0x06, r24	; 6
	ADCSRB = BIT(BIN);
 4f4:	80 e8       	ldi	r24, 0x80	; 128
 4f6:	83 b9       	out	0x03, r24	; 3
	DIDR0  = BIT(ADC2D) | BIT(ADC3D);
 4f8:	88 e1       	ldi	r24, 0x18	; 24
 4fa:	84 bb       	out	0x14, r24	; 20
	
	// Set up timer (CLKDIV /512, compare match)
	TCCR1 = BIT(CTC1) | BIT(CS11) | BIT(CS13);
 4fc:	8a e8       	ldi	r24, 0x8A	; 138
 4fe:	80 bf       	out	0x30, r24	; 48
	TIMSK = BIT(OCIE1A);
 500:	80 e4       	ldi	r24, 0x40	; 64
 502:	89 bf       	out	0x39, r24	; 57
	// One compare match interrupt each 8 ms
	OCR1A = 125;
 504:	8d e7       	ldi	r24, 0x7D	; 125
 506:	8e bd       	out	0x2e, r24	; 46
/*
	flags.adc = 0;
	adc_cnt = 0;
	adcs = 0;
*/
	USI_I2C_Init(0x42, regs, sizeof(regs) / sizeof(*regs));
 508:	4a e0       	ldi	r20, 0x0A	; 10
 50a:	60 e6       	ldi	r22, 0x60	; 96
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	82 e4       	ldi	r24, 0x42	; 66
 510:	1e d2       	rcall	.+1084   	; 0x94e <USI_I2C_Init>
	sei();
 512:	78 94       	sei
			reg_Ih.data = (adcs >> 8) & 0xFF;
			reg_Il.data = adcs & 0xFF;
//			dU_millivolt = adcs / 20.0 * 1100.0 / 512.0 / ADC_SAMPLES;
			adcs = 0;
			adc_state = ADC_STATE_U;
			ADMUX  = BIT(MUX3) | BIT(MUX2);
 514:	fc e0       	ldi	r31, 0x0C	; 12
 516:	9f 2e       	mov	r9, r31
			reg_Ul.data = adc & 0xFF;
			adc = 0;
			update_uwh_count();
			_delay_ms(500);
			adc_state = ADC_STATE_I;
			ADMUX  = BIT(REFS1) | BIT(MUX2) | BIT(MUX1) | BIT(MUX0);
 518:	d7 e8       	ldi	r29, 0x87	; 135
			ADCSRB = BIT(BIN);
 51a:	c0 e8       	ldi	r28, 0x80	; 128
	sei();
    /* Replace with your application code */
    while (1) 
    {
		int64_t tmp;
		set_sleep_mode(SLEEP_MODE_IDLE);
 51c:	85 b7       	in	r24, 0x35	; 53
 51e:	87 7e       	andi	r24, 0xE7	; 231
 520:	85 bf       	out	0x35, r24	; 53
		sleep_enable();
 522:	85 b7       	in	r24, 0x35	; 53
 524:	80 62       	ori	r24, 0x20	; 32
 526:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 528:	88 95       	sleep
		if(flags.adc_I) {
 52a:	80 91 ba 00 	lds	r24, 0x00BA
 52e:	80 ff       	sbrs	r24, 0
 530:	9d c0       	rjmp	.+314    	; 0x66c <main+0x180>
			flags.adc_I = 0;
 532:	80 91 ba 00 	lds	r24, 0x00BA
 536:	8e 7f       	andi	r24, 0xFE	; 254
 538:	80 93 ba 00 	sts	0x00BA, r24
			tmp = adcs;
 53c:	a0 91 86 00 	lds	r26, 0x0086
 540:	b0 91 87 00 	lds	r27, 0x0087
 544:	eb 2f       	mov	r30, r27
 546:	ee 0f       	add	r30, r30
 548:	ee 0b       	sbc	r30, r30
			tmp = tmp * REF_VOLTAGE * SHUNT_RESITANCE / CURRENT_GAIN / 512UL / ADC_SAMPLES;
 54a:	9d 01       	movw	r18, r26
 54c:	4e 2f       	mov	r20, r30
 54e:	5e 2f       	mov	r21, r30
 550:	6e 2f       	mov	r22, r30
 552:	7e 2f       	mov	r23, r30
 554:	8e 2f       	mov	r24, r30
 556:	9e 2f       	mov	r25, r30
 558:	02 e0       	ldi	r16, 0x02	; 2
 55a:	f4 d3       	rcall	.+2024   	; 0xd44 <__ashldi3>
 55c:	5d 01       	movw	r10, r26
 55e:	ce 2e       	mov	r12, r30
 560:	de 2e       	mov	r13, r30
 562:	ee 2e       	mov	r14, r30
 564:	fe 2e       	mov	r15, r30
 566:	0e 2f       	mov	r16, r30
 568:	1e 2f       	mov	r17, r30
 56a:	38 d4       	rcall	.+2160   	; 0xddc <__subdi3>
 56c:	19 01       	movw	r2, r18
 56e:	2a 01       	movw	r4, r20
 570:	3b 01       	movw	r6, r22
 572:	88 2e       	mov	r8, r24
 574:	f9 2f       	mov	r31, r25
 576:	04 e0       	ldi	r16, 0x04	; 4
 578:	e5 d3       	rcall	.+1994   	; 0xd44 <__ashldi3>
 57a:	59 01       	movw	r10, r18
 57c:	6a 01       	movw	r12, r20
 57e:	7b 01       	movw	r14, r22
 580:	8c 01       	movw	r16, r24
 582:	91 01       	movw	r18, r2
 584:	a2 01       	movw	r20, r4
 586:	b3 01       	movw	r22, r6
 588:	88 2d       	mov	r24, r8
 58a:	9f 2f       	mov	r25, r31
 58c:	12 d4       	rcall	.+2084   	; 0xdb2 <__adddi3>
 58e:	05 e0       	ldi	r16, 0x05	; 5
 590:	d9 d3       	rcall	.+1970   	; 0xd44 <__ashldi3>
 592:	5d 01       	movw	r10, r26
 594:	ce 2e       	mov	r12, r30
 596:	de 2e       	mov	r13, r30
 598:	ee 2e       	mov	r14, r30
 59a:	fe 2e       	mov	r15, r30
 59c:	0e 2f       	mov	r16, r30
 59e:	1e 2f       	mov	r17, r30
 5a0:	08 d4       	rcall	.+2064   	; 0xdb2 <__adddi3>
 5a2:	03 e0       	ldi	r16, 0x03	; 3
 5a4:	cf d3       	rcall	.+1950   	; 0xd44 <__ashldi3>
 5a6:	0e 2f       	mov	r16, r30
 5a8:	19 d4       	rcall	.+2098   	; 0xddc <__subdi3>
 5aa:	01 e0       	ldi	r16, 0x01	; 1
 5ac:	cb d3       	rcall	.+1942   	; 0xd44 <__ashldi3>
 5ae:	0e 2f       	mov	r16, r30
 5b0:	15 d4       	rcall	.+2090   	; 0xddc <__subdi3>
 5b2:	01 e0       	ldi	r16, 0x01	; 1
 5b4:	c7 d3       	rcall	.+1934   	; 0xd44 <__ashldi3>
 5b6:	f2 2e       	mov	r15, r18
 5b8:	03 2f       	mov	r16, r19
 5ba:	14 2f       	mov	r17, r20
 5bc:	b5 2f       	mov	r27, r21
 5be:	f6 2f       	mov	r31, r22
 5c0:	e7 2f       	mov	r30, r23
 5c2:	d8 2e       	mov	r13, r24
 5c4:	e9 2e       	mov	r14, r25
 5c6:	a0 e0       	ldi	r26, 0x00	; 0
 5c8:	1b d4       	rcall	.+2102   	; 0xe00 <__cmpdi2_s8>
 5ca:	84 f4       	brge	.+32     	; 0x5ec <main+0x100>
 5cc:	21 50       	subi	r18, 0x01	; 1
 5ce:	30 4c       	sbci	r19, 0xC0	; 192
 5d0:	4f 4f       	sbci	r20, 0xFF	; 255
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	6f 4f       	sbci	r22, 0xFF	; 255
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	8f 4f       	sbci	r24, 0xFF	; 255
 5da:	9f 4f       	sbci	r25, 0xFF	; 255
 5dc:	f2 2e       	mov	r15, r18
 5de:	03 2f       	mov	r16, r19
 5e0:	14 2f       	mov	r17, r20
 5e2:	b5 2f       	mov	r27, r21
 5e4:	f6 2f       	mov	r31, r22
 5e6:	e7 2f       	mov	r30, r23
 5e8:	d8 2e       	mov	r13, r24
 5ea:	e9 2e       	mov	r14, r25
 5ec:	2f 2d       	mov	r18, r15
 5ee:	30 2f       	mov	r19, r16
 5f0:	41 2f       	mov	r20, r17
 5f2:	5b 2f       	mov	r21, r27
 5f4:	6f 2f       	mov	r22, r31
 5f6:	7e 2f       	mov	r23, r30
 5f8:	8d 2d       	mov	r24, r13
 5fa:	9e 2d       	mov	r25, r14
 5fc:	0e e0       	ldi	r16, 0x0E	; 14
 5fe:	bb d3       	rcall	.+1910   	; 0xd76 <__ashrdi3>
			current_uA = tmp;
 600:	20 93 a0 00 	sts	0x00A0, r18
 604:	30 93 a1 00 	sts	0x00A1, r19
 608:	40 93 a2 00 	sts	0x00A2, r20
 60c:	50 93 a3 00 	sts	0x00A3, r21
 610:	60 93 a4 00 	sts	0x00A4, r22
 614:	70 93 a5 00 	sts	0x00A5, r23
 618:	80 93 a6 00 	sts	0x00A6, r24
 61c:	90 93 a7 00 	sts	0x00A7, r25
			tmp /= 10;
 620:	ea e0       	ldi	r30, 0x0A	; 10
 622:	ae 2e       	mov	r10, r30
 624:	b1 2c       	mov	r11, r1
 626:	c1 2c       	mov	r12, r1
 628:	d1 2c       	mov	r13, r1
 62a:	e1 2c       	mov	r14, r1
 62c:	f1 2c       	mov	r15, r1
 62e:	00 e0       	ldi	r16, 0x00	; 0
 630:	10 e0       	ldi	r17, 0x00	; 0
 632:	cc d2       	rcall	.+1432   	; 0xbcc <__divdi3>
			adcs = tmp;
 634:	30 93 87 00 	sts	0x0087, r19
 638:	20 93 86 00 	sts	0x0086, r18
			reg_Ih.data = (adcs >> 8) & 0xFF;
 63c:	80 91 86 00 	lds	r24, 0x0086
 640:	90 91 87 00 	lds	r25, 0x0087
 644:	90 93 77 00 	sts	0x0077, r25
			reg_Il.data = adcs & 0xFF;
 648:	80 91 86 00 	lds	r24, 0x0086
 64c:	90 91 87 00 	lds	r25, 0x0087
 650:	80 93 a9 00 	sts	0x00A9, r24
//			dU_millivolt = adcs / 20.0 * 1100.0 / 512.0 / ADC_SAMPLES;
			adcs = 0;
 654:	10 92 87 00 	sts	0x0087, r1
 658:	10 92 86 00 	sts	0x0086, r1
			adc_state = ADC_STATE_U;
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 93 74 00 	sts	0x0074, r24
			ADMUX  = BIT(MUX3) | BIT(MUX2);
 662:	97 b8       	out	0x07, r9	; 7
			ADCSRB = 0;
 664:	13 b8       	out	0x03, r1	; 3
			ADCSRA |= BIT(ADATE) | BIT(ADSC);
 666:	86 b1       	in	r24, 0x06	; 6
 668:	80 66       	ori	r24, 0x60	; 96
 66a:	86 b9       	out	0x06, r24	; 6
		}
		if(flags.adc_U) {
 66c:	80 91 ba 00 	lds	r24, 0x00BA
 670:	81 ff       	sbrs	r24, 1
 672:	54 cf       	rjmp	.-344    	; 0x51c <main+0x30>
			flags.adc_U = 0;
 674:	80 91 ba 00 	lds	r24, 0x00BA
 678:	8d 7f       	andi	r24, 0xFD	; 253
 67a:	80 93 ba 00 	sts	0x00BA, r24
			tmp = adc;
 67e:	00 91 88 00 	lds	r16, 0x0088
 682:	10 91 89 00 	lds	r17, 0x0089
			tmp = REF_VOLTAGE * 1024UL * ADC_SAMPLES / tmp;
 686:	58 01       	movw	r10, r16
 688:	c1 2c       	mov	r12, r1
 68a:	d1 2c       	mov	r13, r1
 68c:	e1 2c       	mov	r14, r1
 68e:	f1 2c       	mov	r15, r1
 690:	00 e0       	ldi	r16, 0x00	; 0
 692:	10 e0       	ldi	r17, 0x00	; 0
 694:	20 e0       	ldi	r18, 0x00	; 0
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	46 e2       	ldi	r20, 0x26	; 38
 69a:	52 e0       	ldi	r21, 0x02	; 2
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	93 d2       	rcall	.+1318   	; 0xbcc <__divdi3>
			voltage_mV = tmp;
 6a6:	20 93 84 00 	sts	0x0084, r18
 6aa:	30 93 85 00 	sts	0x0085, r19
			adc = tmp;
 6ae:	82 2f       	mov	r24, r18
 6b0:	93 2f       	mov	r25, r19
 6b2:	90 93 89 00 	sts	0x0089, r25
 6b6:	80 93 88 00 	sts	0x0088, r24
			reg_Uh.data = (adc >> 8) & 0xFF;
 6ba:	80 91 88 00 	lds	r24, 0x0088
 6be:	90 91 89 00 	lds	r25, 0x0089
 6c2:	90 93 79 00 	sts	0x0079, r25
			reg_Ul.data = adc & 0xFF;
 6c6:	80 91 88 00 	lds	r24, 0x0088
 6ca:	90 91 89 00 	lds	r25, 0x0089
 6ce:	80 93 9f 00 	sts	0x009F, r24
			adc = 0;
 6d2:	10 92 89 00 	sts	0x0089, r1
 6d6:	10 92 88 00 	sts	0x0088, r1
			update_uwh_count();
 6da:	33 de       	rcall	.-922    	; 0x342 <update_uwh_count>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6dc:	2f ef       	ldi	r18, 0xFF	; 255
 6de:	84 e3       	ldi	r24, 0x34	; 52
 6e0:	9c e0       	ldi	r25, 0x0C	; 12
 6e2:	21 50       	subi	r18, 0x01	; 1
 6e4:	80 40       	sbci	r24, 0x00	; 0
 6e6:	90 40       	sbci	r25, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0x1f6>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x200>
 6ec:	00 00       	nop
			_delay_ms(500);
			adc_state = ADC_STATE_I;
 6ee:	10 92 74 00 	sts	0x0074, r1
			ADMUX  = BIT(REFS1) | BIT(MUX2) | BIT(MUX1) | BIT(MUX0);
 6f2:	d7 b9       	out	0x07, r29	; 7
			ADCSRB = BIT(BIN);
 6f4:	c3 b9       	out	0x03, r28	; 3
			ADCSRA |= BIT(ADATE) | BIT(ADSC);
 6f6:	86 b1       	in	r24, 0x06	; 6
 6f8:	80 66       	ori	r24, 0x60	; 96
 6fa:	86 b9       	out	0x06, r24	; 6
 6fc:	0f cf       	rjmp	.-482    	; 0x51c <main+0x30>

000006fe <adc_val_bipo>:
		}
    }
}

int16_t adc_val_bipo() {
	int16_t raw = ADCL | (ADCH << 8);
 6fe:	84 b1       	in	r24, 0x04	; 4
 700:	25 b1       	in	r18, 0x05	; 5
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	92 2b       	or	r25, r18
	if(raw & BIT(9)) {
 706:	91 ff       	sbrs	r25, 1
 708:	06 c0       	rjmp	.+12     	; 0x716 <adc_val_bipo+0x18>
		raw = -((~raw) & 0b111111111);
 70a:	80 95       	com	r24
 70c:	90 95       	com	r25
 70e:	91 70       	andi	r25, 0x01	; 1
 710:	91 95       	neg	r25
 712:	81 95       	neg	r24
 714:	91 09       	sbc	r25, r1
	}
	return raw;
}
 716:	08 95       	ret

00000718 <adc_val>:

uint16_t adc_val() {
	return ADCL | (ADCH << 8);
 718:	84 b1       	in	r24, 0x04	; 4
 71a:	25 b1       	in	r18, 0x05	; 5
 71c:	90 e0       	ldi	r25, 0x00	; 0
}
 71e:	92 2b       	or	r25, r18
 720:	08 95       	ret

00000722 <__vector_8>:

ISR(ADC_vect) {
 722:	1f 92       	push	r1
 724:	0f 92       	push	r0
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	0f 92       	push	r0
 72a:	11 24       	eor	r1, r1
 72c:	2f 93       	push	r18
 72e:	3f 93       	push	r19
 730:	4f 93       	push	r20
 732:	5f 93       	push	r21
 734:	6f 93       	push	r22
 736:	7f 93       	push	r23
 738:	8f 93       	push	r24
 73a:	9f 93       	push	r25
 73c:	af 93       	push	r26
 73e:	bf 93       	push	r27
 740:	ef 93       	push	r30
 742:	ff 93       	push	r31
	switch(adc_state) {
 744:	80 91 74 00 	lds	r24, 0x0074
 748:	88 23       	and	r24, r24
 74a:	19 f0       	breq	.+6      	; 0x752 <__vector_8+0x30>
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	19 f1       	breq	.+70     	; 0x796 <__vector_8+0x74>
 750:	46 c0       	rjmp	.+140    	; 0x7de <__vector_8+0xbc>
		case ADC_STATE_I:
			adcs += adc_val_bipo();
 752:	d5 df       	rcall	.-86     	; 0x6fe <adc_val_bipo>
 754:	20 91 86 00 	lds	r18, 0x0086
 758:	30 91 87 00 	lds	r19, 0x0087
 75c:	82 0f       	add	r24, r18
 75e:	93 1f       	adc	r25, r19
 760:	90 93 87 00 	sts	0x0087, r25
 764:	80 93 86 00 	sts	0x0086, r24
			adc_cnt++;
 768:	80 91 8a 00 	lds	r24, 0x008A
 76c:	90 91 8b 00 	lds	r25, 0x008B
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	90 93 8b 00 	sts	0x008B, r25
 776:	80 93 8a 00 	sts	0x008A, r24
			if(adc_cnt >= ADC_SAMPLES) {
 77a:	80 91 8a 00 	lds	r24, 0x008A
 77e:	90 91 8b 00 	lds	r25, 0x008B
 782:	80 97       	sbiw	r24, 0x20	; 32
 784:	60 f1       	brcs	.+88     	; 0x7de <__vector_8+0xbc>
				adc_cnt = 0;
 786:	10 92 8b 00 	sts	0x008B, r1
 78a:	10 92 8a 00 	sts	0x008A, r1
				flags.adc_I = 1;
 78e:	80 91 ba 00 	lds	r24, 0x00BA
 792:	81 60       	ori	r24, 0x01	; 1
 794:	21 c0       	rjmp	.+66     	; 0x7d8 <__vector_8+0xb6>
				ADCSRA &= ~BIT(ADATE);
			}
			break;
		case ADC_STATE_U:
			adc += adc_val();
 796:	c0 df       	rcall	.-128    	; 0x718 <adc_val>
 798:	20 91 88 00 	lds	r18, 0x0088
 79c:	30 91 89 00 	lds	r19, 0x0089
 7a0:	82 0f       	add	r24, r18
 7a2:	93 1f       	adc	r25, r19
 7a4:	90 93 89 00 	sts	0x0089, r25
 7a8:	80 93 88 00 	sts	0x0088, r24
			adc_cnt++;
 7ac:	80 91 8a 00 	lds	r24, 0x008A
 7b0:	90 91 8b 00 	lds	r25, 0x008B
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	90 93 8b 00 	sts	0x008B, r25
 7ba:	80 93 8a 00 	sts	0x008A, r24
			if(adc_cnt >= ADC_SAMPLES) {
 7be:	80 91 8a 00 	lds	r24, 0x008A
 7c2:	90 91 8b 00 	lds	r25, 0x008B
 7c6:	80 97       	sbiw	r24, 0x20	; 32
 7c8:	50 f0       	brcs	.+20     	; 0x7de <__vector_8+0xbc>
				adc_cnt = 0;
 7ca:	10 92 8b 00 	sts	0x008B, r1
 7ce:	10 92 8a 00 	sts	0x008A, r1
				flags.adc_U = 1;
 7d2:	80 91 ba 00 	lds	r24, 0x00BA
 7d6:	82 60       	ori	r24, 0x02	; 2
 7d8:	80 93 ba 00 	sts	0x00BA, r24
				ADCSRA &= ~BIT(ADATE);
 7dc:	35 98       	cbi	0x06, 5	; 6
			}
			break;
	}
}
 7de:	ff 91       	pop	r31
 7e0:	ef 91       	pop	r30
 7e2:	bf 91       	pop	r27
 7e4:	af 91       	pop	r26
 7e6:	9f 91       	pop	r25
 7e8:	8f 91       	pop	r24
 7ea:	7f 91       	pop	r23
 7ec:	6f 91       	pop	r22
 7ee:	5f 91       	pop	r21
 7f0:	4f 91       	pop	r20
 7f2:	3f 91       	pop	r19
 7f4:	2f 91       	pop	r18
 7f6:	0f 90       	pop	r0
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	0f 90       	pop	r0
 7fc:	1f 90       	pop	r1
 7fe:	18 95       	reti

00000800 <__vector_3>:

ISR(TIMER1_COMPA_vect) {
 800:	1f 92       	push	r1
 802:	0f 92       	push	r0
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	0f 92       	push	r0
 808:	11 24       	eor	r1, r1
 80a:	ff 92       	push	r15
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	2f 93       	push	r18
 812:	3f 93       	push	r19
 814:	4f 93       	push	r20
 816:	5f 93       	push	r21
 818:	6f 93       	push	r22
 81a:	7f 93       	push	r23
 81c:	8f 93       	push	r24
 81e:	9f 93       	push	r25
 820:	af 93       	push	r26
 822:	bf 93       	push	r27
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
	past.nsecs += TIMER_TICK_NS;
 82c:	f0 90 b2 00 	lds	r15, 0x00B2
 830:	00 91 b3 00 	lds	r16, 0x00B3
 834:	10 91 b4 00 	lds	r17, 0x00B4
 838:	d0 91 b5 00 	lds	r29, 0x00B5
 83c:	c0 91 b6 00 	lds	r28, 0x00B6
 840:	b0 91 b7 00 	lds	r27, 0x00B7
 844:	f0 91 b8 00 	lds	r31, 0x00B8
 848:	e0 91 b9 00 	lds	r30, 0x00B9
 84c:	2f 2d       	mov	r18, r15
 84e:	30 2f       	mov	r19, r16
 850:	41 2f       	mov	r20, r17
 852:	5d 2f       	mov	r21, r29
 854:	6c 2f       	mov	r22, r28
 856:	7b 2f       	mov	r23, r27
 858:	8f 2f       	mov	r24, r31
 85a:	9e 2f       	mov	r25, r30
 85c:	3e 5e       	subi	r19, 0xEE	; 238
 85e:	45 48       	sbci	r20, 0x85	; 133
 860:	5f 4f       	sbci	r21, 0xFF	; 255
 862:	6f 4f       	sbci	r22, 0xFF	; 255
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	20 93 b2 00 	sts	0x00B2, r18
 86e:	30 93 b3 00 	sts	0x00B3, r19
 872:	40 93 b4 00 	sts	0x00B4, r20
 876:	50 93 b5 00 	sts	0x00B5, r21
 87a:	60 93 b6 00 	sts	0x00B6, r22
 87e:	70 93 b7 00 	sts	0x00B7, r23
 882:	80 93 b8 00 	sts	0x00B8, r24
 886:	90 93 b9 00 	sts	0x00B9, r25
	if(past.nsecs >= SEC_NSECS) {
 88a:	2f 3f       	cpi	r18, 0xFF	; 255
 88c:	39 4c       	sbci	r19, 0xC9	; 201
 88e:	4a 49       	sbci	r20, 0x9A	; 154
 890:	5b 43       	sbci	r21, 0x3B	; 59
 892:	61 05       	cpc	r22, r1
 894:	71 05       	cpc	r23, r1
 896:	81 05       	cpc	r24, r1
 898:	91 05       	cpc	r25, r1
 89a:	09 f0       	breq	.+2      	; 0x89e <__vector_3+0x9e>
 89c:	08 f4       	brcc	.+2      	; 0x8a0 <__vector_3+0xa0>
 89e:	41 c0       	rjmp	.+130    	; 0x922 <__vector_3+0x122>
		past.secs++;
 8a0:	20 91 aa 00 	lds	r18, 0x00AA
 8a4:	30 91 ab 00 	lds	r19, 0x00AB
 8a8:	40 91 ac 00 	lds	r20, 0x00AC
 8ac:	50 91 ad 00 	lds	r21, 0x00AD
 8b0:	60 91 ae 00 	lds	r22, 0x00AE
 8b4:	70 91 af 00 	lds	r23, 0x00AF
 8b8:	80 91 b0 00 	lds	r24, 0x00B0
 8bc:	90 91 b1 00 	lds	r25, 0x00B1
 8c0:	a1 e0       	ldi	r26, 0x01	; 1
 8c2:	80 d2       	rcall	.+1280   	; 0xdc4 <__adddi3_s8>
 8c4:	20 93 aa 00 	sts	0x00AA, r18
 8c8:	30 93 ab 00 	sts	0x00AB, r19
 8cc:	40 93 ac 00 	sts	0x00AC, r20
 8d0:	50 93 ad 00 	sts	0x00AD, r21
 8d4:	60 93 ae 00 	sts	0x00AE, r22
 8d8:	70 93 af 00 	sts	0x00AF, r23
 8dc:	80 93 b0 00 	sts	0x00B0, r24
 8e0:	90 93 b1 00 	sts	0x00B1, r25
		past.nsecs -= SEC_NSECS;
 8e4:	2f 2d       	mov	r18, r15
 8e6:	30 2f       	mov	r19, r16
 8e8:	41 2f       	mov	r20, r17
 8ea:	5d 2f       	mov	r21, r29
 8ec:	6c 2f       	mov	r22, r28
 8ee:	7b 2f       	mov	r23, r27
 8f0:	8f 2f       	mov	r24, r31
 8f2:	9e 2f       	mov	r25, r30
 8f4:	38 5b       	subi	r19, 0xB8	; 184
 8f6:	40 42       	sbci	r20, 0x20	; 32
 8f8:	5b 43       	sbci	r21, 0x3B	; 59
 8fa:	61 09       	sbc	r22, r1
 8fc:	71 09       	sbc	r23, r1
 8fe:	81 09       	sbc	r24, r1
 900:	91 09       	sbc	r25, r1
 902:	20 93 b2 00 	sts	0x00B2, r18
 906:	30 93 b3 00 	sts	0x00B3, r19
 90a:	40 93 b4 00 	sts	0x00B4, r20
 90e:	50 93 b5 00 	sts	0x00B5, r21
 912:	60 93 b6 00 	sts	0x00B6, r22
 916:	70 93 b7 00 	sts	0x00B7, r23
 91a:	80 93 b8 00 	sts	0x00B8, r24
 91e:	90 93 b9 00 	sts	0x00B9, r25
	}
}
 922:	ff 91       	pop	r31
 924:	ef 91       	pop	r30
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	bf 91       	pop	r27
 92c:	af 91       	pop	r26
 92e:	9f 91       	pop	r25
 930:	8f 91       	pop	r24
 932:	7f 91       	pop	r23
 934:	6f 91       	pop	r22
 936:	5f 91       	pop	r21
 938:	4f 91       	pop	r20
 93a:	3f 91       	pop	r19
 93c:	2f 91       	pop	r18
 93e:	1f 91       	pop	r17
 940:	0f 91       	pop	r16
 942:	ff 90       	pop	r15
 944:	0f 90       	pop	r0
 946:	0f be       	out	0x3f, r0	; 63
 948:	0f 90       	pop	r0
 94a:	1f 90       	pop	r1
 94c:	18 95       	reti

0000094e <USI_I2C_Init>:
#define USI_SET_BOTH_INPUT() 	{ DDR_USI &= ~((1 << PORT_USI_SDA) | (1 << PORT_USI_SCL)); }

////////////////////////////////////////////////////////////////////////////////////////////////////

void USI_I2C_Init(char address, struct UCI_ISC_Reg** regs, uint8_t num_regs) {
	usi_i2c_flags.reg_set = 0;
 94e:	90 91 c6 00 	lds	r25, 0x00C6
 952:	9e 7f       	andi	r25, 0xFE	; 254
 954:	90 93 c6 00 	sts	0x00C6, r25
	
	PORT_USI &= ~(1 << PORT_USI_SCL);
 958:	c2 98       	cbi	0x18, 2	; 24
	PORT_USI &= ~(1 << PORT_USI_SDA);
 95a:	c0 98       	cbi	0x18, 0	; 24

	usi_i2c_slave_address = address;
 95c:	80 93 c1 00 	sts	0x00C1, r24
	usi_i2c_regs = regs;
 960:	70 93 c0 00 	sts	0x00C0, r23
 964:	60 93 bf 00 	sts	0x00BF, r22
	usi_i2c_num_regs = num_regs;
 968:	40 93 c2 00 	sts	0x00C2, r20

	USI_SET_BOTH_INPUT();
 96c:	87 b3       	in	r24, 0x17	; 23
 96e:	8a 7f       	andi	r24, 0xFA	; 250
 970:	87 bb       	out	0x17, r24	; 23
	
	USICR = (1 << USISIE) | (0 << USIOIE) | (1 << USIWM1) | (0 << USIWM0) | (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | (0 << USITC);
 972:	88 ea       	ldi	r24, 0xA8	; 168
 974:	8d b9       	out	0x0d, r24	; 13
	USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC);
 976:	80 ef       	ldi	r24, 0xF0	; 240
 978:	8e b9       	out	0x0e, r24	; 14
 97a:	08 95       	ret

0000097c <__vector_13>:
//  (enough for the address/rw byte to be transmitted) before overflowing and  //
//  triggering the first state table interrupt.  If a stop condition occurs,   //
//  reset the start condition detector to detect the next start condition.     //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_START_vect) {
 97c:	1f 92       	push	r1
 97e:	0f 92       	push	r0
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	0f 92       	push	r0
 984:	11 24       	eor	r1, r1
 986:	8f 93       	push	r24
	USI_I2C_Slave_State = USI_SLAVE_CHECK_ADDRESS;
 988:	10 92 c4 00 	sts	0x00C4, r1

	USI_SET_SDA_INPUT();
 98c:	b8 98       	cbi	0x17, 0	; 23
	// wait for SCL to go low to ensure the Start Condition has completed (the
	// start detector will hold SCL low ) - if a Stop Condition arises then leave
	// the interrupt to prevent waiting forever - don't use USISR to test for Stop
	// Condition as in Application Note AVR312 because the Stop Condition Flag is
	// going to be set from the last TWI sequence
	while((PIN_USI & (1 << PIN_USI_SCL)) && !((PIN_USI & (1 << PIN_USI_SDA))));
 98e:	b2 9b       	sbis	0x16, 2	; 22
 990:	02 c0       	rjmp	.+4      	; 0x996 <__vector_13+0x1a>
 992:	b0 9b       	sbis	0x16, 0	; 22
 994:	fc cf       	rjmp	.-8      	; 0x98e <__vector_13+0x12>

	if(!(PIN_USI & (1 << PIN_USI_SDA)))
 996:	b0 99       	sbic	0x16, 0	; 22
 998:	02 c0       	rjmp	.+4      	; 0x99e <__vector_13+0x22>
	{
		// a Stop Condition did not occur
		USICR = USI_SLAVE_STOP_NOT_OCCUR_USICR;
 99a:	88 ee       	ldi	r24, 0xE8	; 232
 99c:	01 c0       	rjmp	.+2      	; 0x9a0 <__vector_13+0x24>

	} else {
		// a Stop Condition did occur
    	USICR = USI_SLAVE_STOP_DID_OCCUR_USICR;
 99e:	88 eb       	ldi	r24, 0xB8	; 184
 9a0:	8d b9       	out	0x0d, r24	; 13
	}

	USISR = USI_SLAVE_CLEAR_START_USISR;
 9a2:	80 ef       	ldi	r24, 0xF0	; 240
 9a4:	8e b9       	out	0x0e, r24	; 14
}
 9a6:	8f 91       	pop	r24
 9a8:	0f 90       	pop	r0
 9aa:	0f be       	out	0x3f, r0	; 63
 9ac:	0f 90       	pop	r0
 9ae:	1f 90       	pop	r1
 9b0:	18 95       	reti

000009b2 <__vector_14>:
//  set the counter to 1 (actually -1, or 0x0E) it will wait one clock.        //
//  This is used to set up a state table of I2C transmission states that fits  //
//  the I2C protocol for proper transmission.                                  //
/////////////////////////////////////////////////////////////////////////////////

ISR(USI_OVF_vect) {
 9b2:	1f 92       	push	r1
 9b4:	0f 92       	push	r0
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	0f 92       	push	r0
 9ba:	11 24       	eor	r1, r1
 9bc:	8f 93       	push	r24
 9be:	9f 93       	push	r25
 9c0:	af 93       	push	r26
 9c2:	bf 93       	push	r27
 9c4:	ef 93       	push	r30
 9c6:	ff 93       	push	r31
	switch (USI_I2C_Slave_State) {
 9c8:	80 91 c4 00 	lds	r24, 0x00C4
 9cc:	82 30       	cpi	r24, 0x02	; 2
 9ce:	39 f1       	breq	.+78     	; 0xa1e <__vector_14+0x6c>
 9d0:	28 f4       	brcc	.+10     	; 0x9dc <__vector_14+0x2a>
 9d2:	88 23       	and	r24, r24
 9d4:	59 f0       	breq	.+22     	; 0x9ec <__vector_14+0x3a>
 9d6:	81 30       	cpi	r24, 0x01	; 1
 9d8:	71 f1       	breq	.+92     	; 0xa36 <__vector_14+0x84>
 9da:	84 c0       	rjmp	.+264    	; 0xae4 <__vector_14+0x132>
 9dc:	84 30       	cpi	r24, 0x04	; 4
 9de:	09 f4       	brne	.+2      	; 0x9e2 <__vector_14+0x30>
 9e0:	4f c0       	rjmp	.+158    	; 0xa80 <__vector_14+0xce>
 9e2:	18 f1       	brcs	.+70     	; 0xa2a <__vector_14+0x78>
 9e4:	85 30       	cpi	r24, 0x05	; 5
 9e6:	09 f4       	brne	.+2      	; 0x9ea <__vector_14+0x38>
 9e8:	51 c0       	rjmp	.+162    	; 0xa8c <__vector_14+0xda>
 9ea:	7c c0       	rjmp	.+248    	; 0xae4 <__vector_14+0x132>
		//  If the address was not for this device, the USI system is          //
		//  re-initialized for start condition.                                //
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_CHECK_ADDRESS:
			if((USIDR == 0) || ((USIDR >> 1) == usi_i2c_slave_address)) {
 9ec:	8f b1       	in	r24, 0x0f	; 15
 9ee:	88 23       	and	r24, r24
 9f0:	31 f0       	breq	.+12     	; 0x9fe <__vector_14+0x4c>
 9f2:	8f b1       	in	r24, 0x0f	; 15
 9f4:	86 95       	lsr	r24
 9f6:	90 91 c1 00 	lds	r25, 0x00C1
 9fa:	89 13       	cpse	r24, r25
 9fc:	19 c0       	rjmp	.+50     	; 0xa30 <__vector_14+0x7e>
				usi_i2c_flags.reg_read = 0;
 9fe:	80 91 c6 00 	lds	r24, 0x00C6
 a02:	8d 7f       	andi	r24, 0xFD	; 253
 a04:	80 93 c6 00 	sts	0x00C6, r24
				if (USIDR & 0x01) {
 a08:	78 9b       	sbis	0x0f, 0	; 15
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__vector_14+0x5e>
					USI_I2C_Slave_State = USI_SLAVE_SEND_DATA;
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	04 c0       	rjmp	.+8      	; 0xa18 <__vector_14+0x66>
				} else {
					usi_i2c_flags.reg_set = 0;
 a10:	8e 7f       	andi	r24, 0xFE	; 254
 a12:	80 93 c6 00 	sts	0x00C6, r24
					USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_WAIT;
 a16:	84 e0       	ldi	r24, 0x04	; 4
 a18:	80 93 c4 00 	sts	0x00C4, r24
 a1c:	5f c0       	rjmp	.+190    	; 0xadc <__vector_14+0x12a>
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA_ACK_WAIT:
			//After sending, immediately shut off PORT = 1 to prevent driving
			//the line high (I2C should *NEVER* drive high, and could damage
			//connected devices if operating at different voltage levels)
			PORT_USI &= ~(1 << PORT_USI_SDA);
 a1e:	c0 98       	cbi	0x18, 0	; 24


			USI_I2C_Slave_State = USI_SLAVE_SEND_DATA_ACK_CHECK;
 a20:	83 e0       	ldi	r24, 0x03	; 3
 a22:	80 93 c4 00 	sts	0x00C4, r24
			USI_SET_SDA_INPUT();
 a26:	b8 98       	cbi	0x17, 0	; 23
 a28:	5b c0       	rjmp	.+182    	; 0xae0 <__vector_14+0x12e>
		//  Check USIDR to see if master sent ACK or NACK.  If NACK, set up    //
		//  a reset to START conditions, if ACK, fall through into SEND_DATA   //
		//  to continue sending data.                                          //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA_ACK_CHECK:
			if(USIDR) {
 a2a:	8f b1       	in	r24, 0x0f	; 15
 a2c:	88 23       	and	r24, r24
 a2e:	19 f0       	breq	.+6      	; 0xa36 <__vector_14+0x84>
				//The master sent a NACK, indicating that it will not accept
				//more data.  Reset into START condition state
				USICR = USI_SLAVE_SET_START_COND_USICR;
 a30:	88 ea       	ldi	r24, 0xA8	; 168
 a32:	8d b9       	out	0x0d, r24	; 13
 a34:	29 c0       	rjmp	.+82     	; 0xa88 <__vector_14+0xd6>
		//  Set USIDR to the data to be sent, then set up SDA registers to     //
		//  enable data transmission in the next 8 clocks.  Set to wait 8      //
		//  clocks and proceed to wait for ACK.                                //
		/////////////////////////////////////////////////////////////////////////
		case USI_SLAVE_SEND_DATA:
			if(active_reg < usi_i2c_num_regs && !usi_i2c_flags.reg_read) {
 a36:	e0 91 75 00 	lds	r30, 0x0075
 a3a:	80 91 c2 00 	lds	r24, 0x00C2
 a3e:	e8 17       	cp	r30, r24
 a40:	c0 f4       	brcc	.+48     	; 0xa72 <__vector_14+0xc0>
 a42:	80 91 c6 00 	lds	r24, 0x00C6
 a46:	81 fd       	sbrc	r24, 1
 a48:	14 c0       	rjmp	.+40     	; 0xa72 <__vector_14+0xc0>
				USIDR = usi_i2c_regs[active_reg]->data;
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	ee 0f       	add	r30, r30
 a4e:	ff 1f       	adc	r31, r31
 a50:	80 91 bf 00 	lds	r24, 0x00BF
 a54:	90 91 c0 00 	lds	r25, 0x00C0
 a58:	e8 0f       	add	r30, r24
 a5a:	f9 1f       	adc	r31, r25
 a5c:	01 90       	ld	r0, Z+
 a5e:	f0 81       	ld	r31, Z
 a60:	e0 2d       	mov	r30, r0
 a62:	81 81       	ldd	r24, Z+1	; 0x01
 a64:	8f b9       	out	0x0f, r24	; 15
				usi_i2c_flags.reg_read = 1;
 a66:	80 91 c6 00 	lds	r24, 0x00C6
 a6a:	82 60       	ori	r24, 0x02	; 2
 a6c:	80 93 c6 00 	sts	0x00C6, r24
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <__vector_14+0xc2>
			} else {
				USIDR = 0x00;
 a72:	1f b8       	out	0x0f, r1	; 15
			}

			USI_I2C_Slave_State = USI_SLAVE_SEND_DATA_ACK_WAIT;
 a74:	82 e0       	ldi	r24, 0x02	; 2
 a76:	80 93 c4 00 	sts	0x00C4, r24

			//To send data, DDR for SDA must be 1 (Output) and PORT for SDA
			//must also be 1 (line drives low on USIDR MSB = 0 or PORT = 0)
			USI_SET_SDA_OUTPUT();
 a7a:	b8 9a       	sbi	0x17, 0	; 23
			PORT_USI |= (1 << PORT_USI_SDA);
 a7c:	c0 9a       	sbi	0x18, 0	; 24
 a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__vector_14+0xd6>
		//                                                                     //
		//  Prepares to wait 8 clocks to receive a data byte from the master.  //
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_RECV_DATA_WAIT:
			USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_ACK_SEND;
 a80:	85 e0       	ldi	r24, 0x05	; 5
 a82:	80 93 c4 00 	sts	0x00C4, r24
			USI_SET_SDA_INPUT();
 a86:	b8 98       	cbi	0x17, 0	; 23
			USISR = USI_SLAVE_COUNT_BYTE_USISR;
 a88:	80 e7       	ldi	r24, 0x70	; 112
 a8a:	2b c0       	rjmp	.+86     	; 0xae2 <__vector_14+0x130>
		//  USIDR into either the i2c buffer or internal address, then sends   //
		//  an acknowledgement to the master.                                  //
		/////////////////////////////////////////////////////////////////////////

		case USI_SLAVE_RECV_DATA_ACK_SEND:
			USI_I2C_Slave_State = USI_SLAVE_RECV_DATA_WAIT;
 a8c:	84 e0       	ldi	r24, 0x04	; 4
 a8e:	80 93 c4 00 	sts	0x00C4, r24
			if(!usi_i2c_flags.reg_set) {
 a92:	80 91 c6 00 	lds	r24, 0x00C6
 a96:	80 fd       	sbrc	r24, 0
 a98:	07 c0       	rjmp	.+14     	; 0xaa8 <__vector_14+0xf6>
				active_reg = USIDR;
 a9a:	9f b1       	in	r25, 0x0f	; 15
 a9c:	90 93 75 00 	sts	0x0075, r25
				usi_i2c_flags.reg_set = 1;
 aa0:	81 60       	ori	r24, 0x01	; 1
 aa2:	80 93 c6 00 	sts	0x00C6, r24
 aa6:	1a c0       	rjmp	.+52     	; 0xadc <__vector_14+0x12a>
			} else if(active_reg < usi_i2c_num_regs) {
 aa8:	e0 91 75 00 	lds	r30, 0x0075
 aac:	80 91 c2 00 	lds	r24, 0x00C2
 ab0:	e8 17       	cp	r30, r24
 ab2:	a0 f4       	brcc	.+40     	; 0xadc <__vector_14+0x12a>
				usi_i2c_regs[active_reg]->data = USIDR;
 ab4:	f0 e0       	ldi	r31, 0x00	; 0
 ab6:	ee 0f       	add	r30, r30
 ab8:	ff 1f       	adc	r31, r31
 aba:	80 91 bf 00 	lds	r24, 0x00BF
 abe:	90 91 c0 00 	lds	r25, 0x00C0
 ac2:	e8 0f       	add	r30, r24
 ac4:	f9 1f       	adc	r31, r25
 ac6:	a0 81       	ld	r26, Z
 ac8:	b1 81       	ldd	r27, Z+1	; 0x01
 aca:	8f b1       	in	r24, 0x0f	; 15
 acc:	11 96       	adiw	r26, 0x01	; 1
 ace:	8c 93       	st	X, r24
				usi_i2c_regs[active_reg]->attr.changed = 1;
 ad0:	01 90       	ld	r0, Z+
 ad2:	f0 81       	ld	r31, Z
 ad4:	e0 2d       	mov	r30, r0
 ad6:	80 81       	ld	r24, Z
 ad8:	81 60       	ori	r24, 0x01	; 1
 ada:	80 83       	st	Z, r24
			}
			
			USIDR = 0;
 adc:	1f b8       	out	0x0f, r1	; 15
			USI_SET_SDA_OUTPUT();
 ade:	b8 9a       	sbi	0x17, 0	; 23
			USISR = USI_SLAVE_COUNT_ACK_USISR;
 ae0:	8e e7       	ldi	r24, 0x7E	; 126
 ae2:	8e b9       	out	0x0e, r24	; 14
			break;
	}
 ae4:	ff 91       	pop	r31
 ae6:	ef 91       	pop	r30
 ae8:	bf 91       	pop	r27
 aea:	af 91       	pop	r26
 aec:	9f 91       	pop	r25
 aee:	8f 91       	pop	r24
 af0:	0f 90       	pop	r0
 af2:	0f be       	out	0x3f, r0	; 63
 af4:	0f 90       	pop	r0
 af6:	1f 90       	pop	r1
 af8:	18 95       	reti

00000afa <__divmodsi4>:
 afa:	05 2e       	mov	r0, r21
 afc:	97 fb       	bst	r25, 7
 afe:	16 f4       	brtc	.+4      	; 0xb04 <__divmodsi4+0xa>
 b00:	00 94       	com	r0
 b02:	0f d0       	rcall	.+30     	; 0xb22 <__negsi2>
 b04:	57 fd       	sbrc	r21, 7
 b06:	05 d0       	rcall	.+10     	; 0xb12 <__divmodsi4_neg2>
 b08:	87 d1       	rcall	.+782    	; 0xe18 <__udivmodsi4>
 b0a:	07 fc       	sbrc	r0, 7
 b0c:	02 d0       	rcall	.+4      	; 0xb12 <__divmodsi4_neg2>
 b0e:	46 f4       	brtc	.+16     	; 0xb20 <__divmodsi4_exit>
 b10:	08 c0       	rjmp	.+16     	; 0xb22 <__negsi2>

00000b12 <__divmodsi4_neg2>:
 b12:	50 95       	com	r21
 b14:	40 95       	com	r20
 b16:	30 95       	com	r19
 b18:	21 95       	neg	r18
 b1a:	3f 4f       	sbci	r19, 0xFF	; 255
 b1c:	4f 4f       	sbci	r20, 0xFF	; 255
 b1e:	5f 4f       	sbci	r21, 0xFF	; 255

00000b20 <__divmodsi4_exit>:
 b20:	08 95       	ret

00000b22 <__negsi2>:
 b22:	90 95       	com	r25
 b24:	80 95       	com	r24
 b26:	70 95       	com	r23
 b28:	61 95       	neg	r22
 b2a:	7f 4f       	sbci	r23, 0xFF	; 255
 b2c:	8f 4f       	sbci	r24, 0xFF	; 255
 b2e:	9f 4f       	sbci	r25, 0xFF	; 255
 b30:	08 95       	ret

00000b32 <__muldi3>:
 b32:	df 93       	push	r29
 b34:	cf 93       	push	r28
 b36:	9f 92       	push	r9
 b38:	a0 e4       	ldi	r26, 0x40	; 64
 b3a:	9a 2e       	mov	r9, r26
 b3c:	00 24       	eor	r0, r0
 b3e:	d0 01       	movw	r26, r0
 b40:	e0 01       	movw	r28, r0
 b42:	f0 01       	movw	r30, r0
 b44:	16 95       	lsr	r17
 b46:	07 95       	ror	r16
 b48:	f7 94       	ror	r15
 b4a:	e7 94       	ror	r14
 b4c:	d7 94       	ror	r13
 b4e:	c7 94       	ror	r12
 b50:	b7 94       	ror	r11
 b52:	a7 94       	ror	r10
 b54:	48 f4       	brcc	.+18     	; 0xb68 <__muldi3+0x36>
 b56:	10 68       	ori	r17, 0x80	; 128
 b58:	a2 0f       	add	r26, r18
 b5a:	b3 1f       	adc	r27, r19
 b5c:	c4 1f       	adc	r28, r20
 b5e:	d5 1f       	adc	r29, r21
 b60:	e6 1f       	adc	r30, r22
 b62:	f7 1f       	adc	r31, r23
 b64:	08 1e       	adc	r0, r24
 b66:	19 1e       	adc	r1, r25
 b68:	22 0f       	add	r18, r18
 b6a:	33 1f       	adc	r19, r19
 b6c:	44 1f       	adc	r20, r20
 b6e:	55 1f       	adc	r21, r21
 b70:	66 1f       	adc	r22, r22
 b72:	77 1f       	adc	r23, r23
 b74:	88 1f       	adc	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	9a 94       	dec	r9
 b7a:	21 f7       	brne	.-56     	; 0xb44 <__muldi3+0x12>
 b7c:	9d 01       	movw	r18, r26
 b7e:	ae 01       	movw	r20, r28
 b80:	bf 01       	movw	r22, r30
 b82:	c0 01       	movw	r24, r0
 b84:	11 24       	eor	r1, r1
 b86:	9f 90       	pop	r9
 b88:	cf 91       	pop	r28
 b8a:	df 91       	pop	r29
 b8c:	08 95       	ret

00000b8e <__mulsidi3>:
 b8e:	68 94       	set
 b90:	00 13       	cpse	r16, r16

00000b92 <__umulsidi3>:
 b92:	e8 94       	clt
 b94:	a0 e0       	ldi	r26, 0x00	; 0
 b96:	b0 e0       	ldi	r27, 0x00	; 0
 b98:	ef ec       	ldi	r30, 0xCF	; 207
 b9a:	f5 e0       	ldi	r31, 0x05	; 5
 b9c:	a4 c0       	rjmp	.+328    	; 0xce6 <__prologue_saves__+0x10>
 b9e:	ef ef       	ldi	r30, 0xFF	; 255
 ba0:	e7 f9       	bld	r30, 7
 ba2:	59 01       	movw	r10, r18
 ba4:	6a 01       	movw	r12, r20
 ba6:	5e 23       	and	r21, r30
 ba8:	55 0f       	add	r21, r21
 baa:	ee 08       	sbc	r14, r14
 bac:	fe 2c       	mov	r15, r14
 bae:	87 01       	movw	r16, r14
 bb0:	9b 01       	movw	r18, r22
 bb2:	ac 01       	movw	r20, r24
 bb4:	9e 23       	and	r25, r30
 bb6:	99 0f       	add	r25, r25
 bb8:	66 0b       	sbc	r22, r22
 bba:	76 2f       	mov	r23, r22
 bbc:	cb 01       	movw	r24, r22
 bbe:	b9 df       	rcall	.-142    	; 0xb32 <__muldi3>
 bc0:	cd b7       	in	r28, 0x3d	; 61
 bc2:	de b7       	in	r29, 0x3e	; 62
 bc4:	ea e0       	ldi	r30, 0x0A	; 10
 bc6:	ab c0       	rjmp	.+342    	; 0xd1e <__epilogue_restores__+0x10>

00000bc8 <__moddi3>:
 bc8:	68 94       	set
 bca:	01 c0       	rjmp	.+2      	; 0xbce <__divdi3_moddi3>

00000bcc <__divdi3>:
 bcc:	e8 94       	clt

00000bce <__divdi3_moddi3>:
 bce:	f9 2f       	mov	r31, r25
 bd0:	f1 2b       	or	r31, r17
 bd2:	0a f0       	brmi	.+2      	; 0xbd6 <__divdi3_moddi3+0x8>
 bd4:	27 c0       	rjmp	.+78     	; 0xc24 <__udivdi3_umoddi3>
 bd6:	a0 e0       	ldi	r26, 0x00	; 0
 bd8:	b0 e0       	ldi	r27, 0x00	; 0
 bda:	e0 ef       	ldi	r30, 0xF0	; 240
 bdc:	f5 e0       	ldi	r31, 0x05	; 5
 bde:	81 c0       	rjmp	.+258    	; 0xce2 <__prologue_saves__+0xc>
 be0:	09 2e       	mov	r0, r25
 be2:	05 94       	asr	r0
 be4:	1a f4       	brpl	.+6      	; 0xbec <__divdi3_moddi3+0x1e>
 be6:	67 d0       	rcall	.+206    	; 0xcb6 <__negdi2>
 be8:	11 23       	and	r17, r17
 bea:	92 f4       	brpl	.+36     	; 0xc10 <__divdi3_moddi3+0x42>
 bec:	f0 e8       	ldi	r31, 0x80	; 128
 bee:	0f 26       	eor	r0, r31
 bf0:	ff ef       	ldi	r31, 0xFF	; 255
 bf2:	e0 94       	com	r14
 bf4:	f0 94       	com	r15
 bf6:	00 95       	com	r16
 bf8:	10 95       	com	r17
 bfa:	b0 94       	com	r11
 bfc:	c0 94       	com	r12
 bfe:	d0 94       	com	r13
 c00:	a1 94       	neg	r10
 c02:	bf 0a       	sbc	r11, r31
 c04:	cf 0a       	sbc	r12, r31
 c06:	df 0a       	sbc	r13, r31
 c08:	ef 0a       	sbc	r14, r31
 c0a:	ff 0a       	sbc	r15, r31
 c0c:	0f 0b       	sbc	r16, r31
 c0e:	1f 0b       	sbc	r17, r31
 c10:	13 d0       	rcall	.+38     	; 0xc38 <__udivmod64>
 c12:	07 fc       	sbrc	r0, 7
 c14:	50 d0       	rcall	.+160    	; 0xcb6 <__negdi2>
 c16:	cd b7       	in	r28, 0x3d	; 61
 c18:	de b7       	in	r29, 0x3e	; 62
 c1a:	ec e0       	ldi	r30, 0x0C	; 12
 c1c:	7e c0       	rjmp	.+252    	; 0xd1a <__epilogue_restores__+0xc>

00000c1e <__umoddi3>:
 c1e:	68 94       	set
 c20:	01 c0       	rjmp	.+2      	; 0xc24 <__udivdi3_umoddi3>

00000c22 <__udivdi3>:
 c22:	e8 94       	clt

00000c24 <__udivdi3_umoddi3>:
 c24:	8f 92       	push	r8
 c26:	9f 92       	push	r9
 c28:	cf 93       	push	r28
 c2a:	df 93       	push	r29
 c2c:	05 d0       	rcall	.+10     	; 0xc38 <__udivmod64>
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	9f 90       	pop	r9
 c34:	8f 90       	pop	r8
 c36:	08 95       	ret

00000c38 <__udivmod64>:
 c38:	88 24       	eor	r8, r8
 c3a:	99 24       	eor	r9, r9
 c3c:	f4 01       	movw	r30, r8
 c3e:	e4 01       	movw	r28, r8
 c40:	b0 e4       	ldi	r27, 0x40	; 64
 c42:	1b 2e       	mov	r1, r27
 c44:	d4 01       	movw	r26, r8
 c46:	9d 15       	cp	r25, r13
 c48:	8e 04       	cpc	r8, r14
 c4a:	9f 04       	cpc	r9, r15
 c4c:	e0 07       	cpc	r30, r16
 c4e:	f1 07       	cpc	r31, r17
 c50:	38 f4       	brcc	.+14     	; 0xc60 <__udivmod64+0x28>
 c52:	fc 01       	movw	r30, r24
 c54:	4b 01       	movw	r8, r22
 c56:	ca 01       	movw	r24, r20
 c58:	b9 01       	movw	r22, r18
 c5a:	ad 01       	movw	r20, r26
 c5c:	9e 01       	movw	r18, r28
 c5e:	16 94       	lsr	r1
 c60:	22 0f       	add	r18, r18
 c62:	33 1f       	adc	r19, r19
 c64:	44 1f       	adc	r20, r20
 c66:	55 1f       	adc	r21, r21
 c68:	66 1f       	adc	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	88 1c       	adc	r8, r8
 c72:	99 1c       	adc	r9, r9
 c74:	ee 1f       	adc	r30, r30
 c76:	ff 1f       	adc	r31, r31
 c78:	cc 1f       	adc	r28, r28
 c7a:	dd 1f       	adc	r29, r29
 c7c:	aa 1f       	adc	r26, r26
 c7e:	bb 1f       	adc	r27, r27
 c80:	8a 14       	cp	r8, r10
 c82:	9b 04       	cpc	r9, r11
 c84:	ec 05       	cpc	r30, r12
 c86:	fd 05       	cpc	r31, r13
 c88:	ce 05       	cpc	r28, r14
 c8a:	df 05       	cpc	r29, r15
 c8c:	a0 07       	cpc	r26, r16
 c8e:	b1 07       	cpc	r27, r17
 c90:	48 f0       	brcs	.+18     	; 0xca4 <__udivmod64+0x6c>
 c92:	8a 18       	sub	r8, r10
 c94:	9b 08       	sbc	r9, r11
 c96:	ec 09       	sbc	r30, r12
 c98:	fd 09       	sbc	r31, r13
 c9a:	ce 09       	sbc	r28, r14
 c9c:	df 09       	sbc	r29, r15
 c9e:	a0 0b       	sbc	r26, r16
 ca0:	b1 0b       	sbc	r27, r17
 ca2:	21 60       	ori	r18, 0x01	; 1
 ca4:	1a 94       	dec	r1
 ca6:	e1 f6       	brne	.-72     	; 0xc60 <__udivmod64+0x28>
 ca8:	2e f4       	brtc	.+10     	; 0xcb4 <__udivmod64+0x7c>
 caa:	94 01       	movw	r18, r8
 cac:	af 01       	movw	r20, r30
 cae:	be 01       	movw	r22, r28
 cb0:	cd 01       	movw	r24, r26
 cb2:	00 0c       	add	r0, r0
 cb4:	08 95       	ret

00000cb6 <__negdi2>:
 cb6:	60 95       	com	r22
 cb8:	70 95       	com	r23
 cba:	80 95       	com	r24
 cbc:	90 95       	com	r25
 cbe:	30 95       	com	r19
 cc0:	40 95       	com	r20
 cc2:	50 95       	com	r21
 cc4:	21 95       	neg	r18
 cc6:	3f 4f       	sbci	r19, 0xFF	; 255
 cc8:	4f 4f       	sbci	r20, 0xFF	; 255
 cca:	5f 4f       	sbci	r21, 0xFF	; 255
 ccc:	6f 4f       	sbci	r22, 0xFF	; 255
 cce:	7f 4f       	sbci	r23, 0xFF	; 255
 cd0:	8f 4f       	sbci	r24, 0xFF	; 255
 cd2:	9f 4f       	sbci	r25, 0xFF	; 255
 cd4:	08 95       	ret

00000cd6 <__prologue_saves__>:
 cd6:	2f 92       	push	r2
 cd8:	3f 92       	push	r3
 cda:	4f 92       	push	r4
 cdc:	5f 92       	push	r5
 cde:	6f 92       	push	r6
 ce0:	7f 92       	push	r7
 ce2:	8f 92       	push	r8
 ce4:	9f 92       	push	r9
 ce6:	af 92       	push	r10
 ce8:	bf 92       	push	r11
 cea:	cf 92       	push	r12
 cec:	df 92       	push	r13
 cee:	ef 92       	push	r14
 cf0:	ff 92       	push	r15
 cf2:	0f 93       	push	r16
 cf4:	1f 93       	push	r17
 cf6:	cf 93       	push	r28
 cf8:	df 93       	push	r29
 cfa:	cd b7       	in	r28, 0x3d	; 61
 cfc:	de b7       	in	r29, 0x3e	; 62
 cfe:	ca 1b       	sub	r28, r26
 d00:	db 0b       	sbc	r29, r27
 d02:	0f b6       	in	r0, 0x3f	; 63
 d04:	f8 94       	cli
 d06:	de bf       	out	0x3e, r29	; 62
 d08:	0f be       	out	0x3f, r0	; 63
 d0a:	cd bf       	out	0x3d, r28	; 61
 d0c:	09 94       	ijmp

00000d0e <__epilogue_restores__>:
 d0e:	2a 88       	ldd	r2, Y+18	; 0x12
 d10:	39 88       	ldd	r3, Y+17	; 0x11
 d12:	48 88       	ldd	r4, Y+16	; 0x10
 d14:	5f 84       	ldd	r5, Y+15	; 0x0f
 d16:	6e 84       	ldd	r6, Y+14	; 0x0e
 d18:	7d 84       	ldd	r7, Y+13	; 0x0d
 d1a:	8c 84       	ldd	r8, Y+12	; 0x0c
 d1c:	9b 84       	ldd	r9, Y+11	; 0x0b
 d1e:	aa 84       	ldd	r10, Y+10	; 0x0a
 d20:	b9 84       	ldd	r11, Y+9	; 0x09
 d22:	c8 84       	ldd	r12, Y+8	; 0x08
 d24:	df 80       	ldd	r13, Y+7	; 0x07
 d26:	ee 80       	ldd	r14, Y+6	; 0x06
 d28:	fd 80       	ldd	r15, Y+5	; 0x05
 d2a:	0c 81       	ldd	r16, Y+4	; 0x04
 d2c:	1b 81       	ldd	r17, Y+3	; 0x03
 d2e:	aa 81       	ldd	r26, Y+2	; 0x02
 d30:	b9 81       	ldd	r27, Y+1	; 0x01
 d32:	ce 0f       	add	r28, r30
 d34:	d1 1d       	adc	r29, r1
 d36:	0f b6       	in	r0, 0x3f	; 63
 d38:	f8 94       	cli
 d3a:	de bf       	out	0x3e, r29	; 62
 d3c:	0f be       	out	0x3f, r0	; 63
 d3e:	cd bf       	out	0x3d, r28	; 61
 d40:	ed 01       	movw	r28, r26
 d42:	08 95       	ret

00000d44 <__ashldi3>:
 d44:	0f 93       	push	r16
 d46:	08 30       	cpi	r16, 0x08	; 8
 d48:	90 f0       	brcs	.+36     	; 0xd6e <__ashldi3+0x2a>
 d4a:	98 2f       	mov	r25, r24
 d4c:	87 2f       	mov	r24, r23
 d4e:	76 2f       	mov	r23, r22
 d50:	65 2f       	mov	r22, r21
 d52:	54 2f       	mov	r21, r20
 d54:	43 2f       	mov	r20, r19
 d56:	32 2f       	mov	r19, r18
 d58:	22 27       	eor	r18, r18
 d5a:	08 50       	subi	r16, 0x08	; 8
 d5c:	f4 cf       	rjmp	.-24     	; 0xd46 <__ashldi3+0x2>
 d5e:	22 0f       	add	r18, r18
 d60:	33 1f       	adc	r19, r19
 d62:	44 1f       	adc	r20, r20
 d64:	55 1f       	adc	r21, r21
 d66:	66 1f       	adc	r22, r22
 d68:	77 1f       	adc	r23, r23
 d6a:	88 1f       	adc	r24, r24
 d6c:	99 1f       	adc	r25, r25
 d6e:	0a 95       	dec	r16
 d70:	b2 f7       	brpl	.-20     	; 0xd5e <__ashldi3+0x1a>
 d72:	0f 91       	pop	r16
 d74:	08 95       	ret

00000d76 <__ashrdi3>:
 d76:	97 fb       	bst	r25, 7
 d78:	10 f8       	bld	r1, 0

00000d7a <__lshrdi3>:
 d7a:	16 94       	lsr	r1
 d7c:	00 08       	sbc	r0, r0
 d7e:	0f 93       	push	r16
 d80:	08 30       	cpi	r16, 0x08	; 8
 d82:	98 f0       	brcs	.+38     	; 0xdaa <__lshrdi3+0x30>
 d84:	08 50       	subi	r16, 0x08	; 8
 d86:	23 2f       	mov	r18, r19
 d88:	34 2f       	mov	r19, r20
 d8a:	45 2f       	mov	r20, r21
 d8c:	56 2f       	mov	r21, r22
 d8e:	67 2f       	mov	r22, r23
 d90:	78 2f       	mov	r23, r24
 d92:	89 2f       	mov	r24, r25
 d94:	90 2d       	mov	r25, r0
 d96:	f4 cf       	rjmp	.-24     	; 0xd80 <__lshrdi3+0x6>
 d98:	05 94       	asr	r0
 d9a:	97 95       	ror	r25
 d9c:	87 95       	ror	r24
 d9e:	77 95       	ror	r23
 da0:	67 95       	ror	r22
 da2:	57 95       	ror	r21
 da4:	47 95       	ror	r20
 da6:	37 95       	ror	r19
 da8:	27 95       	ror	r18
 daa:	0a 95       	dec	r16
 dac:	aa f7       	brpl	.-22     	; 0xd98 <__lshrdi3+0x1e>
 dae:	0f 91       	pop	r16
 db0:	08 95       	ret

00000db2 <__adddi3>:
 db2:	2a 0d       	add	r18, r10
 db4:	3b 1d       	adc	r19, r11
 db6:	4c 1d       	adc	r20, r12
 db8:	5d 1d       	adc	r21, r13
 dba:	6e 1d       	adc	r22, r14
 dbc:	7f 1d       	adc	r23, r15
 dbe:	80 1f       	adc	r24, r16
 dc0:	91 1f       	adc	r25, r17
 dc2:	08 95       	ret

00000dc4 <__adddi3_s8>:
 dc4:	00 24       	eor	r0, r0
 dc6:	a7 fd       	sbrc	r26, 7
 dc8:	00 94       	com	r0
 dca:	2a 0f       	add	r18, r26
 dcc:	30 1d       	adc	r19, r0
 dce:	40 1d       	adc	r20, r0
 dd0:	50 1d       	adc	r21, r0
 dd2:	60 1d       	adc	r22, r0
 dd4:	70 1d       	adc	r23, r0
 dd6:	80 1d       	adc	r24, r0
 dd8:	90 1d       	adc	r25, r0
 dda:	08 95       	ret

00000ddc <__subdi3>:
 ddc:	2a 19       	sub	r18, r10
 dde:	3b 09       	sbc	r19, r11
 de0:	4c 09       	sbc	r20, r12
 de2:	5d 09       	sbc	r21, r13
 de4:	6e 09       	sbc	r22, r14
 de6:	7f 09       	sbc	r23, r15
 de8:	80 0b       	sbc	r24, r16
 dea:	91 0b       	sbc	r25, r17
 dec:	08 95       	ret

00000dee <__cmpdi2>:
 dee:	2a 15       	cp	r18, r10
 df0:	3b 05       	cpc	r19, r11
 df2:	4c 05       	cpc	r20, r12
 df4:	5d 05       	cpc	r21, r13
 df6:	6e 05       	cpc	r22, r14
 df8:	7f 05       	cpc	r23, r15
 dfa:	80 07       	cpc	r24, r16
 dfc:	91 07       	cpc	r25, r17
 dfe:	08 95       	ret

00000e00 <__cmpdi2_s8>:
 e00:	00 24       	eor	r0, r0
 e02:	a7 fd       	sbrc	r26, 7
 e04:	00 94       	com	r0
 e06:	2a 17       	cp	r18, r26
 e08:	30 05       	cpc	r19, r0
 e0a:	40 05       	cpc	r20, r0
 e0c:	50 05       	cpc	r21, r0
 e0e:	60 05       	cpc	r22, r0
 e10:	70 05       	cpc	r23, r0
 e12:	80 05       	cpc	r24, r0
 e14:	90 05       	cpc	r25, r0
 e16:	08 95       	ret

00000e18 <__udivmodsi4>:
 e18:	a1 e2       	ldi	r26, 0x21	; 33
 e1a:	1a 2e       	mov	r1, r26
 e1c:	aa 1b       	sub	r26, r26
 e1e:	bb 1b       	sub	r27, r27
 e20:	fd 01       	movw	r30, r26
 e22:	0d c0       	rjmp	.+26     	; 0xe3e <__udivmodsi4_ep>

00000e24 <__udivmodsi4_loop>:
 e24:	aa 1f       	adc	r26, r26
 e26:	bb 1f       	adc	r27, r27
 e28:	ee 1f       	adc	r30, r30
 e2a:	ff 1f       	adc	r31, r31
 e2c:	a2 17       	cp	r26, r18
 e2e:	b3 07       	cpc	r27, r19
 e30:	e4 07       	cpc	r30, r20
 e32:	f5 07       	cpc	r31, r21
 e34:	20 f0       	brcs	.+8      	; 0xe3e <__udivmodsi4_ep>
 e36:	a2 1b       	sub	r26, r18
 e38:	b3 0b       	sbc	r27, r19
 e3a:	e4 0b       	sbc	r30, r20
 e3c:	f5 0b       	sbc	r31, r21

00000e3e <__udivmodsi4_ep>:
 e3e:	66 1f       	adc	r22, r22
 e40:	77 1f       	adc	r23, r23
 e42:	88 1f       	adc	r24, r24
 e44:	99 1f       	adc	r25, r25
 e46:	1a 94       	dec	r1
 e48:	69 f7       	brne	.-38     	; 0xe24 <__udivmodsi4_loop>
 e4a:	60 95       	com	r22
 e4c:	70 95       	com	r23
 e4e:	80 95       	com	r24
 e50:	90 95       	com	r25
 e52:	9b 01       	movw	r18, r22
 e54:	ac 01       	movw	r20, r24
 e56:	bd 01       	movw	r22, r26
 e58:	cf 01       	movw	r24, r30
 e5a:	08 95       	ret

00000e5c <_exit>:
 e5c:	f8 94       	cli

00000e5e <__stop_program>:
 e5e:	ff cf       	rjmp	.-2      	; 0xe5e <__stop_program>
